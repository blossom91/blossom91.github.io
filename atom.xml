<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blossom</title>
  
  <subtitle>good good study and day day up</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaohang.site/"/>
  <updated>2018-07-20T12:37:08.000Z</updated>
  <id>http://zhaohang.site/</id>
  
  <author>
    <name>blossom</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>html5直播</title>
    <link href="http://zhaohang.site/2018/07/20/html5%E7%9B%B4%E6%92%AD/"/>
    <id>http://zhaohang.site/2018/07/20/html5直播/</id>
    <published>2018-07-20T12:30:11.000Z</published>
    <updated>2018-07-20T12:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直喜欢看斗鱼上面 dota2 比赛,突然有一天对直播很感兴趣,所以了解一下.</p><a id="more"></a><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>pc 端采集=&gt; H264 压缩 =&gt; 推流 =&gt; CDN =&gt; 播放</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>HLS 协议<br>video &lt;=&gt; M3U8 =&gt; segment-1.ts<br>M3U8 是一个包含很多 ts 文件地址列表的文本文件,有 2 种类型<br>全量列表: 点播使用,包含一段视频所有 ts 文件<br>动态列表: 直播使用,动态更新 ts 文件地址<br>简单的一个方案,比如斗鱼使用<br>因为 M3U8 下面切片了几个 ts 文件,导致有延时,实时性不太好</p><p>HTTP-FLV 协议<br>传送 flv 格式的视频,http 长连接导致没有过多的延迟性<br>比较综合的一种方案,B 站使用</p><h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><p>####attribute<br>controls 控制面板<br>poster 第一帧贴图<br>autoplay 自动播放<br>muted 静音<br>loop 循环播放<br>preload 预加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音量控制</span></span><br><span class="line">v.volume = <span class="number">0.5</span>;</span><br><span class="line"><span class="comment">// 播放时间控制</span></span><br><span class="line">v.currentTime = <span class="number">60</span>;<span class="comment">// 单位：秒</span></span><br><span class="line"><span class="comment">//播放地址切换</span></span><br><span class="line">v.src = <span class="string">'./....MP4'</span></span><br></pre></td></tr></table></figure><h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loadstart</span></span><br><span class="line">v.addEventListener(<span class="string">'loadstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//开始加载</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// durationchange</span></span><br><span class="line">v.addEventListener(<span class="string">'durationchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'durationchange'</span>, v.duration);</span><br><span class="line"><span class="comment">// 视频长度变化</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// loadedmetadata</span></span><br><span class="line">v.addEventListener(<span class="string">'loadedmetadata'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'loadedmetadata'</span>);</span><br><span class="line"><span class="comment">//加载数据</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// loadeddata</span></span><br><span class="line">v.addEventListener(<span class="string">'loadeddata'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'loadeddata'</span>);</span><br><span class="line"><span class="comment">//加载数据结束</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// progress</span></span><br><span class="line">v.addEventListener(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'progress'</span>);</span><br><span class="line"><span class="comment">// 加载片段...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// canplay</span></span><br><span class="line">v.addEventListener(<span class="string">'canplay'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'canplay'</span>);</span><br><span class="line"><span class="comment">//可以播放</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// canplaythrough</span></span><br><span class="line">v.addEventListener(<span class="string">'canplaythrough'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'canplaythrough'</span>);</span><br><span class="line"><span class="comment">// 可以流畅播放</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// play</span></span><br><span class="line">v.addEventListener(<span class="string">'play'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'play'</span>);</span><br><span class="line"><span class="comment">//播放</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// pause</span></span><br><span class="line">v.addEventListener(<span class="string">'pause'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'pause'</span>);</span><br><span class="line"><span class="comment">//暂停</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// seeking</span></span><br><span class="line">v.addEventListener(<span class="string">'seeking'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'seeking'</span>);</span><br><span class="line"><span class="comment">// 播放跳转</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// seeded</span></span><br><span class="line">v.addEventListener(<span class="string">'seeked'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'seeded'</span>);</span><br><span class="line"><span class="comment">//跳转结束</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// waiting</span></span><br><span class="line">v.addEventListener(<span class="string">'waiting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'waiting'</span>);</span><br><span class="line"><span class="comment">// 播放等待中</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// playing</span></span><br><span class="line">v.addEventListener(<span class="string">'playing'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'playing'</span>);</span><br><span class="line"><span class="comment">// 播放中</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// timeupdate</span></span><br><span class="line">v.addEventListener(<span class="string">'timeupdate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'timeupdate'</span>);</span><br><span class="line"><span class="comment">// 当前播放时间变化</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ended</span></span><br><span class="line">v.addEventListener(<span class="string">'ended'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ended'</span>);</span><br><span class="line"><span class="comment">// 播放结束</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line">v.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>, e);</span><br><span class="line"><span class="comment">// 加载错误</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装nginx和rtmp模块</span></span><br><span class="line">brew install nginx-full --with-rtmp-module</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装推流工具</span></span><br><span class="line">brew install ffmpeg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安到哪了</span></span><br><span class="line"> brew info nginx-full</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 打开nginx配置</span><br><span class="line"> http &#123;</span><br><span class="line">       server &#123;</span><br><span class="line">         listen  8080;</span><br><span class="line">         location /hls &#123;</span><br><span class="line">             # Serve HLS fragments</span><br><span class="line">             types &#123;</span><br><span class="line">                 application/vnd.apple.mpegurl m3u8;</span><br><span class="line">                 video/mp2t ts;</span><br><span class="line">             &#125;</span><br><span class="line">             root ...; # 同下方配置</span><br><span class="line">             expires -1;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     ……</span><br><span class="line"> &#125;</span><br><span class="line"> // 在http节点后面加上rtmp配置：</span><br><span class="line"> rtmp &#123;</span><br><span class="line">     server &#123;</span><br><span class="line">         listen 1935;</span><br><span class="line">         chunk_size 4000;</span><br><span class="line">         application rtmplive &#123;</span><br><span class="line">             live on;</span><br><span class="line">             record off;</span><br><span class="line">         &#125;</span><br><span class="line">        application hls &#123;</span><br><span class="line">             live on;</span><br><span class="line">             hls on;</span><br><span class="line">             hls_path 绝对路径; # 对应上方root配置</span><br><span class="line">             hls_fragment 5s;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>下载一个 vlc 播放器 File=&gt; Open Network 输入<br><code>rtmp://localhost:1935/rtmplive/...</code></p><p>rtmp 推流<br><code>ffmpeg -re -i 1.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmplive/...</code></p><p>http 推流<br><code>ffmpeg -re -i 1.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/hls/...</code></p><p>封装好的工具推流<br><code>ffmpeg -re -i 1.mp4 -c copy -f flv rtmp://localhost:1935/live/movie</code></p><p>###框架</p><p>目前关于直播有 3 个成熟的框架</p><p>video.js 全家桶框架,包含各种插件与 ui 样式</p><p>hls.js 基于 hls 协议的直播框架,可以将不兼容 hls 协议的游览器支持 hls 协议,一个专注与内核的框架</p><p>flv.js bilibili 开源的 http-flv 协议的直播框架,用法与 hls 差不多</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直喜欢看斗鱼上面 dota2 比赛,突然有一天对直播很感兴趣,所以了解一下.&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://zhaohang.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于promise的实现</title>
    <link href="http://zhaohang.site/2018/07/14/%E5%85%B3%E4%BA%8Epromise%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://zhaohang.site/2018/07/14/关于promise的实现/</id>
    <published>2018-07-14T15:28:30.000Z</published>
    <updated>2018-07-16T02:06:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从有了 promise，我写异步代码就是一个 then，then 的层级深了就是一个 async，包治百病，哈哈哈哈。。。。<br>今天就来探讨一下，一个 promise 是如何实现的</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span> <span class="comment">//根据当前状态决定执行函数</span></span><br><span class="line">        <span class="keyword">this</span>.value = <span class="literal">undefined</span> <span class="comment">//正确值</span></span><br><span class="line">        <span class="keyword">this</span>.reason = <span class="literal">undefined</span> <span class="comment">//错误原因</span></span><br><span class="line">        <span class="keyword">this</span>.onResolvedCallbacks = [] <span class="comment">//正确函数执行顺序数组</span></span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks = [] <span class="comment">//错误函数执行顺序数组</span></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span></span><br><span class="line">                <span class="keyword">this</span>.value = value</span><br><span class="line">                <span class="keyword">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn())</span><br><span class="line">            &#125; <span class="comment">//看看你天天resolve(value)的函数内部干了什么</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="string">'rejected'</span></span><br><span class="line">                <span class="keyword">this</span>.reason = reason</span><br><span class="line">                <span class="keyword">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn())</span><br><span class="line">            &#125; <span class="comment">//看看你天天resolve(err)的函数内部干了什么</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="comment">//oh,then你会为什么这么好用，大部分人是不是不知道可以放2个函数参数的</span></span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">        onRejected =</span><br><span class="line">            <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span></span><br><span class="line">                ? onRejected</span><br><span class="line">                : <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                      <span class="keyword">throw</span> err</span><br><span class="line">                  &#125;</span><br><span class="line">        <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//可以让我们一直then下去的关键，因为then里面封装返回了一个promise</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//promise标准规定参数函数必须是异步调用</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onFulfilled(<span class="keyword">this</span>.value)</span><br><span class="line">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">                        resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.onResolvedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onFulfilled(<span class="keyword">this</span>.value)</span><br><span class="line">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                            reject(e)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">0</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">this</span>.onRejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">                            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                            reject(e)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, <span class="number">0</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(fn) &#123;</span><br><span class="line">        <span class="comment">//catch只是then的一层封装</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, fn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//resolvePromise函数，处理自己return的promise和默认的promise2的关系</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === promise2) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Chaining cycle detected for promise'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> called</span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.then</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</span><br><span class="line">                then.call(</span><br><span class="line">                    x,</span><br><span class="line">                    y =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">                        called = <span class="literal">true</span></span><br><span class="line">                        resolvePromise(promise2, y, resolve, reject)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    err =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">                        called = <span class="literal">true</span></span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(x)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面就是主要流程了，下面都是语法糖</span></span><br><span class="line"><span class="comment">//resolve方法</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(val)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reject方法</span></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(val)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//race方法</span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">            promises[i].then(resolve, reject)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回)</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">processData</span>(<span class="params">index, data</span>) </span>&#123;</span><br><span class="line">        arr[index] = data</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span> (i == promises.length) &#123;</span><br><span class="line">            resolve(arr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">            promises[i].then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                processData(i, data)</span><br><span class="line">            &#125;, reject)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从有了 promise，我写异步代码就是一个 then，then 的层级深了就是一个 async，包治百病，哈哈哈哈。。。。&lt;br&gt;今天就来探讨一下，一个 promise 是如何实现的&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://zhaohang.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于http/tcp协议</title>
    <link href="http://zhaohang.site/2018/06/02/%E5%85%B3%E4%BA%8Ehttp-tcp%E5%8D%8F%E8%AE%AE/"/>
    <id>http://zhaohang.site/2018/06/02/关于http-tcp协议/</id>
    <published>2018-06-02T15:10:12.000Z</published>
    <updated>2018-06-13T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>http/tcp 协议是程序员必须知道的东西,目前先简单了解一下,后续还需要继续做功课…</p><a id="more"></a><h3 id="http-的发展"><a href="#http-的发展" class="headerlink" title="http 的发展"></a>http 的发展</h3><p>目前还在使用的版本是 http1.1 版本,有许多问题,比如请求按照顺序响应,造成了一些客户端优化(合并文件,减少请求数,img 放入 css 等)<br>未来的 http2 会很好的解决这个问题<br><br></p><p>五层网络:</p><ul><li>tcp 用于传输层,http 用于应用层,至于还有的下三层,暂时不需要了解</li></ul><p>http 的连接需要 3 次握手,1.1 版本可以保持连接,直到一段时间不响应自动中断,免除了重复握手的性能消耗</p><p><br><br>URI(url urn) 统一资源标志符:</p><ul><li>url: 平时我们见到的网址链接</li><li>urn: 目前还没什么用</li></ul><p>http code</p><ul><li>1 开头 需要继续操作</li><li>2 开头代表成功</li><li>3 开头代表需要从定向从其他地方获取资源</li><li>4 开头代表失败了</li><li>5 服务端错误</li></ul><h3 id="http-相关特性"><a href="#http-相关特性" class="headerlink" title="http 相关特性"></a>http 相关特性</h3><p>跨域: 这个是游览器限制,请求已经发送了,内容也已经返回了,但是游览器限制了这个内容,服务端请求没有这个问题<br>解决跨域 1. jsonp 2. cors(推荐阮老师的博客相关文章)</p><p>关于 cors:<br>默认只允许 post get head 方法 text/plain multipart/form-data application/x-www-form-urlencoded 请求格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>, <span class="comment">// 允许请求域名</span></span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'*'</span>, <span class="comment">// 允许的请求头</span></span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'Post,PUT,Delete'</span>, <span class="comment">//允许跨域请求的方法</span></span><br><span class="line">    <span class="string">'Access-Control-Max-Age'</span>: <span class="string">'1000'</span>, <span class="comment">// 1000s内部不再需要预请求</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control:"></a>Cache-Control:</h3><ul><li>public: 所有地方包括代理服务器都可以缓存</li><li>private: 只有游览器可以缓存</li><li>no-cache: (需要服务器验证才可以使用缓存)</li><li>no-store: 不可以使用缓存</li></ul><p>到期:</p><ul><li>max-age = <seconds> 过期时间</seconds></li><li>s-maxage= <seconds> 只在代理服务器生效</seconds></li><li>max-stale = <seconds> 即使过期了也继续使用缓存</seconds></li></ul><p>验证:</p><ul><li>Last-Modified 服务端上次修改时间,游览器储存</li><li>If-Modified-Since 游览器请求带上储存的上次修改时间去匹配</li><li>Etag hash 计算文件内容,通过签名验证文件变动</li><li>must-revalidate 过期了去原服务器拿数据</li><li>proxy-revalidate 过期了去代理服务器拿数据</li></ul><p>Cookie:</p><ul><li>max-age 和 expires 设置过期时间</li><li>Secure 只在 https 的时候发送</li><li>HttpOnly 无法通过 document.cookie 访问</li></ul><h3 id="http-长连接"><a href="#http-长连接" class="headerlink" title="http 长连接"></a>http 长连接</h3><p>Connection: keep-alive / close<br>http1.1 同一个域名下一般最多 6 个 http 链接,后面可复用前面的链接不需要再次 3 次握手,默认是打开的,可设置 close 关闭<br>http2 可以并发的处理请求,就没有这个限制了</p><h3 id="数据协商"><a href="#数据协商" class="headerlink" title="数据协商"></a>数据协商</h3><p>——- 客户端<br>Accept: 需要的数据类型<br>Accept-Encoding: 如何进行数据压缩<br>Accept-Language: 语言种类<br>User-Agent: 游览器种类,系统版本等相关信息</p><p>—— 服务端<br>Content-Type 返回的数据类型<br>Content-Encoding: 压缩方式<br>Content-Language: 语言</p><h3 id="Redirect-重定向"><a href="#Redirect-重定向" class="headerlink" title="Redirect: 重定向"></a>Redirect: 重定向</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 302 是临时跳转  301 是永久跳转  游览器会缓存 使用要慎重</span></span><br><span class="line">response.writeHead(<span class="number">302</span>, &#123;</span><br><span class="line">    Location: <span class="string">'/new'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="CSP-游览器安全限制"><a href="#CSP-游览器安全限制" class="headerlink" title="CSP: 游览器安全限制"></a>CSP: 游览器安全限制</h3><p>服务端可以通过设置这个头限制 html 里面内联的 js 运行,防止注入攻击</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 302 是临时跳转  301 是永久跳转  游览器会缓存 使用要慎重</span></span><br><span class="line">response.writeHead(<span class="number">302</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Security-Policy'</span>: <span class="string">'default-src http: https:'</span>,</span><br><span class="line">      <span class="string">'Content-Security-Policy'</span>: <span class="string">'default-src \'self\; form-action \'self\', // 也可以限制表单的提交范围</span></span><br><span class="line"><span class="string">      '</span>Content-Security-Policy<span class="string">': '</span><span class="keyword">default</span>-src \<span class="string">'self\' http://url'</span> <span class="comment">//限制外链链接 只能使用自己网站的  可以手动添加允许链接</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h3><p>信道复用:只需要一个 http 连接<br>分帧传输: 可以并发发送请求<br>Server Push: 服务端推送</p><p>相较于 http1.1 http2 性能提升非常明显,所以有条件的话建议通过 nginx 配置 http2</p><p>待续……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http/tcp 协议是程序员必须知道的东西,目前先简单了解一下,后续还需要继续做功课…&lt;/p&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://zhaohang.site/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="http" scheme="http://zhaohang.site/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>关于Hybrid</title>
    <link href="http://zhaohang.site/2018/05/19/%E5%85%B3%E4%BA%8Ehybrid/"/>
    <id>http://zhaohang.site/2018/05/19/关于hybrid/</id>
    <published>2018-05-19T14:17:25.000Z</published>
    <updated>2018-06-13T02:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司如果是做 app 的,前端不会 hybrid 就不用混了,用了这么久,总结一下自己对 hybrid 的理解~~</p><a id="more"></a><p>hybrid: 前端与客户端一起玩(开发)~~<br>hybrid 最大好处,无需审核就可更新….<br>通过 webview 与 file 协议实现(就是本地拿文件)<br><br><br>如何更新:<br>服务端需要维护一个 zip 版本管理工具<br>app 主动请求服务端 web 包的版本号,如果有新的就更新一下,没有就算了~<br>下载下来就把本地老包覆盖了~<br><br></p><p>如何与客户端通信—schema 协议</p><p>跟 jsonp 特别像,下面一个傻瓜式封装函数,把这个文件内置到客户端,启动 webview 默认执行,调用就行,记得和客户端约定好调用后的逻辑~~返回内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 schema 的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_invoke</span>(<span class="params">action, data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 拼装 schema 协议</span></span><br><span class="line">    <span class="keyword">var</span> schema = <span class="string">'myapp://utils/'</span> + action</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接参数</span></span><br><span class="line">    schema += <span class="string">'?a=a'</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">    key.forEach(<span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">        schema += <span class="string">'&amp;'</span> + e + <span class="string">'='</span> + data[e]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 callback</span></span><br><span class="line">    <span class="keyword">var</span> callbackName = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="comment">// 全局已经有了这个函数 传入了一个函数名称</span></span><br><span class="line">        callbackName = callback</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 传入了一个函数 ,全局注册一下这个函数</span></span><br><span class="line">        callbackName = action + <span class="built_in">Date</span>.now()</span><br><span class="line">        <span class="built_in">window</span>[callbackName] = callback</span><br><span class="line">    &#125;</span><br><span class="line">    schema +=<span class="string">'&amp;'</span>+ <span class="string">'callback='</span> + callbackName</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发通信</span></span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span><br><span class="line">    iframe.style.display = <span class="string">'none'</span></span><br><span class="line">    iframe.src = schema  </span><br><span class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.body</span><br><span class="line">    body.appendChild(iframe)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        body.removeChild(iframe)</span><br><span class="line">        iframe = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露到全局变量一些方法</span></span><br><span class="line"><span class="built_in">window</span>.invoke = &#123;</span><br><span class="line">    share: <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">        _invoke(<span class="string">'share'</span>, data, callback)</span><br><span class="line">    &#125;,</span><br><span class="line">    scan: <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">        _invoke(<span class="string">'scan'</span>, data, callback)</span><br><span class="line">    &#125;</span><br><span class="line">    login: <span class="function"><span class="keyword">function</span> (<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">        _invoke(<span class="string">'login'</span>, data, callback)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">invoke.share(&#123;</span><br><span class="line">    name:<span class="string">'xc'</span>,</span><br><span class="line">    age:<span class="string">'1'</span></span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hahah'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司如果是做 app 的,前端不会 hybrid 就不用混了,用了这么久,总结一下自己对 hybrid 的理解~~&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://zhaohang.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于前端优化</title>
    <link href="http://zhaohang.site/2018/04/27/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://zhaohang.site/2018/04/27/关于前端优化/</id>
    <published>2018-04-27T13:14:25.000Z</published>
    <updated>2018-06-13T02:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>身为强迫症,要对自己写的代码负责,所以了解一下前端优化是有必要的~~~</p><a id="more"></a><ol><li><p>文件压缩与合并<br>html css js 压缩 文件合并 gzip 压缩(<code>webpack</code>构建工具了解一下)<br>主要减少 http 请求数,文件大小的方式优化</p></li><li><p>图片压缩<br>一种是雪碧图,核心也是减少 http 请求数<br>一种就是压缩图片大小,这里推荐一个压缩工具<a href="http://compressjpeg.com/zh/" target="_blank" rel="noopener">图片压缩</a></p></li><li><p>文件加载和懒加载和预加载<br>(注意:同一个 cdn 最大请求数有限制,所以有些情况会同时存在几个 cdn 用来分发资源文件)<br>css 阻塞页面渲染,所以放在 head 里面<br>如果 js 操作 dom,需要放在前面,方面 dom 操作<br>图片等资源如果数量巨大(常见电商网站),图片在进入可视区域以后再开始加载即懒加载<br>一些页面为了保证流畅度(比如用了大量图片的 h5 活动页),需要等资源全部加载结束后再开始渲染,即预加载</p></li></ol><p>4)  重绘与回流<br>    回流: 触发页面重布局(消耗很大)<br>    重绘: 不改变布局,只改变样式,比如颜色(消耗小)<br>    优化点:</p><ul><li>尽量减少会引起回流的操作,限制回流在一个<strong>图层</strong>中</li><li>使用 translate 替代 top 操作</li><li>使用 opacity 替代 visibility</li><li>不要一条条改变 css,而是封装成 className 整体替换</li><li>复杂的操作先将 dom 结构 display:none 然后操作后显示</li></ul><ol><li><p>游览器储存<br>cookie cdn 的域名和主站的域名要分开,避免请求 cdn 携带 cookie 的流量损耗<br>Worker 可以把非常耗费性能的操作放在 worker 里运行,防止 js 堵塞</p></li><li><p>游览器缓存(主要是通过服务端设置)<br>cache-control</p><ul><li>max-age 服务端设置最大有效时间(直接游览器缓存拿)</li><li>s-maxage 最大有效时间(public private 公共还是私有 no-cache 不缓存 no-store)</li><li>expores 等同于 max-age,权重低于它<br>缓存验证</li><li>last-modified 与 if-midified-since 与服务端协商的一个过期时间(需要请求服务端确认是缓存还是新文件 304 缓存 200 新文件)</li><li>eTag 文件 hash 值 等同于 last-modified 更准确的缓存策略</li></ul></li><li><p>服务端优化<br>首屏加载问题通过服务端渲染 ssr 解决(要考量平衡服务端与客户端的计算能力)</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;身为强迫症,要对自己写的代码负责,所以了解一下前端优化是有必要的~~~&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://zhaohang.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>我的程序员入门手册</title>
    <link href="http://zhaohang.site/2018/04/01/%E6%88%91%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://zhaohang.site/2018/04/01/我的程序员入门手册/</id>
    <published>2018-04-01T06:27:55.000Z</published>
    <updated>2018-06-13T02:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈,偶尔看到我入行程序员的时候写的一个笔记,见证了我的成长,感觉挺有纪念意义的,就整理一下搬过来吧~~~~</p><a id="more"></a><h3 id="视频音频标签"><a href="#视频音频标签" class="headerlink" title="视频音频标签"></a>视频音频标签</h3><p>带控制器的视频标签, 不同浏览器有不同的文件格式要求<br>所以用 2 个 source 标签指定不同的视频格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogv"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带控制器的音频标签, 不同浏览器有不同的文件格式要求<br>所以用 2 个 source 标签指定不同的音频格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">'id-audio-player'</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.ogg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span> &gt;</span></span><br></pre></td></tr></table></figure><p>audio 基本操作如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">'#id-audio-player'</span>)</span><br><span class="line">a.play() <span class="comment">//播放</span></span><br><span class="line">a.pause() <span class="comment">//暂停</span></span><br><span class="line">a.autoplay <span class="comment">//自动播放 (设为true)</span></span><br><span class="line">a.src <span class="comment">//链接音频文件</span></span><br><span class="line">a.volume <span class="comment">//音量（0-1之间的数）</span></span><br><span class="line">a.duration <span class="comment">//音频时间长度</span></span><br><span class="line">a.currentTime = <span class="number">1</span> <span class="comment">//现在播放第几s（设置）</span></span><br><span class="line">a.playbackRate <span class="comment">// 播放速率, 默认是 1</span></span><br></pre></td></tr></table></figure><hr><h3 id="移动端设置"><a href="#移动端设置" class="headerlink" title="移动端设置"></a>移动端设置</h3><p>设置 viewport<br>viewport 是 html 的父元素<br>在手机上需要用下面的语句设置它的尺寸</p><blockquote><p><strong>网易移动端模板</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//设置rem</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.documentElement.style.fontSize = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">7.5</span>(iPhone6相对宽度) + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//通过设计图宽度 / 100 来得出相对宽度 rem</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//比如iphone5 设计图宽度640 相对宽度 6.4</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">width=device-width</td><td style="text-align:left">宽度等于设备宽度</td></tr><tr><td style="text-align:left">height=device-height</td><td style="text-align:left">高度等于设备宽度</td></tr><tr><td style="text-align:left">initial-scale</td><td style="text-align:left">初始缩放比例</td></tr><tr><td style="text-align:left">minimum-scale</td><td style="text-align:left">允许用户缩放的最小比例</td></tr><tr><td style="text-align:left">maximum-scale</td><td style="text-align:left">允许用户缩放的最大比例</td></tr><tr><td style="text-align:left">user-scalable</td><td style="text-align:left">是否允许用户缩放</td></tr></tbody></table><hr><p>###媒体查询-响应式开发<br>响应式设计就是一套 CSS 根据当前的分辨率选择不同的样式<br>媒体查询主要用来:</p><ul><li>检测媒体的类型, 比如 screen, tv 等</li><li>检测布局视口的特性, 比如视口的宽高分辨率等</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> all and (min-width: <span class="number">200px</span>) and (max-width: <span class="number">300px</span>)&#123;</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">//网易移动端字体设置</span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (max-width: <span class="number">321px</span>) &#123;</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:16px</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (min-width: <span class="number">321px</span>) and (max-width:<span class="number">400px</span>) &#123;</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:17px</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (min-width: <span class="number">400px</span>) &#123;</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:19px</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中, all 是媒体类型, 代表任何设备<br>and 是逻辑操作<br>意思是, 对于任何设备, 在宽度在 200-300 的范围内应用这个样式</p><hr><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><a href="http://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="noopener">CSS</a></h1><hr><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><blockquote><p>举例：&lt; <code>h1</code> id=”<code>id-h1</code>“ class=”<code>class-h1</code>“&gt; 琉璃 &lt; /h1 &gt;<br>一切标签都可被选择包括 html, style 等</p></blockquote><table><thead><tr><th style="text-align:center">元素 选择器</th><th style="text-align:center">符号</th><th style="text-align:right">优先级 从高到低</th></tr></thead><tbody><tr><td style="text-align:center">!important</td><td style="text-align:center">!</td><td style="text-align:right">h1 { color: red <code>!important</code>; }</td></tr><tr><td style="text-align:center">id</td><td style="text-align:center">#</td><td style="text-align:right"><code>#id-h1</code> { color: red; }</td></tr><tr><td style="text-align:center">class</td><td style="text-align:center">.</td><td style="text-align:right"><code>.class-h1</code> { color: red; }</td></tr><tr><td style="text-align:center">标签</td><td style="text-align:center">无</td><td style="text-align:right"><code>h1</code> { color: red; }</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">定义</th><th style="text-align:right">优先级 从高到低</th></tr></thead><tbody><tr><td style="text-align:center">!</td><td style="text-align:right">!important</td></tr><tr><td style="text-align:center">内联</td><td style="text-align:right">禁止使用 &lt; h1 <code>~~style=&quot;color: red;&quot;~~</code> &gt; Hello World &lt; /h1 &gt;</td></tr><tr><td style="text-align:center">中联</td><td style="text-align:right">&lt; style &gt; <code>h1{ color: red; }</code> &lt; /style &gt;</td></tr><tr><td style="text-align:center">外联</td><td style="text-align:right">&lt; link rel=”stylesheet” href=”<code>tag.css</code>“ &gt;</td></tr></tbody></table><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: lightblue;          <span class="comment">/* 背景色   */</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span>;                     <span class="comment">/* 外边距   */</span></span><br><span class="line">    <span class="attribute">border</span>:<span class="number">0px</span>;                     <span class="comment">/* 边框     */</span></span><br><span class="line">    <span class="attribute">border-style</span>: solid;            <span class="comment">/* 边框样式 */</span></span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0px</span>;                    <span class="comment">/* 内边距   */</span></span><br><span class="line">    <span class="attribute">font-family</span>: Microsoft YaHei;   <span class="comment">/* 字体     */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span>;                <span class="comment">/* 字体大小 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;             <span class="comment">/* 对齐     */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tanChuang</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;                   <span class="comment">/* 顶层     */</span></span><br><span class="line">    <span class="attribute">position</span>: fixed;                <span class="comment">/* 定位     */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;                       <span class="comment">/* 顶部     */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;                      <span class="comment">/* 左部     */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.96</span>;                  <span class="comment">/* 透明度   */</span></span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tanCenter</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-61.8%);  <span class="comment">/* Y轴距离  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:  <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;             <span class="comment">/* 圆角     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background</span> 相关属性和缩写</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#233</span>;</span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">bg</span><span class="selector-class">.png</span>);</span><br><span class="line">    <span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br><span class="line">    <span class="selector-tag">background-attachment</span>: <span class="selector-tag">fixed</span>; 背景图片随滚动轴移动方式</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-id">#233</span> <span class="selector-tag">url</span>(<span class="selector-tag">bg</span><span class="selector-class">.png</span>) <span class="selector-tag">no-repeat</span>;</span><br><span class="line"></span><br><span class="line">三种缩写, 分别对应有 4 2 3 个值的时候的解释, <span class="selector-tag">padding</span> 同理</span><br><span class="line"><span class="selector-tag">margin</span>: <span class="selector-tag">top</span>  <span class="selector-tag">right</span>  <span class="selector-tag">bottom</span>  <span class="selector-tag">left</span></span><br><span class="line">margin: (top/bottom)  (right/left)</span><br><span class="line">margin: top  (right/left)  bottom</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">overflow</span>属性</span><br><span class="line">    <span class="selector-tag">visible</span> 默认</span><br><span class="line">    <span class="selector-tag">auto</span> 需要的时候加滚动条</span><br><span class="line">    <span class="selector-tag">hidden</span> 隐藏多余元素</span><br><span class="line">    <span class="selector-tag">scroll</span> 就算用不着也会强制加滚动条</span><br></pre></td></tr></table></figure><blockquote><p>内联元素 居中 text-align: center<br>区块元素 居中 margin: 0px auto;</p></blockquote><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a><a href="http://www.w3school.com.cn/css/css_pseudo_classes.asp" target="_blank" rel="noopener">伪类</a></h4><table><thead><tr><th style="text-align:center">:link</th><th style="text-align:center">未访问</th><th style="text-align:center">:hover</th><th style="text-align:center">悬停</th></tr></thead><tbody><tr><td style="text-align:center"><strong>:visited</strong></td><td style="text-align:center"><strong>已访问</strong></td><td style="text-align:center"><strong>:active</strong></td><td style="text-align:center"><strong>选定</strong></td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>   &#123; <span class="attribute">color</span>: white; <span class="attribute">text-decoration</span>: none; &#125; <span class="comment">/*去下划线*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123; <span class="attribute">color</span>: black; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>  &#123; <span class="attribute">color</span>: red; <span class="attribute">cursor</span>: pointer; &#125; <span class="comment">/*鼠标样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>: lightblue; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.class</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: white;&#125;    <span class="comment">/* 独立伪类 */</span></span><br></pre></td></tr></table></figure><h4 id="定位-position"><a href="#定位-position" class="headerlink" title="定位 position"></a>定位 <a href="http://www.w3school.com.cn/cssref/pr_class_position.asp" target="_blank" rel="noopener">position</a></h4><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">static</td><td style="text-align:left">默认 <code>static</code></td></tr><tr><td style="text-align:left">relative</td><td style="text-align:left">相对定位 可相对自身偏移</td></tr><tr><td style="text-align:left">absolute</td><td style="text-align:left">完全绝对定位, 忽略其他所有东西, 往上浮动到 非 static 的元素</td></tr><tr><td style="text-align:left">fixed</td><td style="text-align:left">基于 <code>window</code> 的绝对定位, 不随页面滚动改变</td></tr></tbody></table><blockquote><p>非 static 元素可以用 top left bottom right 属性来设置坐标<br>非 static 元素可以用 z-index 属性来设置显示层次<br>e.pageX——相对整个页面的坐标<br>e.clientX——相对可视区域的坐标<br>e.offsetX——相对当前坐标系的 border 左上角开始的坐标</p></blockquote><h4 id="布局-flex"><a href="#布局-flex" class="headerlink" title="布局 flex"></a>布局 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">flex</a></h4><table><thead><tr><th style="text-align:left">容器的属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>flex-direction</code>:row</td><td style="text-align:left">属性决定主轴的方向（即项目的排列方向</td></tr><tr><td style="text-align:left">row,row-reverse</td><td style="text-align:left">主轴为水平方向，起点在左(右)端</td></tr><tr><td style="text-align:left">column,column-reverse</td><td style="text-align:left">主轴为垂直方向，起点在上(下)沿</td></tr><tr><td style="text-align:left"><code>flex-wrap</code>:nowrap</td><td style="text-align:left">定义如果一条轴线排不下如何换行,默认不换行</td></tr><tr><td style="text-align:left">wrap,wrap-reverse</td><td style="text-align:left">换行，第一行在上(下)方</td></tr><tr><td style="text-align:left"><code>flex-flow</code></td><td style="text-align:left"><code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></td></tr><tr><td style="text-align:left"><code>justify-content</code></td><td style="text-align:left">属性定义了项目在主轴上的对齐方式</td></tr><tr><td style="text-align:left">flex-start,flex-end</td><td style="text-align:left">左对齐(默认),右对齐</td></tr><tr><td style="text-align:left">center,space-between</td><td style="text-align:left">居中,两端对齐，项目之间的间隔都相等</td></tr><tr><td style="text-align:left">space-around</td><td style="text-align:left">每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</td></tr><tr><td style="text-align:left"><code>align-items</code></td><td style="text-align:left">属性定义项目在交叉轴上如何对齐</td></tr><tr><td style="text-align:left">stretch</td><td style="text-align:left">(默认值)如果项目未设置高度或设为 auto，将占满整个容器的高度</td></tr><tr><td style="text-align:left">flex-start,flex-end</td><td style="text-align:left">交叉轴的起(终)点对齐</td></tr><tr><td style="text-align:left">center,baseline</td><td style="text-align:left">交叉轴的中点对齐,项目的第一行文字的基线对齐</td></tr><tr><td style="text-align:left"><code>align-content</code></td><td style="text-align:left">定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</td></tr><tr><td style="text-align:left">flex-start,flex-end</td><td style="text-align:left">与交叉轴的起(终)点对齐</td></tr><tr><td style="text-align:left">center</td><td style="text-align:left">与交叉轴的中点对齐</td></tr><tr><td style="text-align:left">space-between</td><td style="text-align:left">与交叉轴两端对齐，轴线之间的间隔平均分布</td></tr><tr><td style="text-align:left">space-around</td><td style="text-align:left">每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</td></tr><tr><td style="text-align:left">stretch（默认值)</td><td style="text-align:left">轴线占满整个交叉轴</td></tr></tbody></table><table><thead><tr><th style="text-align:left">项目的属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>order</code>:0</td><td style="text-align:left">定义项目的排列顺序。数值越小排列越靠前，默认为 0</td></tr><tr><td style="text-align:left"><code>flex-grow</code>:0</td><td style="text-align:left">定义项目的放大比例，默认 0 即如果存在剩余空间，也不放大</td></tr><tr><td style="text-align:left"><code>flex-grow</code>:1</td><td style="text-align:left">属性都为 1，则它们将等分剩余空间（如果有的话）</td></tr><tr><td style="text-align:left"><code>flex-grow</code>:2</td><td style="text-align:left">如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍</td></tr><tr><td style="text-align:left"><code>flex-shrink</code>:1</td><td style="text-align:left">定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小</td></tr><tr><td style="text-align:left"><code>flex-shrink</code>:0</td><td style="text-align:left">如果一个项目的属性为 0，其他项目都为 1，则空间不足时，前者不缩小,负值无效</td></tr><tr><td style="text-align:left"><code>flex-basis</code>:auto</td><td style="text-align:left">定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小</td></tr><tr><td style="text-align:left"><code>flex-basis</code>:350px</td><td style="text-align:left">可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间</td></tr><tr><td style="text-align:left"><code>flex</code></td><td style="text-align:left">是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</td></tr><tr><td style="text-align:left"><code>flex</code>:auto,none</td><td style="text-align:left">默认值分别是(1 1 auto) 和 (0 0 auto)</td></tr><tr><td style="text-align:left"><code>align-self</code>:auto</td><td style="text-align:left">允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>.该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致</td></tr></tbody></table><h4 id="显示-display"><a href="#显示-display" class="headerlink" title="显示 display"></a>显示 <a href="http://www.w3school.com.cn/cssref/pr_class_display.asp" target="_blank" rel="noopener">display</a></h4><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:left">不显示</td></tr><tr><td style="text-align:left">block</td><td style="text-align:left">独占一行(默认有<code>div p ul ol li h1 h2 h3 h4 h5 h6</code>)</td></tr><tr><td style="text-align:left">inline</td><td style="text-align:left">内联元素 无法设置宽高</td></tr><tr><td style="text-align:left">inline-block</td><td style="text-align:left">内联元素 可以设置宽高</td></tr></tbody></table><h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a><a href="http://www.w3school.com.cn/css/css_boxmodel.asp" target="_blank" rel="noopener">盒模型</a></h4><table><thead><tr><th style="text-align:left">BOX</th><th style="text-align:left">单位</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">margin:</td><td style="text-align:left">0px;</td><td style="text-align:left">外边距</td></tr><tr><td style="text-align:left">border:</td><td style="text-align:left">0px;</td><td style="text-align:left">边框</td></tr><tr><td style="text-align:left">padding:</td><td style="text-align:left">0px;</td><td style="text-align:left">内边距</td></tr><tr><td style="text-align:left">width:</td><td style="text-align:left">80% or 0px;</td><td style="text-align:left">宽</td></tr><tr><td style="text-align:left">height:</td><td style="text-align:left">100% or 0px;</td><td style="text-align:left">高</td></tr></tbody></table><p>###动画</p><table><thead><tr><th style="text-align:center">动画</th><th style="text-align:right">功能</th></tr></thead><tbody><tr><td style="text-align:center">transform</td><td style="text-align:right">2D 变形</td></tr><tr><td style="text-align:center"><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="noopener">transition</a></td><td style="text-align:right">css 动画(运动时间,运动对象,运动速度,等待时间)</td></tr><tr><td style="text-align:center"><a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="noopener">animation</a></td><td style="text-align:right">多过程动画效果(具体看链接)</td></tr></tbody></table><hr><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">JavaScript</a></h1><table><thead><tr><th style="text-align:center">定义</th><th style="text-align:right">插入 &lt; /body &gt; 之前 顺序执行</th></tr></thead><tbody><tr><td style="text-align:center">中联</td><td style="text-align:right">&lt; script &gt;<code>log(&#39;Hello World!&#39;)</code>&lt; /script &gt;</td></tr><tr><td style="text-align:center">外联</td><td style="text-align:right">&lt; script src=”<code>Echo.js</code>“ charset=”utf-8”&gt;&lt; /script &gt;</td></tr></tbody></table><h4 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array 数组"></a><strong>Array</strong> <a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">数组</a></h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">秒懂释义</th><th style="text-align:left">相当于</th></tr></thead><tbody><tr><td style="text-align:left"><strong>slice( )</strong></td><td style="text-align:left">复制 切片并返回</td><td style="text-align:left">支持负索引</td></tr><tr><td style="text-align:left"><strong>splice(开始,长度,元素)</strong></td><td style="text-align:left">删除插入并返回</td><td style="text-align:left">开始的地方插入</td></tr><tr><td style="text-align:left">concat( array )</td><td style="text-align:left">连接 数组</td></tr><tr><td style="text-align:left">includes( str[ ] )</td><td style="text-align:left">检查 是否包含 str[ ] 返回 bool</td></tr><tr><td style="text-align:left">indexOf()</td><td style="text-align:left">返回元素第一次在数组中出现的位置,无返回-1</td></tr><tr><td style="text-align:left">length</td><td style="text-align:left">返回长度</td><td style="text-align:left">长度可设置以清空</td></tr><tr><td style="text-align:left">push( )</td><td style="text-align:left">末尾 添加元素</td><td style="text-align:left">push(1,2,[1,2])</td></tr><tr><td style="text-align:left">unshift( )</td><td style="text-align:left">头部 添加元素</td></tr><tr><td style="text-align:left">pop( )</td><td style="text-align:left">尾部 删除<strong>一个</strong>元素</td></tr><tr><td style="text-align:left">shift( )</td><td style="text-align:left">头部 删除<strong>一个</strong>元素</td></tr><tr><td style="text-align:left">join( str )</td><td style="text-align:left">返回 字符串 str 分隔</td></tr><tr><td style="text-align:left">reverse( )</td><td style="text-align:left">翻转 所有元素</td></tr><tr><td style="text-align:left">sort( )</td><td style="text-align:left">排序函数(需提供排序方式函数)</td></tr><tr><td style="text-align:left">map()</td><td style="text-align:left">参数是函数,返回一个新数组</td></tr><tr><td style="text-align:left">filter()</td><td style="text-align:left">参数是一个过滤函数,返回符合条件的新数组</td></tr><tr><td style="text-align:left">toString()</td><td style="text-align:left">返回数组的字符串形式</td></tr></tbody></table><h4 id="Str-字符串"><a href="#Str-字符串" class="headerlink" title="Str 字符串"></a><strong>Str</strong> <a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">字符串</a></h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>slice( )</strong></td><td style="text-align:left">返回 切片</td></tr><tr><td style="text-align:left">if( <code>==</code> )</td><td style="text-align:left">判断相等需要双等号</td></tr><tr><td style="text-align:left">includes( str )</td><td style="text-align:left">检查 是否包含 str 返回 bool</td></tr><tr><td style="text-align:left">split( str )</td><td style="text-align:left">以 str 分割字符串 返回 array</td></tr><tr><td style="text-align:left">toLowerCase()</td><td style="text-align:left">字母转小写</td></tr><tr><td style="text-align:left">toUpperCase()</td><td style="text-align:left">字母转大写</td></tr><tr><td style="text-align:left">indexOf( str )</td><td style="text-align:left">查找 是否包含 str 返回 下标</td></tr><tr><td style="text-align:left">match( str )</td><td style="text-align:left">整个匹配结果以及任何括号捕获的匹配结果的 Array,没有就返回 null</td></tr><tr><td style="text-align:left">replace( pattern, str )</td><td style="text-align:left">替换 pattern 为 str ；/pattern/g 全部替换</td></tr><tr><td style="text-align:left">search( <a href="#regexp-正则表达式">pattern</a> )</td><td style="text-align:left">查找 pattern 返回下标 否则返回 -1</td></tr></tbody></table><h4 id="Object-字典"><a href="#Object-字典" class="headerlink" title="Object 字典"></a><strong>Object</strong> 字典</h4><blockquote><p><code>dict</code> = { ‘初中生’:6, ‘高中生’:7, ‘大学生’:8 }<br>|属性|说明<br>|:-|:-|<br>| <code>dict</code> = { key : ‘value’, }|创建<br>|<code>dict.(key)</code> |点语法读取|<br>|<code>dict</code> [‘小学生’] = 4| 添加<br>|<code>dict</code> [‘小学生’] = 5| 修改<br>|delete <code>dict</code> [‘大学生’]| 删除<br>|Object.keys( <code>dict</code> )| 返回 keys</p></blockquote><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, height</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 用 this.变量名 来创造一个只有类的实例才能访问的变量</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.height = height</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用 new 函数名(参数) 初始化一个类的实例</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'gua'</span>, <span class="number">169</span>)</span><br><span class="line"><span class="comment">// 可以改变 s1 的属性</span></span><br><span class="line">s1.name = <span class="string">'xiaogua'</span></span><br><span class="line">s1.height = <span class="number">1.69</span></span><br><span class="line"><span class="comment">// 可以创建多个互相独立的实例</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="comment">//可以给类增加一些方法(函数)</span></span><br><span class="line">Student.prototype.greeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello, I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以调用实例的方法</span></span><br><span class="line">s1.greeting()</span><br><span class="line"></span><br><span class="line">ES6类的表示方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化的套路</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, height) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.height = height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法没有 var</span></span><br><span class="line">    greeting() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello, I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update(name, age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//继承类的用法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apply call bind  <span class="comment">//是用来给函数指定 this 用的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apply 接受两个参数</span><br><span class="line">第一个参数是函数里面的 <span class="keyword">this</span></span><br><span class="line">第二个参数是要传给函数的参数列表, 类型是 数组(暂定), apply 会把数组拆成一个个的参数传给函数</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>) <span class="comment">//直接用</span></span><br><span class="line"></span><br><span class="line">call 和 apply 类似, 但是小有区别, 如下</span><br><span class="line">第一个参数和 apply 一样</span><br><span class="line">第 <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ... 个参数会依次作为参数传给函数</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log.call(<span class="built_in">console</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>) <span class="comment">//直接用</span></span><br><span class="line"></span><br><span class="line">bind 函数<span class="comment">/*不直接调用*/</span>, 而是返回一个函数让你来调用</span><br><span class="line">第一个参数是用来指定函数里面的 <span class="keyword">this</span>, 和 apply call 一样</span><br><span class="line"><span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)  <span class="comment">//不直接用</span></span><br><span class="line">log()    <span class="comment">//才可调用</span></span><br></pre></td></tr></table></figure><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">let</td><td style="text-align:left">就是<code>限制作用域在 {}</code> 内的 var</td></tr><tr><td style="text-align:left">const</td><td style="text-align:left">用来声明一个<code>不可赋值的变量</code>,也是限制作用域在 {} 内的 var</td></tr><tr><td style="text-align:left">Set</td><td style="text-align:left">和 <code>Array</code> 相似的数据结构不同之处在于 <code>Set 中的元素都是不重复的</code></td></tr><tr><td style="text-align:left">Set</td><td style="text-align:left"><code>var s = new Set()</code> add 方法添加元素<code>s.add(1)</code></td></tr><tr><td style="text-align:left">Set</td><td style="text-align:left">has 方法检查元素是否在 set 中 <code>s.has(1) =&gt; true</code></td></tr><tr><td style="text-align:left">Set</td><td style="text-align:left">size 属性相当于 length <code>s.size =&gt; 2</code></td></tr><tr><td style="text-align:left">Set</td><td style="text-align:left">delete 方法删除一个元素<code>s.delete(1)</code></td></tr><tr><td style="text-align:left">Map</td><td style="text-align:left"><code>Object</code>相似 <code>var m = new Map()</code></td></tr><tr><td style="text-align:left">Map</td><td style="text-align:left">set 方法增加一个值<code>m.set(&#39;name&#39;, &#39;gua&#39;)</code></td></tr><tr><td style="text-align:left">Map</td><td style="text-align:left">get 属性得到一个值<code>m.get(&#39;name&#39;)</code></td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">叫扩展符号, 作用是把数组解开成单独的元素</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left"><code>var a1 = [1, 2, 3]</code> <code>var a2 = [...a1, 4]</code> =&gt; <code>[1, 2, 3, 4]</code></td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">也可以传参<code>var a1 = [1, 2, 3]</code> <code>log(...a1) =&gt;</code> <code>&#39;1,2,3&#39;</code></td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">语法可以实现可变长度的参数, 多余的参数会被放进 args 数组中</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left"><code>var foo = function(a, ...args) {log(a, args.length)}</code> <code>foo(1, 2, 3, 4)</code></td></tr><tr><td style="text-align:left">解包</td><td style="text-align:left"><code>var [a, b] = [1, 2]</code> <code>[a, b] = [b, a]</code></td></tr><tr><td style="text-align:left">箭头</td><td style="text-align:left"><code>(参数1, 参数2) =&gt; 语句</code> <code>function(参数1, 参数2) {return 语句}</code></td></tr></tbody></table><h4 id="Json-格式"><a href="#Json-格式" class="headerlink" title="Json 格式"></a><strong>Json</strong> 格式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">JSON</span>.stringify( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] ) <span class="comment">//编译</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="built_in">JSON</span>.parse( x )           <span class="comment">//读取</span></span><br></pre></td></tr></table></figure><h4 id="Promise-处理回调的方法"><a href="#Promise-处理回调的方法" class="headerlink" title="Promise 处理回调的方法"></a><strong>Promise</strong> 处理回调的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 fs.readFile 的操作封装成 promise，这样就可以使用 promise 的 api 了</span></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一般前端的写法</span></span><br><span class="line">    <span class="comment">// return new Promise(function(resolve, reject) &#123;&#125;)</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">        <span class="keyword">const</span> options = &#123;</span><br><span class="line">            encoding: <span class="string">'utf8'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        fs.readFile(filename, options, <span class="function"><span class="keyword">function</span>(<span class="params">error, content</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (error !== <span class="literal">null</span>) &#123;</span><br><span class="line">                reject(error)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(content)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 promise 读取文件就不用写成回调的形式了</span></span><br><span class="line"><span class="comment">// 直接按照同步的写法就好了</span></span><br><span class="line"><span class="comment">// 可以无限 then, 只要你保证上一个 then 返回了东西即可</span></span><br><span class="line"><span class="keyword">let</span> promise = readFile(<span class="string">'foo.txt'</span>)</span><br><span class="line">promise</span><br><span class="line">    .then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'debug file content'</span>, content)</span><br><span class="line">            <span class="keyword">const</span> c = content + <span class="string">' suffix1'</span></span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'debug error message'</span>, error)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">c1</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'second then'</span>, c1)</span><br><span class="line">        <span class="keyword">const</span> c = c1 + <span class="string">' suffix2'</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'third then'</span>, c)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'GUA ****** line 46'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的写法也可以写成下面这样</span></span><br><span class="line"><span class="comment">// 把 reject 的操作放在 catch 里面</span></span><br><span class="line">promise</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'debug file content'</span>, content)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'debug error message'</span>, error)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 有时候会碰到批量执行异步操作，如果直接用循环 + 调用函数的形式会比较麻烦</span></span><br><span class="line"><span class="comment">// 使用 Promise.all 就很方便了</span></span><br><span class="line"><span class="comment">// all 方法是直接挂在 Promise 类上的，而 then catch 这些方法是挂在原型上</span></span><br><span class="line"><span class="comment">// Promise.all 会把数组里面所有的 promise 对象都执行完</span></span><br><span class="line"><span class="comment">// 再往下调用</span></span><br><span class="line"><span class="built_in">Promise</span>.all(list).then(<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise.all, content'</span>, content)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="重命名文件的方法"><a href="#重命名文件的方法" class="headerlink" title="重命名文件的方法"></a>重命名文件的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = app.$(<span class="string">'videoInput'</span>).files[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="keyword">var</span> aafile = <span class="keyword">new</span> File([file], <span class="string">"aa.mp4"</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="BOM-API"><a href="#BOM-API" class="headerlink" title="BOM API"></a><strong>BOM API</strong></h2><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">location</td><td style="text-align:left">管理 URL(改变 href 属性就可以跳转页面)</td></tr><tr><td style="text-align:left">navigator</td><td style="text-align:left">对象是用来查询浏览器的信息的 例如 navigator.userAgent</td></tr><tr><td style="text-align:left">history</td><td style="text-align:left">对象是用来处理历史纪录的</td></tr><tr><td style="text-align:left">screen</td><td style="text-align:left">管理屏幕</td></tr><tr><td style="text-align:left">window</td><td style="text-align:left">管理浏览器所有的东西</td></tr><tr><td style="text-align:left">open（‘url’，‘_self/_blank’）</td><td style="text-align:left">打开一个新窗口 打开自身或另打开</td></tr><tr><td style="text-align:left">close()</td><td style="text-align:left">关闭窗口</td></tr><tr><td style="text-align:left">document.body.scrollTop</td><td style="text-align:left">滚轮离顶部距离</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">history.length <span class="comment">// 历史列表中的 url 数量</span></span><br><span class="line">history.back() <span class="comment">// 相当于点击后退按钮</span></span><br><span class="line">history.forward() <span class="comment">// 相当于点前进</span></span><br><span class="line">history.go(<span class="number">-2</span>) <span class="comment">// 相当于点击两次后退按钮</span></span><br><span class="line"><span class="comment">//H5新函数</span></span><br><span class="line"><span class="keyword">var</span> state = &#123;</span><br><span class="line">    page: <span class="string">'settings'</span>,</span><br><span class="line">&#125;</span><br><span class="line">history.pushState(state, <span class="string">'settings'</span>, <span class="string">'/settings'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三个参数分别是</span></span><br><span class="line"><span class="comment">    1.自定义对象</span></span><br><span class="line"><span class="comment">    2.新页面的标题, 但是现在还没有浏览器实现这个功能</span></span><br><span class="line"><span class="comment">    3.新页面的地址(/...)</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">用户点击 前进 后退 按钮的时候, 会触发 window 的 popstate事件</span></span><br><span class="line"><span class="comment">于是可以在这里操作*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> state = event.state</span><br><span class="line">    <span class="comment">// state 就是 pushState 的第一个参数 被储存</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'pop state'</span>, state)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*还有一个 replaceState 函数, 它的作用和 pushState 一样,   只是不生成一条历史纪录</span></span><br><span class="line"><span class="comment">只能在相同域名下使用*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a><strong>DOM API</strong></h2><ul><li>DOM 是 HTML 文件</li><li>DOM API 是浏览器提供给 JavaScript 操作 html 页面的交互方式</li></ul><h4 id="常用-1"><a href="#常用-1" class="headerlink" title="常用"></a>常用</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"id"</span> <span class="attribute">type</span>=<span class="string">"text"</span> <span class="attribute">value</span>=<span class="string">"Gua"</span>&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性 <a href="#选择器">（元素 .class #id）</a></th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">var <code>omg</code> = document.querySelector( <code>&#39;#id&#39;</code> )</td><td style="text-align:center">获取 DOM 对象</td><td></td></tr><tr><td style="text-align:left">var <code>omgs</code> = document.querySelectorAll(<code>&#39;.classname&#39;</code>)</td><td style="text-align:center">获取 DOM 对象组</td></tr><tr><td style="text-align:left">var <code>omgValue</code> = <code>omg</code>.getAttribute( <code>&#39;value&#39;</code> )</td><td style="text-align:center">获取 属性值</td></tr><tr><td style="text-align:left"><code>omg</code>.setAttribute( <code>&#39;value&#39;</code> , <code>&#39;Gua&#39;</code> )</td><td style="text-align:center">修改 属性值</td></tr><tr><td style="text-align:left"><code>omg</code>.hasAttribute( <code>&#39;value&#39;</code> )</td><td style="text-align:center">查询 是否存在</td></tr><tr><td style="text-align:left"><code>omg</code>.removeAttribute( <code>&#39;type&#39;</code> )</td><td style="text-align:center">删除 某个属性</td></tr><tr><td style="text-align:left">var <code>allProperty</code> = <code>omg</code>.attributes</td><td style="text-align:center">查找 所有属性</td></tr><tr><td style="text-align:left"><code>omg</code>.remove( )</td><td style="text-align:center">整个删除 元素</td></tr><tr><td style="text-align:left"><code>omg</code>.dataset.()</td><td style="text-align:center">获取 data-()值</td></tr><tr><td style="text-align:left">var button = document.<strong>createElement</strong>(‘button’)</td><td style="text-align:center">创建 元素</td></tr><tr><td style="text-align:left">button.<strong>innerHTML</strong> = ‘注册用户’</td><td style="text-align:center">设置属性</td></tr><tr><td style="text-align:left"><code>omg</code>.<strong>appendChild</strong>(button)</td><td style="text-align:center">给一个元素添加子元素</td></tr><tr><td style="text-align:left"><code>omg</code>.<strong>insertAdjacentHTML</strong>( <code>&#39;beforeend&#39;</code>, <code>html</code> )</td><td style="text-align:center">插入 HTML</td></tr></tbody></table><table><thead><tr><th style="text-align:left">insertAdjacentHTML</th><th style="text-align:left">标签 描述</th></tr></thead><tbody><tr><td style="text-align:left">beforebegin</td><td style="text-align:left">开始标记 前</td></tr><tr><td style="text-align:left">afterbegin</td><td style="text-align:left">开始标记 后</td></tr><tr><td style="text-align:left">beforeend</td><td style="text-align:left">结束标记 前</td></tr><tr><td style="text-align:left">afterend</td><td style="text-align:left">结束标记 后</td></tr></tbody></table><p>####本地存储</p><blockquote><p>贮藏：localStorage[ <code>&#39;name&#39;</code> ] = ‘馒头’<br>取出：localStorage[ <code>&#39;name&#39;</code> ]<br>电脑本地储存 5MB Object,只能存字符串，可使用 Json 转字符串<br>localStorage 没有过期时间, 要用 clear remove 主动删除数据</p></blockquote><hr><blockquote><p>贮藏：sessionStorage[ <code>&#39;name&#39;</code> ] = ‘馒头’<br>取出：sessionStorage[ <code>&#39;name&#39;</code> ]<br>sessionStorage 的数据在用户关闭浏览器后将被删除</p></blockquote><hr><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a><strong>事件</strong></h3><blockquote><p>事件绑定：<br>区分元素 &gt; 绑定元素 &gt; 触发 Event &gt; 操作元素</p></blockquote><table><thead><tr><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table><p>|var <code>button</code> = document.querySelector( <code>&quot;#id-div-cont&quot;</code> )<br>|// 获取 元素|<br>|<code>button</code>.addEventListener( <code>&#39;click&#39;</code>, callback)|<br>|// 事件 绑定 或 委托 |</p><table><thead><tr><th style="text-align:left"><a href="http://www.w3school.com.cn/jsref/jsref_events.asp" target="_blank" rel="noopener">常用事件</a></th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">‘focus’</td><td style="text-align:center">获得 焦点</td></tr><tr><td style="text-align:left">‘blur’</td><td style="text-align:center">失去 焦点</td></tr><tr><td style="text-align:left">‘click’</td><td style="text-align:center">单击</td></tr><tr><td style="text-align:left">‘dblclick’</td><td style="text-align:center">双击</td></tr><tr><td style="text-align:left">‘mousedown’</td><td style="text-align:center">鼠标点下</td></tr><tr><td style="text-align:left">‘mousemove’</td><td style="text-align:center">鼠标移动</td></tr><tr><td style="text-align:left">‘mouseup’</td><td style="text-align:center">鼠标抬起</td></tr><tr><td style="text-align:left">‘mouseover’</td><td style="text-align:center">鼠标悬停</td></tr><tr><td style="text-align:left">‘mouseout’</td><td style="text-align:center">鼠标移开</td></tr><tr><td style="text-align:left">‘keydown’</td><td style="text-align:center">按下 某键</td></tr><tr><td style="text-align:left">‘ended’</td><td style="text-align:center">播放结束</td></tr><tr><td style="text-align:left">submit</td><td style="text-align:center">当<code>&lt;form&gt;</code>提交时触发</td></tr><tr><td style="text-align:left">change</td><td style="text-align:center">当<code>&lt;input&gt;&lt;select&gt;&lt;textarea&gt;</code>的内容改变时触发</td></tr><tr><td style="text-align:left">‘animationend’</td><td style="text-align:center">动画结束之后</td></tr><tr><td style="text-align:left">onload</td><td style="text-align:center">事件页面加载时发生</td></tr><tr><td style="text-align:left">onscroll</td><td style="text-align:center">页面滚动时发生</td></tr><tr><td style="text-align:left">onresize</td><td style="text-align:center">页面改变大小时发生</td></tr></tbody></table><table><thead><tr><th style="text-align:left">事件 event 参数</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td style="text-align:left">event.target.parentElement</td><td style="text-align:right">父元素</td></tr><tr><td style="text-align:left">event.target</td><td style="text-align:right">元素</td></tr><tr><td style="text-align:left">event.target.children</td><td style="text-align:right">子元素</td></tr><tr><td style="text-align:left"><strong>event.target.parentElement.children</strong></td><td style="text-align:right">父子元素</td></tr></tbody></table><hr><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a><strong>Ajax</strong></h2><ul><li>阿贾克斯中 <strong>event</strong> 事件本身，包含触发事件所有内容</li></ul><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a><strong>GET</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajaxGet = <span class="function"><span class="keyword">function</span>(<span class="params">ku</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="keyword">new</span> XMLHttpRequest() <span class="comment">// 创建 AJAX 对象</span></span><br><span class="line">    r.open(<span class="string">'GET'</span>, ku.url, <span class="literal">true</span>) <span class="comment">// 设置 请求方法 地址</span></span><br><span class="line">    r.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 完成</span></span><br><span class="line">            ku.callback(r.response) <span class="comment">// 注册 响应函数 结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r.send() <span class="comment">// 发送 请求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// readyState有4种状态  0. 未初始化 1.载入  2.载入完成  3.交互  4.交互完成</span></span><br><span class="line"><span class="keyword">var</span> ku = &#123;</span><br><span class="line">    url: <span class="string">'/login'</span>, <span class="comment">// 地址</span></span><br><span class="line">    callback: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 响应函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">ajaxGet(ku)</span><br></pre></td></tr></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a><strong>POST</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"> ku </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="keyword">new</span> XMLHttpRequest( )      <span class="comment">// 创建 AJAX 对象</span></span><br><span class="line">    r.open( ku.method, ku.url, <span class="literal">true</span> )  <span class="comment">// 设置 请求方法 地址</span></span><br><span class="line">    r.setRequestHeader(<span class="string">'Content-Type'</span>, ku.ContentType)</span><br><span class="line">    r.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r.readyState === <span class="number">4</span>) &#123;      <span class="comment">// 完成</span></span><br><span class="line">            ku.callback(r.response)    <span class="comment">// 注册 响应函数 结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r.send( ku.data )                  <span class="comment">// 发送 请求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ku = &#123;</span><br><span class="line">    method:         <span class="string">'POST'</span>,            <span class="comment">// 请求方法</span></span><br><span class="line">    url:            <span class="string">'/login'</span>,          <span class="comment">// 地址</span></span><br><span class="line">    ContentType:    <span class="string">'application/json'</span>,<span class="comment">// 数据格式</span></span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(&#123;             <span class="comment">// 发送内容</span></span><br><span class="line">        username:   <span class="string">'abc'</span>,</span><br><span class="line">        password:   <span class="string">'123'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    callback: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;     <span class="comment">// 响应函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'result:'</span>, response )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ajax( ku )</span><br></pre></td></tr></table></figure><h2 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a><strong>http 协议</strong></h2><blockquote><p>请求和返回是一样的数据格式，分为 4 部分：<br>1，请求行或者响应行<br>2，HTTP Header（请求的 Header 中 Host 字段是必须的，其他都是可选）<br>3，\r\n\r\n（连续两个换行回车符，用来分隔 Header 和 Body）<br>4，HTTP Body（可选）</p><p>请求的格式，注意大小写（这是一个不包含 Body 的请求）：<br>原始数据如下<br>‘GET / HTTP/1.1\r\nhost:g.cn\r\n\r\n’<br>打印出来如下<br>GET / HTTP/1.1<br>Host: g.cn<br>r\n(空一行)</p></blockquote><hr><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a><strong>jQuery</strong></h1><h4 id="常用-2"><a href="#常用-2" class="headerlink" title="常用"></a>常用</h4><table><thead><tr><th style="text-align:left">选择器</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">\$( <code>&#39;.class&#39;</code> )</td><td style="text-align:left">匹配所有 符合<a href="#选择器">元素</a> 返回 数组</td></tr><tr><td style="text-align:left">\$( <code>&#39; #id, .class ,div &#39;</code>)</td><td style="text-align:left">组选择</td></tr><tr><td style="text-align:left">.find( <code>&#39;#id&#39;</code> )</td><td style="text-align:left">向下查找子元素</td></tr><tr><td style="text-align:left">.closest( <code>&#39;.class&#39;</code> )</td><td style="text-align:left">查找 父元素（一直向上 找到为止）</td></tr><tr><td style="text-align:left">.parent()</td><td style="text-align:left">查找 父元素</td></tr><tr><td style="text-align:left">.next()</td><td style="text-align:left">下一个元素</td></tr><tr><td style="text-align:left">.prev()</td><td style="text-align:left">上一个元素</td></tr><tr><td style="text-align:left">.children()</td><td style="text-align:left">查找 子元素</td></tr><tr><td style="text-align:left">.parent().children()</td><td style="text-align:left">查找 父子元素</td></tr><tr><td style="text-align:left">.siblings()</td><td style="text-align:left">查找 父子元素（除过 自己）</td></tr><tr><td style="text-align:left">.first()</td><td style="text-align:left">第一个元素</td></tr><tr><td style="text-align:left">.last()</td><td style="text-align:left">最后一个元素</td></tr><tr><td style="text-align:left">.slice( , )</td><td style="text-align:left">同数组 slice()方法一致</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'ul.lang li'</span>) <span class="comment">// 选出JavaScript、Python和Lua 3个节点</span></span><br><span class="line">$(<span class="string">'ul.lang li:first-child'</span>) <span class="comment">// 仅选出JavaScript</span></span><br><span class="line">$(<span class="string">'ul.lang li:last-child'</span>) <span class="comment">// 仅选出Lua</span></span><br><span class="line">$(<span class="string">'ul.lang li:nth-child(2)'</span>) <span class="comment">// 选出第N个元素，N从1开始</span></span><br><span class="line">$(<span class="string">'ul.lang li:nth-child(even)'</span>) <span class="comment">// 选出序号为偶数的元素</span></span><br><span class="line">$(<span class="string">'ul.lang li:nth-child(odd)'</span>) <span class="comment">// 选出序号为奇数的元素</span></span><br></pre></td></tr></table></figure><h4 id="jQuery-对象-DOM-操作"><a href="#jQuery-对象-DOM-操作" class="headerlink" title="jQuery 对象 DOM 操作"></a><strong>jQuery 对象 DOM 操作</strong></h4><table><thead><tr><th style="text-align:left">dom 操作修改</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">.text( )</td><td style="text-align:left">取值文本（有参数则为赋值）</td></tr><tr><td style="text-align:left">.html( )</td><td style="text-align:left">取值字符串（有参数则为赋值)</td></tr><tr><td style="text-align:left">.show()</td><td style="text-align:left">显示</td></tr><tr><td style="text-align:left">.hide()</td><td style="text-align:left">隐藏</td></tr><tr><td style="text-align:left">.toggle()</td><td style="text-align:left">开关</td></tr><tr><td style="text-align:left">.hasClass( )</td><td style="text-align:left">查询 class 返回 ture 或 false</td></tr><tr><td style="text-align:left">.addClass(‘className’)</td><td style="text-align:left">添加 class</td></tr><tr><td style="text-align:left">.removeClass( )</td><td style="text-align:left">删除 class</td></tr><tr><td style="text-align:left">.removeClass( )</td><td style="text-align:left">删除 class</td></tr><tr><td style="text-align:left">.data( )</td><td style="text-align:left">获取 data 属性</td></tr><tr><td style="text-align:left">.width()//.height()</td><td style="text-align:left">查询宽高,填写参数是设置宽高</td></tr><tr><td style="text-align:left">.attr( , )</td><td style="text-align:left">第一个参数属性名,查询(有第二个参数赋值)</td></tr><tr><td style="text-align:left">.removeAttr( )</td><td style="text-align:left">填入参数移除属性</td></tr><tr><td style="text-align:left">.prop()</td><td style="text-align:left">与 attr 类似,但是处理 checked 等 bool 属性</td></tr><tr><td style="text-align:left">.val()</td><td style="text-align:left">表单元素专属获取和设置(填参数)对应的 value 属性</td></tr><tr><td style="text-align:left">.append( )</td><td style="text-align:left">最末尾</td></tr><tr><td style="text-align:left">.prepend( )</td><td style="text-align:left">最开头</td></tr><tr><td style="text-align:left">.before( )</td><td style="text-align:left">同级节点 之前</td></tr><tr><td style="text-align:left">.after( )</td><td style="text-align:left">同级节点 之后</td></tr><tr><td style="text-align:left">.remove()</td><td style="text-align:left">删除</td></tr><tr><td style="text-align:left">.empty()</td><td style="text-align:left">删除（除过 自己)</td></tr></tbody></table><p>####<strong>jQuery 对象 css 操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery对象有“批量操作”的特点可调用css对象方便修改对象的CSS</span></span><br><span class="line">$(<span class="string">'#test'</span>)</span><br><span class="line">    .css(<span class="string">'background-color'</span>, <span class="string">'black'</span>)</span><br><span class="line">    .css(<span class="string">'color'</span>, <span class="string">'red'</span>)</span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-div'</span>)</span><br><span class="line">div.css(<span class="string">'color'</span>) <span class="comment">// '#000033', 获取CSS属性</span></span><br><span class="line">div.css(<span class="string">'color'</span>, <span class="string">'#336699'</span>) <span class="comment">// 设置CSS属性</span></span><br><span class="line">div.css(<span class="string">'color'</span>, <span class="string">''</span>) <span class="comment">// 清除CSS属性</span></span><br><span class="line"><span class="comment">//css()方法将作用于DOM节点的style属性，具有最高优先级</span></span><br></pre></td></tr></table></figure><h4 id="jQ-动画"><a href="#jQ-动画" class="headerlink" title="jQ 动画"></a><strong>jQ</strong> 动画</h4><table><thead><tr><th style="text-align:left">动画操作</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">.show(‘slow’)</td><td style="text-align:left">显示(参数时间 1000 或者时间描述)</td></tr><tr><td style="text-align:left">.hide(3000)</td><td style="text-align:left">同上</td></tr><tr><td style="text-align:left">.toggle()</td><td style="text-align:left">开关</td></tr><tr><td style="text-align:left">.slideUp()</td><td style="text-align:left">窗帘效果的关(参数同上)</td></tr><tr><td style="text-align:left">.slideDown()</td><td style="text-align:left">….开</td></tr><tr><td style="text-align:left">.slideToggle()</td><td style="text-align:left">开关</td></tr><tr><td style="text-align:left">.fadeOut()</td><td style="text-align:left">淡入(参数同上)</td></tr><tr><td style="text-align:left">.fadeIn()</td><td style="text-align:left">淡出</td></tr><tr><td style="text-align:left">.fadeToggle()</td><td style="text-align:left">淡入淡出</td></tr><tr><td style="text-align:left">.animate({opacity: 0.25,width: ‘256px’},3000,callback)</td><td style="text-align:left">自定义动画,三个参数,1 变化对象,2 时间,3 动画结束回调函数</td></tr><tr><td style="text-align:left">.delay(1000)</td><td style="text-align:left">暂停动画</td></tr><tr><td style="text-align:left">.data(‘id’)</td><td style="text-align:left"><code>&lt;div data-id=&#39;101&#39;&gt;</code>取 data 值</td></tr></tbody></table><h4 id="jQ-事件绑定"><a href="#jQ-事件绑定" class="headerlink" title="jQ 事件绑定"></a><strong>jQ</strong> 事件绑定</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.click(hello); <span class="comment">// 绑定事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10秒钟后解除绑定:</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    a.off(<span class="string">'click'</span>, hello);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line">使用off(<span class="string">'click'</span>)一次性移除已绑定的click事件的所有处理函数</span><br><span class="line">无参数调用off()一次性移除已绑定的所有类型的事件处理函数</span><br><span class="line"></span><br><span class="line">a.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 两者等价(常用下一种)</span></span><br><span class="line">a.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//事件委托用法</span></span><br><span class="line">$( <span class="string">'#id-div-cont'</span> ).on( <span class="string">'click'</span>, <span class="string">'.del'</span>, Event )</span><br><span class="line"><span class="comment">// 绑定 父元素 #id-div-cont 监听.del(如果点击的是.del则发生)</span></span><br></pre></td></tr></table></figure><h4 id="jQ-函数"><a href="#jQ-函数" class="headerlink" title="jQ 函数"></a><strong>jQ</strong> 函数</h4><p><strong>each</strong> 遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eve = <span class="function"><span class="keyword">function</span>(<span class="params">i, eve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, eve)</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.notePad_one'</span>).each( eve )</span><br></pre></td></tr></table></figure><p><strong>map</strong> 遍历 返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> eve = <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i * i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = $.map( a, eve )</span><br><span class="line"><span class="comment">// 结果 b = [1, 4, 9, 16, 25]</span></span><br><span class="line"><span class="comment">//map与each最大区别是返回值</span></span><br></pre></td></tr></table></figure><p><strong>filter</strong> 过滤器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> eve = <span class="function"><span class="keyword">function</span>(<span class="params"> i </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = $.grep( a, eve )</span><br><span class="line"><span class="comment">// 结果 b = [1, 3, 5]</span></span><br></pre></td></tr></table></figure><h4 id="jQ-Ajax"><a href="#jQ-Ajax" class="headerlink" title="jQ Ajax"></a><strong>jQ</strong> Ajax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = &#123;</span><br><span class="line">    url: <span class="string">'/uploads/tags.json'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(r)</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$.ajax(request)</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础的jq ajax方法</span></span><br><span class="line">$.ajax(&#123;<span class="attr">name</span>:value, <span class="attr">name</span>:value, ... &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jq get方法</span></span><br><span class="line">$.get(<span class="string">"test.php"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//jq post 方法</span></span><br><span class="line">$.post(URL,&#123;<span class="attr">name</span>:<span class="string">'小明'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>),<span class="title">dataType</span>)</span></span><br></pre></td></tr></table></figure><h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a><strong>Bootstrap</strong></h1><blockquote><p>Bootstrap 设置响应式的 CSS 布局</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置bootstrap需要加入以下设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">' jQuery'</span>&gt;</span><span class="undefined">` bootstrap 必须引用 jq</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局-col"><a href="#布局-col" class="headerlink" title="布局 col"></a><strong>布局 col</strong></h4><blockquote><p>col-(xs,sm,md,lg)每一个 div 可以加入多个 col-?类 叫做混合布局,会根据屏幕自适应布局.<br>每一横行都是新的 12 格,如果父元素 8 格,子元素还是新的 12 格</p></blockquote><table><thead><tr><th style="text-align:left">ClassName</th><th style="text-align:left">类效果</th></tr></thead><tbody><tr><td style="text-align:left">col-(xs,sm,md,lg)-(0-12)</td><td style="text-align:left">布局:一个屏幕分成 12 栏网格效果</td></tr><tr><td style="text-align:left">row</td><td style="text-align:left">设置新的一排的布局</td></tr><tr><td style="text-align:left">container</td><td style="text-align:left">内容居中</td></tr><tr><td style="text-align:left">page-header</td><td style="text-align:left">标题下面加一条灰色的线</td></tr><tr><td style="text-align:left">col-(xs,sm,md,lg)-push-(0-12)</td><td style="text-align:left">在 col-?尺寸上把主体内容向右推?个网格宽度</td></tr><tr><td style="text-align:left">col-(xs,sm,md,lg)-pull-(0-12)</td><td style="text-align:left">在 col-?尺寸上把主体内容向左拉?个网格宽度</td></tr><tr><td style="text-align:left">clearfix</td><td style="text-align:left">修复元素浮动的问题</td></tr><tr><td style="text-align:left">col-(xs,sm,md,lg)-offset-(0-12)</td><td style="text-align:left">在 col-?尺寸把主体内容向右偏移?个网格宽度</td></tr><tr><td style="text-align:left">visible-(xs,sm,md,lg)</td><td style="text-align:left">在特定尺寸上显示内容</td></tr><tr><td style="text-align:left">hidden-(xs,sm,md,lg)</td><td style="text-align:left">在特定尺寸上隐藏内容</td></tr><tr><td style="text-align:left">pull-right(left)</td><td style="text-align:left">靠右显示与靠左显示</td></tr></tbody></table><hr><h4 id="导航栏-navbar"><a href="#导航栏-navbar" class="headerlink" title="导航栏 navbar"></a><strong>导航栏 navbar</strong></h4><table><thead><tr><th style="text-align:left">ClassName</th><th style="text-align:left">类效果</th></tr></thead><tbody><tr><td style="text-align:left">navbar</td><td style="text-align:left">灰色边框的条</td></tr><tr><td style="text-align:left">navbar-light(dark)</td><td style="text-align:left">亮色背景与暗色背景</td></tr><tr><td style="text-align:left">navbar-default</td><td style="text-align:left">条是灰色背景</td></tr><tr><td style="text-align:left">navbar-inverse</td><td style="text-align:left">条是暗色背景</td></tr><tr><td style="text-align:left">navbar-fixed-top(bottom)</td><td style="text-align:left">导航栏固定在页面顶部(不滚动)</td></tr><tr><td style="text-align:left">navbar-static-top(bottom)</td><td style="text-align:left">导航栏固定在页面顶部(随页面滚动)</td></tr><tr><td style="text-align:left">navbar-brand</td><td style="text-align:left">给标签添加样式</td></tr><tr><td style="text-align:left">nav navbar-nav</td><td style="text-align:left">给 ul 添加样式</td></tr><tr><td style="text-align:left">nav-item</td><td style="text-align:left">表示这是导航栏里的一个项目</td></tr><tr><td style="text-align:left">active</td><td style="text-align:left">添加灰色的背景</td></tr><tr><td style="text-align:left">glyphicon</td><td style="text-align:left">使用小图标(用 span 标签使用)</td></tr><tr><td style="text-align:left">glyphicon glyphicon-search</td><td style="text-align:left">搜索小图标</td></tr><tr><td style="text-align:left">form-control</td><td style="text-align:left">input 添加样式</td></tr><tr><td style="text-align:left">navbar-from</td><td style="text-align:left">form 样式</td></tr><tr><td style="text-align:left">navbar-left</td><td style="text-align:left">向左浮动</td></tr><tr><td style="text-align:left">btn</td><td style="text-align:left">按钮基本样式</td></tr><tr><td style="text-align:left">btn-primary</td><td style="text-align:left">按钮的一个样式</td></tr><tr><td style="text-align:left">btn-sm</td><td style="text-align:left">按钮大小</td></tr><tr><td style="text-align:left">navbar-btn</td><td style="text-align:left">按钮边距</td></tr><tr><td style="text-align:left">navbar-left(right)</td><td style="text-align:left">元素靠左(靠右)</td></tr><tr><td style="text-align:left">collapse navbar-collaps</td><td style="text-align:left">响应式导航栏类(div 包围要折叠的导航界面)</td></tr><tr><td style="text-align:left">navbar-toggle</td><td style="text-align:left">切换显示隐藏的界面按钮类</td></tr><tr><td style="text-align:left"><code>data-toggle=&#39;collapse&#39;</code> <code>data-target=&#39;#(div包围元素的id)&#39;</code></td><td style="text-align:left">切换按钮指定 2 个 data 属性</td></tr><tr><td style="text-align:left">navbar-header</td><td style="text-align:left">隐藏后显示的界面类</td></tr></tbody></table><hr><h4 id="对话框-modal"><a href="#对话框-modal" class="headerlink" title="对话框 modal"></a><strong>对话框 modal</strong></h4><table><thead><tr><th style="text-align:left">ClassName</th><th style="text-align:left">类效果</th></tr></thead><tbody><tr><td style="text-align:left">modal-backdrop in</td><td style="text-align:left">添加一层暗色半透明的背景</td></tr><tr><td style="text-align:left"><code>data-toggle=&#39;modal&#39;</code> <code>data-target=&#39;#(对话框id)&#39;</code></td><td style="text-align:left">给一个按钮绑定开关 id 对话框功能</td></tr><tr><td style="text-align:left">modal fade</td><td style="text-align:left">过渡的效果</td></tr><tr><td style="text-align:left">data-dismiss=’modal’</td><td style="text-align:left">设置关闭对话框功能</td></tr><tr><td style="text-align:left">tabindex=’-1’</td><td style="text-align:left">点击 tab 键优先跳转这个位置</td></tr><tr><td style="text-align:left">data-backdrop=’false’</td><td style="text-align:left">关闭自动暗色背景功能</td></tr><tr><td style="text-align:left">‘show.bs.modal’</td><td style="text-align:left">事件名,对话框显示时发生</td></tr><tr><td style="text-align:left">‘hide.bs.moda’</td><td style="text-align:left">事件名,对话框隐藏时发生</td></tr></tbody></table><hr><h4 id="旋转木马-carousel"><a href="#旋转木马-carousel" class="headerlink" title="旋转木马 carousel"></a><strong>旋转木马 carousel</strong></h4><table><thead><tr><th style="text-align:left">ClassName</th><th style="text-align:left">类效果</th></tr></thead><tbody><tr><td style="text-align:left">carousel</td><td style="text-align:left">旋转木马组件大类</td></tr><tr><td style="text-align:left"><code>data-ride=&#39;carousel&#39;</code> <code>data-interval=&#39;?000&#39;</code></td><td style="text-align:left">自动播放与?s 一次</td></tr><tr><td style="text-align:left">data-pause=’false’</td><td style="text-align:left">默认值 hover 鼠标悬浮暂停播放</td></tr><tr><td style="text-align:left">data-wrap=’false’</td><td style="text-align:left">默认为 true 播放结束循环播放</td></tr><tr><td style="text-align:left">slide</td><td style="text-align:left">过度效果</td></tr><tr><td style="text-align:left">carousel-inner</td><td style="text-align:left">放置旋转东西的小类</td></tr><tr><td style="text-align:left">item</td><td style="text-align:left">每一个幻灯片项目都放到一组带 item 类的容器里</td></tr><tr><td style="text-align:left">item active</td><td style="text-align:left">幻灯片开始播放的那个项目的上添加</td></tr><tr><td style="text-align:left"><code>&lt;a href=&#39;#(carousel)的id&#39;...</code></td><td style="text-align:left">为幻灯片添加下一张功能</td></tr><tr><td style="text-align:left">left(right) carousel-control</td><td style="text-align:left">为 a 标签添加向左(右)转换功能的类</td></tr><tr><td style="text-align:left">data-slide=’prev(next)’</td><td style="text-align:left">为 a 标签添加向左(右)转换功能的设置</td></tr><tr><td style="text-align:left"><code>glyphicon</code> <code>glyphicon-chevron-left(right)</code></td><td style="text-align:left">左右的小图标</td></tr><tr><td style="text-align:left"><code>&lt;ol class=&#39;carousel-indicators&#39;</code></td><td style="text-align:left">添加幻灯片对应小圆点</td></tr><tr><td style="text-align:left"><code>&lt;li data-target=&#39;#(id)&#39; data-slide-to=&#39;(0)&#39;</code></td><td style="text-align:left">0 对应第一个项目</td></tr><tr><td style="text-align:left">active</td><td style="text-align:left">默认从添加这个类的项目开始旋转</td></tr><tr><td style="text-align:left">‘slide.bs.carousel’</td><td style="text-align:left">事件,播放时触发</td></tr><tr><td style="text-align:left">‘slid.bs.carousel’</td><td style="text-align:left">事件,播放完成触发</td></tr></tbody></table><h1 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a><strong>lodash</strong></h1><blockquote><p>lodash 是一个非常实用的 js 工具库 _是表达符号</p></blockquote><h3 id="lodash-函数"><a href="#lodash-函数" class="headerlink" title="lodash 函数"></a><strong>lodash</strong> 函数</h3><p><strong>each</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_.each(list(数组或对象), (v, k) =&gt; &#123;</span><br><span class="line">    <span class="comment">// each 方法的两个参数</span></span><br><span class="line">    <span class="comment">// 如果 list 是 列表，那么 v 和 k 分别是指 list 的 element/index</span></span><br><span class="line">    <span class="comment">// 如果 list 是 对象（字典），那么 v 和 k 分别是指 object 的 value/key</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'element and index'</span>, v, k)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>map</strong> (旧数组/对象生成一个新数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list2(新数组) = _.map(list1(旧数组), (v, k) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> r = v * v</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list2'</span>, list2)</span><br></pre></td></tr></table></figure><p><strong>filter</strong> (遍历数组/对象，返回符合判断函数中的元素)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u(符合条件的新数组) =</span><br><span class="line">_.filter(us(数组可包含对象), (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> b = e.score &gt; <span class="number">70</span>(bool值)</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'filter u'</span>, u)</span><br></pre></td></tr></table></figure><p><strong>orderBy</strong> (按照条件排序,先按 score 升序,如果有 score 一样的,再按 name 降序)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = _.orderBy(us, [<span class="string">'score'</span>, <span class="string">'name'</span>], [<span class="string">'asc'</span>(升序), <span class="string">'desc'</span>(降序)])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'order by users'</span>, users)</span><br></pre></td></tr></table></figure><p><strong>flatten</strong> (减少一层嵌套数组(只减少一层),也就是可以将二维数组拍成一维数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l = [<span class="number">1</span>, [<span class="number">2</span>], [<span class="number">3</span>, [<span class="number">4</span>]], [<span class="number">5</span>, [<span class="number">6</span>], [<span class="number">7</span>]]]</span><br><span class="line"><span class="keyword">var</span> f = _.flatten(l)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'flatten result'</span>, f)</span><br></pre></td></tr></table></figure><p><strong>compact</strong> 剔除数组中的假值元素(js 中假值元素分别为<code>false null 0 NaN &#39;&#39; undefined</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = _.compact(l(包含假值元素的数组))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'compact result'</span>, result) ** (isEqual ** isEqual比较两个对象或者数组是否相等)</span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    key: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">    key: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = _.isEqual(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'isEqual result'</span>, result)</span><br></pre></td></tr></table></figure><p><strong>result</strong> (获取嵌套对象的值)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    k1: &#123;</span><br><span class="line">        k2: &#123;</span><br><span class="line">            k3: &#123;</span><br><span class="line">                k4: <span class="string">'value in nested dict'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="string">'k1.k2.k3.k4'</span></span><br><span class="line"><span class="keyword">var</span> result = _.result(o, path)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result nested result'</span>, result)</span><br></pre></td></tr></table></figure><p><strong>cloneDeep</strong> 深拷贝(改变赋值不影响原函数的拷贝)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: [<span class="number">1</span>],</span><br><span class="line">    b: [<span class="number">2</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> deep = _.cloneDeep(o)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'deep'</span>, deep)</span><br></pre></td></tr></table></figure><p><strong>random</strong> (返回给定范围的随机值)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>      <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">    <span class="comment">// 返回 a 和 b 之间的一个整数</span></span><br><span class="line">    <span class="keyword">var</span> r1 = _.random(a, b)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'random r1'</span>, r1)</span><br><span class="line"><span class="comment">//如果指定第三个参数为 true，这个参数的意思是指 floating ,那么返回的就是一个浮点数</span></span><br><span class="line">    <span class="keyword">var</span> r2 = _.random(a, b, <span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'random r2'</span>, r2(浮点数))</span><br></pre></td></tr></table></figure><p><strong>shuffle</strong> (返回打乱顺序后的数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> s = _.shuffle(l)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'shuffle l'</span>, s)</span><br></pre></td></tr></table></figure><hr><h1 id="vue-js"><a href="#vue-js" class="headerlink" title="vue.js"></a>vue.js</h1><hr><blockquote><p>注意事项 1.确保在初始化根实例之前注册了组件</p></blockquote><ol><li>内部使用 vue 属性需要使用 this 3.要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法 4.在数据变化之后立即使用 Vue.nextTick(callback) == this.$nextTick(callback)</li></ol><hr><table><thead><tr><th style="text-align:center">Vue 属性</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">el</td><td style="text-align:center">绑定的 id</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">储存的一些属性</td></tr><tr><td style="text-align:center">methods</td><td style="text-align:center">储存的一些方法(函数)</td></tr><tr><td style="text-align:center">filters</td><td style="text-align:center">储存一些过滤函数</td></tr><tr><td style="text-align:center">computed</td><td style="text-align:center">储存一些计算属性函数(存在缓存,一般情况可以用 methods 替代)</td></tr><tr><td style="text-align:center">watch</td><td style="text-align:center">数据改变时触发,允许我们执行异步操作</td></tr><tr><td style="text-align:center">components</td><td style="text-align:center">局部注册组件属性</td></tr><tr><td style="text-align:center">props</td><td style="text-align:center">子组件要显式地用 props 选项声明它期待获得的数据</td></tr><tr><td style="text-align:center">template</td><td style="text-align:center">组件模板</td></tr><tr><td style="text-align:center">data(组件)</td><td style="text-align:center">组件 data 必须是函数 return 出的对象</td></tr><tr><td style="text-align:center">Vue.set(object, key, value)</td><td style="text-align:center">将响应属性添加到嵌套的对象上</td></tr><tr><td style="text-align:center">directives</td><td style="text-align:center">注册局部指令</td></tr><tr><td style="text-align:center">beforeCreate</td><td style="text-align:center">在实例初始化之后数据观测之前被调用</td></tr><tr><td style="text-align:center">created</td><td style="text-align:center">实例被创建之后被调用</td></tr><tr><td style="text-align:center">beforeMount</td><td style="text-align:center">在挂载开始之前被调用：相关的 render 函数首次被调用</td></tr><tr><td style="text-align:center">mounted</td><td style="text-align:center">el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td></tr><tr><td style="text-align:center">beforeUpdate</td><td style="text-align:center">数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前</td></tr><tr><td style="text-align:center">updated</td><td style="text-align:center">由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子</td></tr><tr><td style="text-align:center">activated</td><td style="text-align:center">keep-alive 组件激活时调用</td></tr><tr><td style="text-align:center">deactivated</td><td style="text-align:center">keep-alive 组件停用时调用</td></tr><tr><td style="text-align:center">beforeDestroy</td><td style="text-align:center">实例销毁之前调用。在这一步，实例仍然完全可用</td></tr><tr><td style="text-align:center">destroyed</td><td style="text-align:center">Vue 实例销毁后调用</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$on(<span class="string">'事件名字'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听自定义事件 第一个事件名字 第二个参数触发函数</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'事件名字'</span>, <span class="string">'输入值'</span>)</span><br><span class="line"><span class="comment">//触发自定义事件 第一个参数名字 第二个参数函数参数</span></span><br></pre></td></tr></table></figure><hr><blockquote><p><em>常用 vue 指令</em></p></blockquote><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">v-if(show)</td><td style="text-align:center">true 显示 false 隐藏</td></tr><tr><td style="text-align:center">v-else</td><td style="text-align:center">跟 v-if 并列的话,v-if 隐藏它显示</td></tr><tr><td style="text-align:center">v-bind:()</td><td style="text-align:center">绑定某个属性,v-bind 可隐藏 <code>:()</code></td></tr><tr><td style="text-align:center">v-text</td><td style="text-align:center">纯文本内容显示</td></tr><tr><td style="text-align:center">v-html</td><td style="text-align:center">渲染显示</td></tr><tr><td style="text-align:center">v-on:click</td><td style="text-align:center">绑定点击 click 事件也可以用<code>@click</code></td></tr><tr><td style="text-align:center">v-model</td><td style="text-align:center">input 默认值(复选单选按钮,选择列表) 修改后值随之改变</td></tr><tr><td style="text-align:center">v-once</td><td style="text-align:center">渲染的值不发生变化</td></tr><tr><td style="text-align:center">v-for</td><td style="text-align:center"><code>( ,index)in( )</code> 循环取值 index 为序号,也可以是循环整数</td></tr><tr><td style="text-align:center">v-for</td><td style="text-align:center"><code>(value,key,index)in(object)</code>也可以循环取值 object</td></tr><tr><td style="text-align:center">key</td><td style="text-align:center">为 vue 指定唯一性 key 值,可以防止切换的重复组件被复用</td></tr><tr><td style="text-align:center">is</td><td style="text-align:center"><code>&lt;tr is=&quot;my-row&quot;&gt;&lt;/tr&gt;</code>将 tr 替换为 my-row 模板</td></tr><tr><td style="text-align:center">scope</td><td style="text-align:center">值对应一个临时变量名，此变量接收从子组件中传递的 props 对象</td></tr><tr><td style="text-align:center">ref</td><td style="text-align:center">可以使用 ref 为子组件指定一个索引 ID<code>new Vue({ el: &#39;#id&#39; }).$refs.(ID)</code></td></tr><tr><td style="text-align:center">inline-template</td><td style="text-align:center">组件将把它的内容当作它的模板，而不是把它当作分发内容</td></tr><tr><td style="text-align:center"><code>:duration=&quot;{ enter: 500, leave: 800 }&quot;</code></td><td style="text-align:center">定义动画持续时间</td></tr></tbody></table><p><strong>html 代码事例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>(<span class="attr">show</span>)=<span class="string">'welcome'</span> <span class="attr">v-bind:title</span>=<span class="string">'title'</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.显示隐藏元素(if是添加show是改变display) 2.v-bind(可省略)绑定title属性为'title' 3.message值不随着改变--&gt;</span></span><br><span class="line">    &#123;&#123; loggedIN? message : '请先登录 '&#125;&#125;  </span><br><span class="line">    <span class="comment">&lt;!--loggedIN值为true hello  false  请先登录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>     //v-else-if也可以使用</span><br><span class="line">    Now you don't</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--if为false时显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">'message'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!--message纯文本显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">'message'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!--渲染显示 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--触发的事件调用 event.preventDefault()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止单击事件冒泡,可以串联按照顺序执行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只当事件在该元素本身（比如不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在 "change" 而不是 "input" 事件中更新 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动转换输入的字符为数字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动过滤用户输入的首尾空格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'message'</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--input框中默认为message  修改此值即修改data里message值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'comment in comments  //(value, key, index) in object)'</span>&gt;</span></span><br><span class="line">            &#123;&#123; comment.content &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--循环comments数组创建li  可通过app.comments.push(&#123;content:'lalala'&#125;)添加新的li元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件化演示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span> <span class="attr">v-for</span>=<span class="string">'comment in comments'</span> <span class="attr">v-bind:comment</span>=<span class="string">'comment'</span>&gt;</span><span class="tag">&lt;/<span class="name">comment</span>&gt;</span>  <span class="comment">&lt;!--效果同上li --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>js 代码事例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义全局组件化</span></span><br><span class="line">Vue.component(<span class="string">'comment'</span>, &#123;</span><br><span class="line">    <span class="comment">//声明组件名字</span></span><br><span class="line">    template: <span class="string">'&lt;li&gt; &#123;&#123; comment.content &#125;&#125; &lt;/li&gt;'</span>, <span class="comment">//组件模板</span></span><br><span class="line">    <span class="comment">// '&lt;slot&gt; :) &lt;/slot&gt;'   内容分发</span></span><br><span class="line">    <span class="comment">//包含slot标签的div没有内容时显示:) 有内容时隐藏</span></span><br><span class="line">    props: [<span class="string">'comment'</span>], <span class="comment">//组件传入的对象</span></span><br><span class="line">    <span class="comment">/* prosp: &#123;</span></span><br><span class="line"><span class="comment">        comment: &#123;</span></span><br><span class="line"><span class="comment">            type:String,    </span></span><br><span class="line"><span class="comment">            default: 'button',   默认值</span></span><br><span class="line"><span class="comment">            required: true,      必须有值</span></span><br><span class="line"><span class="comment">            validator (value) &#123;</span></span><br><span class="line"><span class="comment">                return value.length &gt; 3      值长度大于 3</span></span><br><span class="line"><span class="comment">            &#125;      prosp的另一种对象形式</span></span><br><span class="line"><span class="comment">        &#125;        可以过滤传入对象的属性</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        logMessage() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.message)</span><br><span class="line">        &#125;, <span class="comment">//组件化中也可以直接定义data与methods</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>, <span class="comment">//选择应用vue的选择器,等效于vm.$mout('#app')</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        logMessage() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.message)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'hello'</span>,</span><br><span class="line">        title: <span class="string">'hello'</span>, <span class="comment">//鼠标放上去显示</span></span><br><span class="line">        welcome: <span class="literal">true</span>, <span class="comment">//true显示这个元素 false隐藏</span></span><br><span class="line">        loggedin: <span class="literal">false</span>,</span><br><span class="line">        comments: [&#123; <span class="attr">content</span>: <span class="string">'yayaya1'</span> &#125;, &#123; <span class="attr">content</span>: <span class="string">'yayaya2'</span> &#125;, &#123; <span class="attr">content</span>: <span class="string">'yayaya3'</span> &#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 实例被创建之后调用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello word~'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="vue-router-js"><a href="#vue-router-js" class="headerlink" title="vue-router.js"></a>vue-router.js</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 渲染模板里面根据路由再次嵌套渲染--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/foo/profile"</span>&gt;</span>/user/foo/profile<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> User = &#123;  <span class="comment">//动态参数值会被设置到 this.$route.params</span></span><br><span class="line">  template: <span class="string">'&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="user"&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;,</span><br><span class="line">     <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">     &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User,</span><br><span class="line">     <span class="comment">//自路由再次渲染</span></span><br><span class="line">       children: [ &#123; <span class="attr">path</span>: <span class="string">'profile'</span>, <span class="attr">component</span>: UserProfile &#125;,</span><br><span class="line">                 &#123; <span class="attr">path</span>: <span class="string">'posts'</span>, <span class="attr">component</span>: UserPosts &#125; ]</span><br><span class="line">     &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)   <span class="comment">//$mount('#app')相当于 el:'#app'</span></span><br></pre></td></tr></table></figure><blockquote><p><code>router.push</code> 会向 <code>history</code>栈添加一个新的记录点击浏览器后退按钮回到之前的 URL<br><code>router.replace</code>与<code>router.push</code> 很像，唯一的不同就是，它不会向 <code>history</code> 添加新记录<br><code>router.go</code> 参数是一个整数，意思是在 history 记录中向前或者后退多少步<br><code>{ path: &#39;/a&#39;, redirect: { name: &#39;foo&#39; }}</code><br>重定向的意思是，当用户访问 /a 时，URL 将会被替换成 /b，然后匹配路由为 /b<br><code>{ path: &#39;/a&#39;, component: A, alias: &#39;/b&#39; }</code><br>/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 全局注册的钩子   3个参数 去哪 哪来  干嘛</span></span><br><span class="line">&#125;)</span><br><span class="line">beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//组件内部的钩子 效果一样</span></span><br><span class="line">&#125;</span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) <span class="comment">//渲染该组件的对应路由被 confirm 前调用 无this</span></span><br><span class="line"></span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) <span class="comment">//在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line"></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) <span class="comment">//导航离开该组件的对应路由时调用</span></span><br><span class="line"></span><br><span class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="comment">// return 期望滚动到哪个的位置</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><h3 id="node-fs-专属配置环境工具"><a href="#node-fs-专属配置环境工具" class="headerlink" title="node(fs)专属配置环境工具"></a>node(fs)专属配置环境工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)     <span class="comment">//加载fs库赋值于fs</span></span><br><span class="line">fs.readdir(<span class="string">'.'</span>, (err,files) =&gt; &#123; <span class="comment">// .当前目录..上一级</span></span><br><span class="line">    <span class="keyword">if</span>(err != <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'files'</span>, files)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)   <span class="comment">//  读取当前目录下的文件(readdirSync同步版本)</span></span><br><span class="line"></span><br><span class="line">fs.rmdir(<span class="string">'目录名'</span>,(err) =&gt; &#123; &#125;)</span><br><span class="line"><span class="comment">//删除目录文件(目录必须为空)</span></span><br><span class="line"></span><br><span class="line">fs.unlink(file, (err) =&gt; &#123; &#125;)  </span><br><span class="line"><span class="comment">//  删除file文件</span></span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">'目录名字'</span>,(err) =&gt; &#123; &#125;)</span><br><span class="line"><span class="comment">//创建目录</span></span><br><span class="line"></span><br><span class="line">fs.readdir(<span class="string">'目录'</span>,(err, files) =&gt; &#123;&#125;)</span><br><span class="line"><span class="comment">//读取目录内容</span></span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'file'</span>, <span class="string">'你好 Node.js'</span>, (err) =&gt; &#123;&#125;)</span><br><span class="line"> <span class="comment">//  创建file文件</span></span><br><span class="line"></span><br><span class="line">fs.appendFile(<span class="string">'file'</span>, <span class="string">'你好 python'</span>, (err) =&gt; &#123;&#125;)</span><br><span class="line"><span class="comment">//添加文件内容</span></span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'message.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取了文件'</span>, data)</span><br><span class="line">&#125;)    <span class="comment">//   读取文件</span></span><br><span class="line"></span><br><span class="line">fs.rename(<span class="string">'原名字'</span>,<span class="string">'新名字'</span>,(err) =&gt; &#123;&#125;)</span><br><span class="line"><span class="comment">//重命名文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fileReadStream = fs.createReadStream(<span class="string">'文件名'</span>)</span><br><span class="line"><span class="keyword">var</span> fileWriteStream = fs.createWriteStream(<span class="string">'文件名'</span>)</span><br><span class="line"><span class="comment">//读取文件流  写入文件流</span></span><br><span class="line">fileReadStream.pipe(fileWriteStream)</span><br><span class="line"><span class="comment">//pipe好像管道,可以把读取流接入写入流 效果类似write</span></span><br><span class="line"><span class="comment">//pipe可以链式使用</span></span><br><span class="line">fileReadStream.pipe(fileWriteStream).pipe(...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">fileReadStream.on(<span class="string">'data'</span>,(chunk) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i++&#125;</span>接受到:<span class="subst">$&#123;chunk.length&#125;</span>`</span>)</span><br><span class="line">fileWriteStream.write(chunk) <span class="comment">//写入每次内容</span></span><br><span class="line">&#125;) <span class="comment">//读取次数,每次长度</span></span><br><span class="line"></span><br><span class="line">fileReadStream.on(<span class="string">'end'</span>,() =&gt; &#123;&#125;)</span><br><span class="line"><span class="comment">//读取结束事件</span></span><br><span class="line"></span><br><span class="line">fileReadStream.on(<span class="string">'error'</span>,(err) =&gt; &#123;&#125;)</span><br><span class="line"><span class="comment">//发生错误事件</span></span><br></pre></td></tr></table></figure><h3 id="express-库用于后端开发"><a href="#express-库用于后端开发" class="headerlink" title="express 库用于后端开发"></a>express 库用于后端开发</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 并且创建一个 express 实例赋值给 app</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(express.static(<span class="string">'static'</span>))</span><br><span class="line"><span class="comment">//封装一个函数</span></span><br><span class="line"><span class="keyword">var</span> sendHtml = <span class="function"><span class="keyword">function</span>(<span class="params">path, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>) <span class="comment">//   path是读取文件</span></span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        <span class="comment">//  options解码环境</span></span><br><span class="line">        encoding: <span class="string">'utf-8'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(path, options, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`读取的html文件 <span class="subst">$&#123;path&#125;</span> 内容是`</span>, data)</span><br><span class="line">        response.send(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用 get 定义一个给用户访问的网址</span></span><br><span class="line"><span class="comment">// request 是浏览器发送的请求</span></span><br><span class="line"><span class="comment">// response 是我们要发给浏览器的响应</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> path = <span class="string">'index.html'</span></span><br><span class="line">    sendHtml(path, response)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/todo/all'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> todos = [</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            task: <span class="string">'吃饭'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">JSON</span>.stringify(todos)</span><br><span class="line">    response.send(r)</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">'/todo/add'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// request.body  这个函数可以获取前端post的数据</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开端口服务器</span></span><br><span class="line"><span class="comment">// listen 函数的第一个参数是我们要监听的端口</span></span><br><span class="line"><span class="comment">// 这个端口是要浏览器输入的</span></span><br><span class="line"><span class="comment">// 默认的端口是 80</span></span><br><span class="line"><span class="comment">// 所以如果你监听 80 端口的话，浏览器就不需要输入端口了</span></span><br><span class="line"><span class="comment">// 但是 1024 以下的端口是系统保留端口，需要管理员权限才能使用</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> host = server.address().address</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'应用实例，访问地址为 http://%s:%s'</span>, host, port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>###node 的一些库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sync-request 用于下载网页</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'sync-request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//cheerio 用于解析网页数据</span></span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//模块中函数输出</span></span><br><span class="line"><span class="built_in">module</span>.exports = 函数名</span><br></pre></td></tr></table></figure><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">git init   <span class="comment">//创建git仓库</span></span><br><span class="line">git add (文件名)   <span class="comment">//添加文件</span></span><br><span class="line">git commit -m <span class="string">"改动说明"</span>   <span class="comment">//上传改动</span></span><br><span class="line">git status           <span class="comment">//查询仓库状态</span></span><br><span class="line">git diff ()           <span class="comment">//查询文件变动</span></span><br><span class="line">git <span class="built_in">log</span>         <span class="comment">//查询版本改动</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline     <span class="comment">//格式化显示版本改动状态</span></span><br><span class="line">git reset --hard HEAD^    <span class="comment">//HEAD当前版本 ^上个版本 ^^上2个版本  HEAD-100  上100个版本</span></span><br><span class="line">git reset --hard (版本号(可只写几个开头))   <span class="comment">//回滚到指定版本</span></span><br><span class="line">git reflog                     <span class="comment">//记录每次操作</span></span><br><span class="line">git checkout -- （）          <span class="comment">//文件回滚到最后一次add或commit状态</span></span><br><span class="line">git reset HEAD （）     <span class="comment">//撤销最后一次的git add</span></span><br><span class="line">git rm ()    <span class="comment">//删除文件</span></span><br><span class="line">git checkout -b dev     <span class="comment">//创建并切换为dev分支</span></span><br><span class="line">git branch    <span class="comment">//查看所有分支</span></span><br><span class="line">git checkout master    <span class="comment">//切换分支到master</span></span><br><span class="line">git merge dev    <span class="comment">//合并指定分支（dev）到当前分支</span></span><br><span class="line">git branch -d（D） dev    <span class="comment">//删除（强制删除）dev分支</span></span><br><span class="line">git stash   git stash pop    <span class="comment">//储存目前工作现场，读取。。。</span></span><br><span class="line">git remote -v    <span class="comment">//显示远程仓库信息</span></span><br><span class="line">git push （origin branch-<span class="built_in">name</span>）    <span class="comment">//本地推送分支到远程仓库</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream （branch-<span class="built_in">name</span> origin/branch-<span class="built_in">name</span>）</span><br><span class="line"><span class="comment">// 建立本地分支和远程分支的关联</span></span><br><span class="line">git tag （<span class="built_in">name</span>）   <span class="comment">//打标签</span></span><br><span class="line">git tag             <span class="comment">//查看所有标签</span></span><br><span class="line">git tag （v1.<span class="number">0</span>） (提交id)     <span class="comment">//打历史标签</span></span><br><span class="line">git show (<span class="built_in">name</span>)      <span class="comment">//显示对应标签说明</span></span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">"blablabla..."</span>   <span class="comment">//添加标签说明</span></span><br><span class="line">git tag -d （<span class="built_in">name</span>）     <span class="comment">//删除本地标签</span></span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt;   <span class="comment">//删除一个远程标签</span></span><br><span class="line">git push origin &lt;tagname&gt;     <span class="comment">//推送一个本地标签</span></span><br><span class="line">git push origin --tags        <span class="comment">//推送全部未推送过的本地标签</span></span><br><span class="line"><span class="comment">//忽略某些文件时，需要编写.gitignore</span></span><br><span class="line">git config --global alias.（co） checkout   <span class="comment">//配置简化git命令checkout为co</span></span><br></pre></td></tr></table></figure><hr><h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><p>创建 gulpfile.js 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)     <span class="comment">//引入gulp</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'images/*.png'</span>).pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建images函数，将images下所有png格式图片复制到dist/images文件下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)  <span class="comment">//编译sass为css</span></span><br><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>)</span><br><span class="line">gulp.task(<span class="string">'server'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        root: <span class="string">'dist'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建本地服务器监视dist文件下内容</span></span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);  <span class="comment">//合并</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);  <span class="comment">//压缩js文件</span></span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);  <span class="comment">//重命名文件</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">'javascripts/**/*.js'</span>,<span class="string">''</span>])</span><br><span class="line">.pipe(concat(<span class="string">'vendor.js'</span>))</span><br><span class="line">.pipe(uglify())</span><br><span class="line">.pipe(gulp.dest(<span class="string">'dist/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//合并文件，取名vendor.js压缩后放在dist/js下</span></span><br><span class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="comment">// 压缩css文件  minifyCSS()</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="comment">//压缩图片体积   imagemin()</span></span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</span><br><span class="line"><span class="comment">// 游览器同步</span></span><br><span class="line"><span class="comment">// 静态服务器</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">            baseDir: <span class="string">"./"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        proxy: <span class="string">"你的域名或IP"</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">npm install browser-sync --save-dev</span><br><span class="line"><span class="comment">//安装browser-sync</span></span><br><span class="line">browser-sync start --server forest --files <span class="string">"forest/index.html, forest/css/*.css"</span></span><br><span class="line"><span class="comment">//监视forest文件夹下文件</span></span><br><span class="line">--tunnel</span><br><span class="line"><span class="comment">//使外网也可以访问</span></span><br><span class="line">browser-sync start  --proxy localhost:<span class="number">9090</span></span><br><span class="line"><span class="comment">//监视指定代理服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用browser-sync</span></span><br><span class="line">browser-sync start --server --files <span class="string">"css/*.css, *.html"</span></span><br></pre></td></tr></table></figure><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">webpack (原.js) (处理后.js)</span><br><span class="line">module<span class="selector-class">.exports</span> = <span class="string">'zh is boss!'</span>   <span class="comment">//name.js</span></span><br><span class="line"><span class="selector-tag">var</span> name = require(<span class="string">'./name'</span>)    <span class="comment">//引入name.js</span></span><br><span class="line">npm install css-loader <span class="comment">// 处理css文件</span></span><br><span class="line">npm install style-loader <span class="comment">// 应用css文件</span></span><br><span class="line"><span class="function"><span class="title">require</span><span class="params">(<span class="string">'style!css!./css/*.css'</span>)</span></span>  <span class="comment">//引入css文件</span></span><br><span class="line">webpack --devtool source-map  <span class="comment">//生成可source调试的js</span></span><br><span class="line">npm install webpack-dev-serve    <span class="comment">//生成开发用服务器</span></span><br><span class="line">webpack-dev-server --inline --hot  <span class="comment">//模块热更新监控</span></span><br><span class="line"><span class="comment">//配置webpack文件</span></span><br><span class="line">新建一个名为webpack<span class="selector-class">.config</span><span class="selector-class">.js</span>的文件</span><br><span class="line">module<span class="selector-class">.exports</span> = &#123;</span><br><span class="line"> devtool: <span class="string">'eval-source-map'</span>,<span class="comment">//配置生成Source Maps</span></span><br><span class="line"> entry:  __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">    colors: true,<span class="comment">//终端中输出结果为彩色</span></span><br><span class="line">    historyApiFallback: true,<span class="comment">//不跳转</span></span><br><span class="line">    inline: true<span class="comment">//实时刷新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一些常用函数-数据"><a href="#一些常用函数-数据" class="headerlink" title="一些常用函数/数据"></a>一些常用函数/数据</h1><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iterable.length; i++) &#123;</span><br><span class="line">    iterable[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; iterable.length) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>语句</span></span><br><span class="line"><span class="function">    <span class="title">i</span> += 1</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span><span class="params">(iteam, <span class="keyword">index</span>, <span class="keyword">array</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">for</span> <span class="params">(i <span class="keyword">of</span> iterable)</span> <span class="comment">&#123; i &#125;</span>           <span class="comment">// i = 值</span></span></span><br><span class="line"><span class="function"><span class="title">for</span> <span class="params">(i <span class="keyword">in</span> iterable)</span> <span class="params">( iterable[i] &#125; <span class="comment">// i = 下标</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">break</span>  结束单次循环</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">continue</span> 语句可以跳过单次循环</span></span></span><br></pre></td></tr></table></figure><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">//alert( )</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试函数情况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ensure = <span class="function"><span class="keyword">function</span>(<span class="params">def, result, message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(def) !== <span class="built_in">JSON</span>.stringify(result)) &#123;</span><br><span class="line">        log(<span class="string">'错误'</span>, message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试函数正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(selector)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appendHtml = <span class="function"><span class="keyword">function</span>(<span class="params">element, html</span>) </span>&#123;</span><br><span class="line">    element.insertAdjacentHTML(<span class="string">'beforeend'</span>, html)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入html字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toggleClass = <span class="function"><span class="keyword">function</span>(<span class="params">element, className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.classList.contains(className)) &#123;</span><br><span class="line">        element.classList.remove(className)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.classList.add(className)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开关(className)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeClassAll = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> selector = <span class="string">'.'</span> + className</span><br><span class="line">    <span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(selector)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = elements[i]</span><br><span class="line">        e.classList.remove(className)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//批量删除className</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params">element, eventName, callback</span>) </span>&#123;</span><br><span class="line">    element.addEventListener(eventName, callback)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindAll = <span class="function"><span class="keyword">function</span>(<span class="params">selector, eventName, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(selector)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = elements[i]</span><br><span class="line">        bindEvent(e, eventName, callback)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//批量绑定事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = <span class="function"><span class="keyword">function</span>(<span class="params">z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (z === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        z = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> han = <span class="string">'日一二三四五六'</span></span><br><span class="line">    <span class="keyword">var</span> Year = z.getFullYear()</span><br><span class="line">    <span class="keyword">var</span> Month = z.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> Day = z.getDate()</span><br><span class="line">    <span class="keyword">var</span> Hour = z.getHours()</span><br><span class="line">    <span class="keyword">var</span> Minute = z.getMinutes()</span><br><span class="line">    <span class="keyword">var</span> Second = z.getSeconds()</span><br><span class="line">    <span class="keyword">var</span> Week = han[z.getDay()]</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">String</span>(Month).length === <span class="number">1</span>) &#123;</span><br><span class="line">        Month = <span class="string">'0'</span> + Month</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;Year&#125;</span>年<span class="subst">$&#123;Month&#125;</span>月<span class="subst">$&#123;Day&#125;</span>日 <span class="subst">$&#123;Hour&#125;</span>时<span class="subst">$&#123;Minute&#125;</span>分<span class="subst">$&#123;Second&#125;</span>秒 星期<span class="subst">$&#123;Week&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">time()</span><br><span class="line"><span class="comment">//时间函数    括号里输入时间对象 否则为当前时间</span></span><br><span class="line"><span class="comment">// (new Date()).getTime()把时间转换为当前毫秒计算事件 常用于倒计时</span></span><br><span class="line"><span class="comment">//可通过new Date('2017/6/10,10:30:30')的格式来设置时间</span></span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">秒懂释义</th></tr></thead><tbody><tr><td style="text-align:left">iterable</td><td style="text-align:left">可迭代对象</td></tr><tr><td style="text-align:left">path</td><td style="text-align:left">路径</td></tr><tr><td style="text-align:left">url</td><td style="text-align:left">网址</td></tr><tr><td style="text-align:left">src</td><td style="text-align:left">需暂停加载(比如 script img) 引用的意思</td></tr><tr><td style="text-align:left">href</td><td style="text-align:left">不需暂停加载(比如 link a ) 跳转的意思</td></tr><tr><td style="text-align:left">pattern</td><td style="text-align:left"><a href="#regexp-正则表达式">正则表达式</a></td></tr><tr><td style="text-align:left">property</td><td style="text-align:left">属性</td></tr><tr><td style="text-align:left">arguments</td><td style="text-align:left">参数</td></tr><tr><td style="text-align:left">event</td><td style="text-align:left"><a href="#event">事件</a> event.target</td></tr><tr><td style="text-align:left">clientX clientY</td><td style="text-align:left">鼠标</td></tr></tbody></table><h4 id="Math-数学"><a href="#Math-数学" class="headerlink" title="Math 数学"></a><strong>Math</strong> <a href="http://www.w3school.com.cn/jsref/jsref_obj_math.asp" target="_blank" rel="noopener">数学</a></h4><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th><th style="text-align:left">举栗</th></tr></thead><tbody><tr><td style="text-align:left">floor( x )</td><td style="text-align:left">返回 &lt;= x 整数 向下取整</td><td style="text-align:left">( -2.1 ) = -3</td></tr><tr><td style="text-align:left">ceil( x )</td><td style="text-align:left">返回 &gt;= x 整数 向上取整</td><td style="text-align:left">( -2.1 ) = -2</td></tr><tr><td style="text-align:left">round( x )</td><td style="text-align:left">返回 x 四舍五入</td><td style="text-align:left">( 5.4 ) = 5</td></tr><tr><td style="text-align:left">abs( x )</td><td style="text-align:left">返回 x 绝对值</td></tr><tr><td style="text-align:left">random( )</td><td style="text-align:left">生成 0 - 1 随机小数</td><td style="text-align:left">随机取数主要操作</td></tr><tr><td style="text-align:left">parseInt( )</td><td style="text-align:left">取整数</td></tr></tbody></table><h4 id="逻辑符号"><a href="#逻辑符号" class="headerlink" title="逻辑符号"></a>逻辑符号</h4><table><thead><tr><th style="text-align:center">与</th><th style="text-align:center">或</th><th style="text-align:center">非</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">\</td><td style="text-align:center">\</td><td></td><td>!!</td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">or</td><td style="text-align:center">not</td></tr></tbody></table><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><blockquote><p><strong>a 是执行函数 b 是时间（例如 1000）</strong></p></blockquote><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:center">作用</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td style="text-align:left">setInterval</td><td style="text-align:center">间隔型</td><td style="text-align:right">b 秒执行一次 setInterval(a,b)</td></tr><tr><td style="text-align:left">setTimeout</td><td style="text-align:center">延时型</td><td style="text-align:right">只执行一次</td></tr><tr><td style="text-align:left">clearInterval</td><td style="text-align:center">关闭间隔型</td></tr><tr><td style="text-align:left">clearTimeout</td><td style="text-align:center">关闭延时型</td></tr></tbody></table><blockquote><p><strong>offsetLeft 距离左边的距离</strong> 用于做无缝滚动</p></blockquote><p>####类型</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">typeof( object )</td><td style="text-align:left">判断 类型</td></tr><tr><td style="text-align:left">String( number )</td><td style="text-align:left">数字 转 字符串</td></tr><tr><td style="text-align:left">Number( string )</td><td style="text-align:left">字符串 转 数字</td></tr></tbody></table><h4 id="RegExp-正则表达式"><a href="#RegExp-正则表达式" class="headerlink" title="RegExp 正则表达式"></a><strong>RegExp</strong> <a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="noopener">正则表达式</a></h4><ul><li>语法：/<code>Pattern</code>/<code>Property</code><br>|Property|说明|<br>|:-:|:-:|<br>|/i|无视大小写|<br>|/g|全局匹配|<br>|/m|多行匹配 |<br>|/img|组合使用|</li></ul><ul><li>常用</li></ul><table><thead><tr><th style="text-align:center">正则表达式</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">/[A-Z]\</td><td style="text-align:center">[a-z]/img</td><td>所有字母</td></tr><tr><td style="text-align:center">/[0-9]/img</td><td style="text-align:center">所有数字</td></tr></tbody></table><ul><li>编译：<strong>new RegExp</strong>( <code>Pattern</code>, <code>Property</code> )</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'馒头'</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>`</span>, <span class="string">'img'</span>) <span class="comment">//加变量</span></span><br></pre></td></tr></table></figure><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h4><table><thead><tr><th style="text-align:center">转义符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:center">换行</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:center">TAB</td></tr><tr><td style="text-align:center"><code>\\</code></td><td style="text-align:center">反斜杠</td></tr><tr><td style="text-align:center"><code>\&#39;</code></td><td style="text-align:center">单引号</td></tr><tr><td style="text-align:center"><code>\&quot;</code></td><td style="text-align:center">双引号</td></tr></tbody></table><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><table><thead><tr><th style="text-align:center">注释</th><th style="text-align:center">快捷键 CTRL + /</th><th style="text-align:center">单行</th></tr></thead><tbody><tr><td style="text-align:center">JavaScript</td><td style="text-align:center"></td><td style="text-align:center"><code>//</code> JS</td></tr><tr><td style="text-align:center">CSS</td><td style="text-align:center"><code>/*</code> CSS <code>*/</code></td></tr><tr><td style="text-align:center">HTML</td><td style="text-align:center"><code>&lt;!--</code> HTML <code>--&gt;</code></td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center"><code>``` </code> Python <code>``` </code></td><td style="text-align:center"><code>#</code> Python</td></tr></tbody></table><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><blockquote><p><strong>ASCII：2 进制 8 字节表示 Base64：2 进制 6 字节</strong><br>|ASCII - Unicode 编码|说明|<br>|:-: |:-: |<br>|<code>&#39;Aa&#39;</code>.charCodeAt( <code>0</code> ) === 65|<code>0</code> 下标|<br>|String.fromCharCode( <code>65</code> ) === “A”|<code>65</code> ASCII 码|<br>|( <code>10</code> ).toString( <code>2</code> ) === “1010”|进制转换|</p></blockquote><hr><p>#参考资料：</p><p>####书籍</p><blockquote><p>《Head First HTML 与 CSS》第 2 版 ;<br>《JavaScript 语言精粹》;<br>《JavaScript 高级程序设计》;</p></blockquote><hr><blockquote><p>《编码》;《计算机程序的构造和解释》;<a href="http://sicp.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">SICP 解题集</a><br>《深入理解计算机系统》;<br>《算法导论》;《编程珠玑》;《程序设计语言》;《代码大全》;</p></blockquote><p>####网络</p><blockquote><p>文档：<a href="https://developer.mozilla.org/cn/" target="_blank" rel="noopener">MDN</a> /<a href="http://www.w3school.com.cn" target="_blank" rel="noopener">w3school</a><br>教程：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a>/<a href="http://ninghao.net/" target="_blank" rel="noopener">宁皓网</a>/<a href="http://www.imooc.com/" target="_blank" rel="noopener">慕课网</a></p></blockquote><hr><blockquote><p>基础教程：<br><a href="http://www.xuetangx.com/courses/course-v1:MITx+6_00_1x+sp/about" target="_blank" rel="noopener">计算机科学和 Python 编程导论</a> &gt; <a href="http://open.163.com/special/opencourse/cs50.html" target="_blank" rel="noopener">计算机科学 cs50</a> &gt; <a href="https://cn.udacity.com/course/design-of-computer-programs--cs212" target="_blank" rel="noopener">计算机程序设计</a> &gt; <a href="http://open.163.com/special/opencourse/algorithms.html" target="_blank" rel="noopener">算法导论</a> &gt; <a href="https://cn.udacity.com/course/programming-languages--cs262" target="_blank" rel="noopener">编程语言</a> &gt; <a href="https://site.douban.com/221832/widget/notes/15633831/note/323327071/" target="_blank" rel="noopener">英语学习</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈哈,偶尔看到我入行程序员的时候写的一个笔记,见证了我的成长,感觉挺有纪念意义的,就整理一下搬过来吧~~~~&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://zhaohang.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>flex布局详解(转)</title>
    <link href="http://zhaohang.site/2018/03/17/flex%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://zhaohang.site/2018/03/17/flex属性详解/</id>
    <published>2018-03-17T15:12:25.000Z</published>
    <updated>2018-06-13T02:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a>老师的博客通俗易懂,文笔优美,内容全面,一直是我学习的主战场,今天搬运一篇我觉得写的最好的<code>flex</code>讲解….</p><a id="more"></a><p>一、Flex 布局是什么？<br>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 行内元素也可以使用 Flex 布局。 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Webkit 内核的浏览器，必须加上-webkit 前缀。 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    /_safari_/display: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。 */</span></span><br></pre></td></tr></table></figure><p>二、基本概念<br>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。</p><p>三、容器的属性<br>以下 6 个属性设置在容器上。</p><blockquote><p>flex-direction<br>flex-wrap<br>flex-flow<br>justify-content<br>align-items<br>align-content<br>3.1 flex-direction 属性<br>flex-direction 属性决定主轴的方向（即项目的排列方向）。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能有 4 个值。</p><blockquote><p>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。<br>3.2 flex-wrap 属性<br>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap 属性定义，如果一条轴线排不下，如何换行。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取三个值。</p><blockquote><p>nowrap（默认）：不换行。<br>wrap：换行，第一行在上方。<br>wrap-reverse：换行，第一行在下方。</p></blockquote><p>3.3 flex-flow<br>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.4 justify-content 属性<br>justify-content 属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取 5 个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><blockquote><p>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br>3.5 align-items 属性<br>align-items 属性定义项目在交叉轴上如何对齐。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取 5 个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><blockquote><p>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。<br>3.6 align-content 属性<br>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性可能取 6 个值。</p><blockquote><p>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。</p></blockquote><p>四、项目的属性<br>以下 6 个属性设置在项目上。</p><blockquote><p>order<br>flex-grow<br>flex-shrink<br>flex-basis<br>flex<br>align-self</p></blockquote><p>4.1 order 属性<br>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2 flex-grow 属性<br>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">flex-grow: &lt;number&gt;; /_ default 0 _/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p><p>4.3 flex-shrink 属性<br>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">flex-shrink: &lt;number&gt;; /_ default 1 _/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><p>4.4 flex-basis 属性<br>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">flex-basis: &lt;length&gt; | auto; /_ default auto _/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间。</p><p>4.5 flex 属性<br>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: none | [ &lt; <span class="string">'flex-grow'</span> &gt; &lt; <span class="string">'flex-shrink'</span> &gt;? || &lt; <span class="string">'flex-basis'</span> &gt; ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><p>4.6 align-self 属性<br>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致。</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;老师的博客通俗易懂,文笔优美,内容全面,一直是我学习的主战场,今天搬运一篇我觉得写的最好的&lt;code&gt;flex&lt;/code&gt;讲解….&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://zhaohang.site/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于Nginx</title>
    <link href="http://zhaohang.site/2018/03/09/%E5%85%B3%E4%BA%8Enginx/"/>
    <id>http://zhaohang.site/2018/03/09/关于nginx/</id>
    <published>2018-03-09T11:17:25.000Z</published>
    <updated>2018-06-13T02:37:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 的大名从我接触开发以来如雷贯耳,但一直不清楚具体用法,今天就来研究一下….</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>安装后目录在<code>/usr/local/etc/nginx</code></p><p>目录中有一个 nginx.conf 就是配置文件</p><p>常用命令</p><p>启动: <code>nginx</code> 去访问 <code>localhost:8080</code> 吧<br>关闭: <code>nginx -s stop</code><br>重启: <code>nginx -s reload</code> 每次修改完<code>.conf</code> 文件就需要重启 <code>nginx</code><br>检查配置: <code>nginx -t</code> 检查修改的<code>nginx.conf</code>配置是否正确</p><p>最基本的代理功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line"># listen       [::]:80 default_server;   默认跳转到https</span><br><span class="line"># return 302 https://$server_name$request_uri;</span><br><span class="line">  server_name  test.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_cache my_cache;</span><br><span class="line">    proxy_pass http://127.0.0.1:8888;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;</span><br></pre></td></tr></table></figure><p>在相对路径创建一个 cache 目录 等级 1:2 可以有子目录 目录名字:大小</p><p>https 与 http2 公钥 私匙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       443 http2; # 配置http2</span><br><span class="line">  server_name  test.com;</span><br><span class="line">  http2_push_preload  on; # 开启http2 push</span><br><span class="line"></span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate_key  ../certs/localhost-privkey.pem;  # https证书地址</span><br><span class="line">  ssl_certificate      ../certs/localhost-cert.pem;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_cache my_cache;</span><br><span class="line">    proxy_pass http://127.0.0.1:8888;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>当我们有一个服务器集群，并且服务器集群中的每台服务器的内容一样的时候，同样我们要直接从个人电脑访问到服务器集群服务器的时候无法访问，必须通过第三方服务器才能访问集群<br>这个时候，我们通过第三方服务器访问服务器集群的内容，但是我们并不知道是哪一台服务器提供的内容，此种代理方式称为反向代理</p><p>nginx 反向代理主要通过 proxy_pass 来配置，将你项目的开发机地址填写到 proxy_pass 后面，正常的格式为 proxy_pass URL 即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://10.10.10.10:20186;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>公司会建立很多的服务器，这些服务器组成了服务器集群，然后，当用户访问网站的时候，先访问一个中间服务器，再让这个中间服务器在服务器集群中选择一个压力较小的服务器，然后将该访问请求引入选择的服务器<br>所以，用户每次访问，都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况<br>一句话：nginx 会给你分配服务器压力小的去访问</p><p>worker_processes</p><p>工作进程数，和 CPU 核数相同</p><p>worker_connections</p><p>每个进程允许的最大连接数</p><p>upstream 模块</p><p>负载均衡就靠它<br>语法格式：upstream name {}<br>里面写的两个 server 分别对应着不同的服务器</p><p>server 模块</p><p>实现反向代理<br>listen 监督端口号<br>location / {}访问根路径<br>proxy_pass <code>http://firstdemo</code>，代理到 firstdemo 里两个服务器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 修改nginx.conf</span><br><span class="line">worker_processes 1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    upstream firstdemo &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        server 39.106.145.33;</span><br><span class="line">        server 47.93.6.93;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://firstdemo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前游览器默认要求 HTTP2 必须使用 https</p><p>服务端开发可以面向 http1.1 通过 nginx 代理来配置 http2 这样可以兼容那些不支持 http2 的游览器</p><p>未完待续….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx 的大名从我接触开发以来如雷贯耳,但一直不清楚具体用法,今天就来研究一下….&lt;/p&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://zhaohang.site/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="nginx" scheme="http://zhaohang.site/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 学习笔记</title>
    <link href="http://zhaohang.site/2018/02/17/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhaohang.site/2018/02/17/JavaScript学习笔记/</id>
    <published>2018-02-17T01:17:25.000Z</published>
    <updated>2018-06-13T01:44:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>每年年底我都会重读一遍《JavaScript 高级程序设计》,每次看都有收获,今年重读写下笔记~~~</p><a id="more"></a><p>参考书籍</p><ul><li>JavaScript 高级程序设计</li><li>JavaScript 语言精粹</li><li>ECMAScript 6 入门</li></ul><h3 id="一些注意点"><a href="#一些注意点" class="headerlink" title="一些注意点"></a>一些注意点</h3><ol><li><code>script</code>标签应该放在<code>body</code>里面</li><li><code>var num = 1 ++num</code>为 2 先加后出结果<code>num--</code>为 2 先出结果后减 <code>num</code> 为 1</li><li><code>JavaScript</code>所有函数都是<strong>按值传递</strong></li><li><code>arguments.callee</code>指向调用函数 递归时很好用</li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果在 Node 的 REPL 环境，可以写成 global.a</span></span><br><span class="line"><span class="comment">// 或者采用通用方法，写成 this.a</span></span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.b <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><strong>基本包装类型: Boolean Number Sring</strong><br><strong>对于基本类型也可以像对象一样有方法操作的原因</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> s1 = <span class="string">'hello word'</span></span><br><span class="line"><span class="selector-tag">var</span> s2 = s1.length</span><br><span class="line"><span class="comment">// 内部转化</span></span><br><span class="line"><span class="selector-tag">var</span> s1 = new String(<span class="string">'hello word'</span>)</span><br><span class="line"><span class="selector-tag">var</span> s2 = s1.length</span><br><span class="line">s1 = null</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">charAt ()</td><td style="text-align:left">返回字符串给定位置的字符</td></tr><tr><td style="text-align:left">at ()</td><td style="text-align:left">可返回大于<code>0xFFFF</code>给定位置的字符</td></tr><tr><td style="text-align:left">charCodeAt()</td><td style="text-align:left">返回编码值</td></tr><tr><td style="text-align:left">codePointAt()</td><td style="text-align:left">返回 4 个字节储存字符的编码值</td></tr><tr><td style="text-align:left">String.fromCharCode</td><td style="text-align:left">从码点返回对应字符</td></tr><tr><td style="text-align:left">String.fromCodePoint</td><td style="text-align:left">识别大于<code>0xFFFF</code>的字符</td></tr><tr><td style="text-align:left">includes( str,2 )</td><td style="text-align:left">检查 是否包含 str 返回 bool,支持第二个参数 表示开始搜索位置</td></tr><tr><td style="text-align:left">startsWith(str,2),endsWith(str,2)</td><td style="text-align:left">返回布尔值,是否在头部/尾部,同支持第二个参数</td></tr><tr><td style="text-align:left">repeat(3)</td><td style="text-align:left">返回一个新字符串，表示将原字符串重复 n 次,小数取整</td></tr><tr><td style="text-align:left">padStart(6)，padEnd(6)</td><td style="text-align:left">头部/尾部 补全位数</td></tr><tr><td style="text-align:left">indexOf( str )</td><td style="text-align:left">从头部查找 是否包含 str 返回 下标</td></tr><tr><td style="text-align:left">lastIndexOf( str )</td><td style="text-align:left">从尾部查找 是否包含 str 返回 下标</td></tr><tr><td style="text-align:left">slice(star,end)</td><td style="text-align:left">返回 切片负值会加上字符串长度</td></tr><tr><td style="text-align:left">substr(star,length)</td><td style="text-align:left">返回 切片参数 1 负值会加上字符串长度 2 转为 0</td></tr><tr><td style="text-align:left">substring(star,end)</td><td style="text-align:left">返回 切片\负值会被转换为 0</td></tr><tr><td style="text-align:left">trim()</td><td style="text-align:left">去除首尾空格</td></tr><tr><td style="text-align:left">concat()</td><td style="text-align:left">相当于<code>&#39;&#39; + &#39;&#39;</code></td></tr><tr><td style="text-align:left">toLowerCase()</td><td style="text-align:left">字母转小写</td></tr><tr><td style="text-align:left">toUpperCase()</td><td style="text-align:left">字母转大写</td></tr><tr><td style="text-align:left">encodeURI()</td><td style="text-align:left">编码整个 url</td></tr><tr><td style="text-align:left">encodeURIComponent()</td><td style="text-align:left">编码 url 中的某一段</td></tr><tr><td style="text-align:left">decodeURI()</td><td style="text-align:left">对应解码</td></tr><tr><td style="text-align:left">decodeURIComponent()</td><td style="text-align:left">对应解码</td></tr><tr><td style="text-align:left">match(str)</td><td style="text-align:left">匹配相应字符串或者正则返回一个数组</td></tr><tr><td style="text-align:left">split( str )</td><td style="text-align:left">以 str 分割字符串 返回 array</td></tr><tr><td style="text-align:left">replace( pattern, str )</td><td style="text-align:left">替换 pattern 为 str</td></tr><tr><td style="text-align:left">search( [pattern]</td><td style="text-align:left">查找 pattern 返回下标 否则返回 -1</td></tr></tbody></table><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">for</span> <span class="keyword">of</span>可以循环字符串</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'foo'</span>) &#123;</span><br><span class="line">  console.log(codePoint)</span><br><span class="line">&#125;</span><br><span class="line">// <span class="string">"f"</span>  <span class="string">"o"</span>  <span class="string">"o"</span></span><br></pre></td></tr></table></figure><h3 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">//ig</td><td style="text-align:left">g 表示全局匹配 i 忽略大小写</td></tr><tr><td style="text-align:left">//u</td><td style="text-align:left">ES6 新增 匹配码点大于<code>0xfff</code>的字符</td></tr><tr><td style="text-align:left">match(str)</td><td style="text-align:left">匹配相应字符串或者正则返回一个数组</td></tr><tr><td style="text-align:left">split( str )</td><td style="text-align:left">以 str 分割字符串 返回 array</td></tr><tr><td style="text-align:left">replace( pattern, str )</td><td style="text-align:left">替换 pattern 为 str</td></tr><tr><td style="text-align:left">search( [pattern]</td><td style="text-align:left">查找 pattern 返回下标 否则返回 -1</td></tr><tr><td style="text-align:left">test( str )</td><td style="text-align:left">测试是否包含 返回 bool</td></tr><tr><td style="text-align:left">exec(str)</td><td style="text-align:left">存在匹配返回数组,不然 null</td></tr></tbody></table><h3 id="数值与-Math"><a href="#数值与-Math" class="headerlink" title="数值与 Math"></a>数值与 Math</h3><p>二进制字面量第一位必须是<code>0b</code><br>八进制字面值第一位必须是<code>0o</code><br>十六进制字面值的前两位必须是<code>0x</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">10.002</span></span><br><span class="line"><span class="built_in">num</span>.toFixed(<span class="number">2</span>)  <span class="comment">// 10.00</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性(Math.)</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">random()</td><td style="text-align:left">返回大于等于 0 小于 1 之间的数</td></tr><tr><td style="text-align:left">min([])</td><td style="text-align:left">求数组的最小值</td></tr><tr><td style="text-align:left">max([])</td><td style="text-align:left">求数组的最大值</td></tr><tr><td style="text-align:left">ceil(25.1)</td><td style="text-align:left">26 向上取整</td></tr><tr><td style="text-align:left">floor(25.9)</td><td style="text-align:left">25 向下取整</td></tr><tr><td style="text-align:left">round()</td><td style="text-align:left">四舍五入</td></tr><tr><td style="text-align:left">trunc()</td><td style="text-align:left">去除小数部分</td></tr><tr><td style="text-align:left">sign()</td><td style="text-align:left">判断正负数 正数+1 负数-1 正负 0 返回+0 -0</td></tr></tbody></table><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">10.002</span></span><br><span class="line"><span class="built_in">num</span>.toFixed(<span class="number">2</span>)  <span class="comment">// 10.00</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">'hello'</span>]</span><br><span class="line">// [ <span class="string">"h"</span>, <span class="string">"e"</span>, <span class="string">"l"</span>, <span class="string">"l"</span>, <span class="string">"o"</span> ]</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">toString()</td><td style="text-align:left">返回数组的字符串形式,已,分隔</td></tr><tr><td style="text-align:left">length</td><td style="text-align:left">返回长度 ,长度可设置为<code>0</code>以清空</td></tr><tr><td style="text-align:left">push( )</td><td style="text-align:left">末尾 添加元素,可多个</td></tr><tr><td style="text-align:left">pop( )</td><td style="text-align:left">尾部 删除一个元素</td></tr><tr><td style="text-align:left">unshift( )</td><td style="text-align:left">头部 添加元素,可多个</td></tr><tr><td style="text-align:left">shift( )</td><td style="text-align:left">头部 删除一个元素</td></tr><tr><td style="text-align:left">reverse( )</td><td style="text-align:left">翻转 所有元素</td></tr><tr><td style="text-align:left">sort( )</td><td style="text-align:left">排序函数(需提供排序方式函数)</td></tr><tr><td style="text-align:left">slice(star, end)</td><td style="text-align:left">切片并返回支持负索引</td></tr><tr><td style="text-align:left">splice(star, end,…[])</td><td style="text-align:left">删除插入并返回 开始的地方插入</td></tr><tr><td style="text-align:left">indexOf()</td><td style="text-align:left">从头查找返回元素第一次在数组中出现的位置,无返回-1</td></tr><tr><td style="text-align:left">lastIndexOf()</td><td style="text-align:left">从尾查找返回元素第一次在数组中出现的位置,无返回-1</td></tr><tr><td style="text-align:left">every()</td><td style="text-align:left">参数是一个过滤函数,全部通过返回 true</td></tr><tr><td style="text-align:left">filter()</td><td style="text-align:left">参数是一个过滤函数,返回符合条件的新数组</td></tr><tr><td style="text-align:left">find()</td><td style="text-align:left">参数是一个过滤函数,返回符合条件的第一个成员,参数二是回调函数绑定的 this 对象,无返回<code>undefined</code></td></tr><tr><td style="text-align:left">findIndex()</td><td style="text-align:left">同上 无返回<code>-1</code></td></tr><tr><td style="text-align:left">forEach()</td><td style="text-align:left">参数是函数,执行函数没有返回值</td></tr><tr><td style="text-align:left">map()</td><td style="text-align:left">参数是函数,执行函数返回一个新数组</td></tr><tr><td style="text-align:left">some()</td><td style="text-align:left">参数是一个过滤函数,任一个通过返回 true</td></tr><tr><td style="text-align:left">reduce()</td><td style="text-align:left">从头开始,参数是一个函数(前一个值,当前值,索引,数组),第二个参数是可选的归并初始项</td></tr><tr><td style="text-align:left">reduceRight()</td><td style="text-align:left">从尾开始</td></tr><tr><td style="text-align:left">fill(value, star, end)</td><td style="text-align:left">填充一个数组</td></tr><tr><td style="text-align:left">keys()</td><td style="text-align:left">for…of 中循环数组键名</td></tr><tr><td style="text-align:left">values()</td><td style="text-align:left">for…of 中循环数组值</td></tr><tr><td style="text-align:left">entries()</td><td style="text-align:left">for…of 中循环数组键值对</td></tr><tr><td style="text-align:left">copyWithin()</td><td style="text-align:left">target, start=0, end=this.length 将指定位置的成员复制到其他位置,会修改当前数组</td></tr><tr><td style="text-align:left">concat( array )</td><td style="text-align:left">连接 数组</td></tr><tr><td style="text-align:left">join( str )</td><td style="text-align:left">返回 字符串 str 分隔</td></tr><tr><td style="text-align:left">includes(str)</td><td style="text-align:left">检查 是否包含 str 返回 bool</td></tr><tr><td style="text-align:left">Array.from()</td><td style="text-align:left">将类似数组的对象和可遍历（iterable）的对象转为真正的数组,可选的第二个参数为函数,类似于 map</td></tr><tr><td style="text-align:left">Array.of(3, 11, 8)</td><td style="text-align:left">用于将一组值，转换为数组[3,11,8]</td></tr></tbody></table><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Object.is( , )</td><td style="text-align:left">相当于===,解决+-0 与 NaN 问题</td></tr><tr><td style="text-align:left">Object.assign( , )</td><td style="text-align:left">对象合并,只是浅拷贝</td></tr><tr><td style="text-align:left">Object.getOwnPropertyDescriptor(obj, key)</td><td style="text-align:left">获取对象键的描述</td></tr><tr><td style="text-align:left">Object.setPrototypeOf(obj, prop)</td><td style="text-align:left">设置原型</td></tr><tr><td style="text-align:left">Object. getPrototypeOf(obj)</td><td style="text-align:left">获取原型</td></tr><tr><td style="text-align:left">super</td><td style="text-align:left">只能在对象里调用 指向对象的原型对象</td></tr><tr><td style="text-align:left">Object.keys()</td><td style="text-align:left">获取对象的 key 返回数组</td></tr><tr><td style="text-align:left">Object.values()</td><td style="text-align:left">获取对象的值 返回数组</td></tr><tr><td style="text-align:left">Object.entries()</td><td style="text-align:left">返回二位键值对数组[ [“foo”, “bar”], [“baz”, 42] ]</td></tr></tbody></table><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">a.toLocaleString() <span class="comment">// 2018/3/27 下午12:02:30</span></span><br><span class="line">a.toLocaleDateString() <span class="comment">// 2018/3/27</span></span><br><span class="line">a.toLocaleTimeString()  <span class="comment">// 下午12:02:30</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.now() == +<span class="keyword">new</span> <span class="built_in">Date</span>()   <span class="comment">//获取时间毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = <span class="function"><span class="keyword">function</span>(<span class="params"> z = new Date(</span>) ) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> han = <span class="string">'日一二三四五六'</span></span><br><span class="line">    <span class="keyword">var</span> Year   = z.getFullYear()</span><br><span class="line">    <span class="keyword">var</span> Month  = z.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> Day    = z.getDate()</span><br><span class="line">    <span class="keyword">var</span> Hour   = z.getHours()</span><br><span class="line">    <span class="keyword">var</span> Minute = z.getMinutes()</span><br><span class="line">    <span class="keyword">var</span> Second = z.getSeconds()</span><br><span class="line">    <span class="keyword">var</span> Week   = han[z.getDay()]</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">String</span>(Month).length === <span class="number">1</span>) &#123;</span><br><span class="line">        Month = <span class="string">'0'</span> + Month</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;Year&#125;</span>年<span class="subst">$&#123;Month&#125;</span>月<span class="subst">$&#123;Day&#125;</span>日 <span class="subst">$&#123;Hour&#125;</span>时<span class="subst">$&#123;Minute&#125;</span>分<span class="subst">$&#123;Second&#125;</span>秒 星期<span class="subst">$&#123;Week&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><ul><li><code>Symbol</code>是一种新的数据类型,表示独一无二的值.</li><li>可以转换为<code>string</code>与<code>bool</code></li><li>不可以使用点语法 <code>Object.getOwnPropertySymbols</code>可以获取对象所有的 Symbol 属性名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">typeof</span> s  <span class="comment">// 'symbol'</span></span><br><span class="line"><span class="comment">// 可以接受字符串为参数,表示描述,容易打印区分</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>)</span><br><span class="line">s1 === s2   <span class="comment">// false</span></span><br><span class="line"><span class="comment">// for方法可以复用 搜索有没有该参数作为名称的 Symbol 值,有返回,没有创建</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line">s1 === s2</span><br></pre></td></tr></table></figure><h3 id="Set-与-Map"><a href="#Set-与-Map" class="headerlink" title="Set 与 Map"></a>Set 与 Map</h3><p>Set 类似于数组，但是成员的值都是唯一的，没有重复的值 (判断重复与===差不多,主要区别是 NaN 等于自身)<br>Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const set = new Set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">add(value) <span class="comment">//添加某个值，返回 Set 结构本身。</span></span><br><span class="line">delete(value)<span class="comment">//删除某个值，返回一个布尔值，表示删除是否成功。</span></span><br><span class="line">has(value)<span class="comment">//返回一个布尔值，表示该值是否为Set的成员。</span></span><br><span class="line">clear()<span class="comment">//清除所有成员，没有返回值。</span></span><br><span class="line">keys()<span class="comment">//返回键名的遍历器  (由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值）)</span></span><br><span class="line">values()<span class="comment">//返回键值的遍历器 (所以keys方法和values方法的行为完全一致)</span></span><br><span class="line">entries()<span class="comment">//返回键值对的遍历器 (返回键值对数组,例如['red','red'])</span></span><br><span class="line">forEach()<span class="comment">//使用回调函数遍历每个成员</span></span><br><span class="line"><span class="comment">// 简便的去重</span></span><br><span class="line">let arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line">let unique = [...new Set(arr)];</span><br></pre></td></tr></table></figure><p>Map 类似于对象,但键不再只能是<strong>字符串</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123;p: <span class="string">'Hello World'</span>&#125;;</span><br><span class="line">m.<span class="keyword">set</span>(o, <span class="string">'content'</span>)  <span class="comment">//设置</span></span><br><span class="line">m.<span class="keyword">get</span>(o) <span class="comment">// "content" 获取</span></span><br><span class="line">m.has(o) <span class="comment">// true</span></span><br><span class="line">m.delete(o) <span class="comment">// true</span></span><br><span class="line">m.has(o) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">map</span> = <span class="keyword">new</span> Map([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'张三'</span>],</span><br><span class="line">  [<span class="string">'title'</span>, <span class="string">'Author'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">size</span> <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">map</span>.has(<span class="string">'name'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">'name'</span>) <span class="comment">// "张三"</span></span><br><span class="line"><span class="built_in">map</span>.has(<span class="string">'title'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">'title'</span>) <span class="comment">// "Author"</span></span><br><span class="line"><span class="built_in">map</span>. <span class="built_in">clear</span>() <span class="comment">// map.size  0</span></span><br><span class="line">keys()<span class="comment">//返回键名的遍历器 (返回数组键数组[key1, key2...])</span></span><br><span class="line">values()<span class="comment">//返回键值的遍历器(返回值数组[value1, value2...])</span></span><br><span class="line">entries()<span class="comment">//返回键值对的遍历器(返回键值对数组[key1,  value1],[key2, value2])</span></span><br><span class="line">forEach()<span class="comment">//使用回调函数遍历每个成员</span></span><br></pre></td></tr></table></figure><p>如果对同一个键多次赋值，后面的值将覆盖前面的值<br>读取一个未知的键，则返回 undefined<br>只有对同一个对象的引用，Map 结构才将其视为同一个键<br>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span></span><br><span class="line">.<span class="built_in">set</span>(<span class="number">1</span>, <span class="string">'aaa'</span>)</span><br><span class="line">.<span class="built_in">set</span>(<span class="number">1</span>, <span class="string">'bbb'</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(<span class="number">1</span>) <span class="comment">// "bbb"</span></span><br><span class="line"><span class="keyword">new</span> Map().<span class="built_in">get</span>(<span class="string">'asfddfsasadf'</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>([<span class="string">'a'</span>], <span class="number">555</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">get</span>([<span class="string">'a'</span>]) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>next()、throw()、return()这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 yield 表达式<br><code>next()</code>是将 yield 表达式替换成一个值<br><code>throw()</code>是将 yield 表达式替换成一个 throw 语句<br>return()是将 yield 表达式替换成一个 return 语句。</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function* gen() &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next()        // &#123; value: <span class="number">1</span>, done: <span class="literal">false</span> &#125;</span><br><span class="line">g.<span class="keyword">return</span>('foo') // &#123; value: <span class="string">"foo"</span>, done: <span class="literal">true</span> &#125;  立即结束generator函数(如果有<span class="keyword">finally</span>代码块,等到<span class="keyword">finally</span>代码块执行完，再执行)</span><br><span class="line">g.next()  // &#123; value: undefined, done: <span class="literal">true</span> &#125;</span><br><span class="line">g.throw();  // 可以被generator函数内捕获</span><br><span class="line">---------------------</span><br><span class="line"><span class="keyword">const</span> g = function* (x, y) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="literal">result</span> = <span class="keyword">yield</span> x + y;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = g(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">gen.next(); // <span class="type">Object</span> &#123;value: <span class="number">3</span>, done: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">gen.next(<span class="number">1</span>); // <span class="type">Object</span> &#123;value: <span class="number">1</span>, done: <span class="literal">true</span>&#125;</span><br><span class="line">// 相当于将 <span class="keyword">let</span> <span class="literal">result</span> = <span class="keyword">yield</span> x + y</span><br><span class="line">// 替换成 <span class="keyword">let</span> <span class="literal">result</span> = <span class="number">1</span>;</span><br><span class="line">gen.throw(new <span class="type">Error</span>('出错了')); // <span class="type">Uncaught</span> <span class="type">Error</span>: 出错了</span><br><span class="line">// 相当于将 <span class="keyword">let</span> <span class="literal">result</span> = <span class="keyword">yield</span> x + y</span><br><span class="line">// 替换成 <span class="keyword">let</span> <span class="literal">result</span> = throw(new <span class="type">Error</span>('出错了'));</span><br><span class="line">gen.<span class="keyword">return</span>(<span class="number">2</span>); // <span class="type">Object</span> &#123;value: <span class="number">2</span>, done: <span class="literal">true</span>&#125;</span><br><span class="line">// 相当于将 <span class="keyword">let</span> <span class="literal">result</span> = <span class="keyword">yield</span> x + y</span><br><span class="line">// 替换成 <span class="keyword">let</span> <span class="literal">result</span> = <span class="keyword">return</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>看懂这个函数就明白了一半了….<br>将 Generator 函数加到对象的 Symbol.iterator 属性上面,使原生对象具有遍历接口,可以使用 for…of 循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> propKeys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [propKey, <span class="keyword">this</span>[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jane = &#123; <span class="attr">first</span>: <span class="string">'Jane'</span>, <span class="attr">last</span>: <span class="string">'Doe'</span> &#125;;</span><br><span class="line"></span><br><span class="line">jane[<span class="built_in">Symbol</span>.iterator] = objectEntries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> jane) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yield*</code>表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* foo();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何数据结构只要有 <code>Iterator</code>接口，就可以被<code>yield*</code>遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于数组原生支持遍历器，因此就会遍历数组成员</span></span><br><span class="line"><span class="comment">//yield命令后面如果不加星号，返回的是整个数组，加了星号就表示返回的是数组的遍历器对象</span></span><br><span class="line">gen().next() <span class="comment">// &#123; value:"a", done:false &#125;</span></span><br><span class="line"><span class="comment">// 一个方便地取出嵌套数组的所有成员的好例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">iterTree</span>(<span class="params">tree</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(tree)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; tree.length; i++) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* iterTree(tree[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> tree;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = [ <span class="string">'a'</span>, [<span class="string">'b'</span>, <span class="string">'c'</span>], [<span class="string">'d'</span>, <span class="string">'e'</span>] ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> iterTree(tree)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a b c d e</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ol><li>ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于 undefined，默认值才会生效</li><li>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挑一些容易出错的例子</span></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [];     <span class="comment">// ReferenceError: y is not defined</span></span><br><span class="line"><span class="comment">// 上面最后一个表达式之所以会报错，是因为x用y做默认值时，y还没有声明。</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">'hello'</span>, <span class="attr">last</span>: <span class="string">'world'</span> &#125;;  <span class="comment">// 变量名与属性名不一致</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; log, sin, cos &#125; = <span class="built_in">Math</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;   <span class="comment">// 写这样的代码大概率会被同事打死</span></span><br><span class="line">len <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="built_in">Object</span>.create(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</span><br><span class="line">o.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符的解构赋值，不能复制继承自原型对象的属性。</span></span><br><span class="line"><span class="keyword">let</span> &#123; x, ...newObj &#125; = o;</span><br><span class="line"><span class="keyword">let</span> &#123; y, z &#125; = newObj;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;  <span class="comment">// 合并2个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p>async 函数是什么？一句话，它就是 Generator 函数的语法糖<br>async 函数对 Generator 函数的改进，体现在以下四点:</p><ol><li>内置执行器(自动 next())</li><li>更好的语义(比<code>*</code>和<code>yield</code>更好理解)</li><li>更广的适用性(命令可以是<code>promise</code>对象与原始类型值)</li><li>返回值是 Promise</li></ol><p>一些需要注意的点:</p><ul><li><code>return</code>返回的值是一个<code>promise</code>对象,可以被<code>then</code></li><li>必须等内部所有<code>await</code>执行后才能<code>then</code>,除非中途<code>return</code>或<code>throw</code></li><li>await 命令后面是一个 Promise 对象。如果不是，会被转成一个立即 resolve 的 Promise 对象。</li><li>只要一个<code>await</code>出错,后面的都不会执行,这时候可以使用<code>try catch</code>,或者每一个<code>await</code>都<code>catch</code>一下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">'出错了'</span>);</span><br><span class="line"><span class="comment">// 等价于 return await Promise.reject('出错了');</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> getFoo();</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> getBar(); <span class="comment">// 这样需要顺序执行</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">let</span> [foo, bar] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([getFoo(), getBar()]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> fooPromise = getFoo();</span><br><span class="line"><span class="keyword">let</span> barPromise = getBar();</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> fooPromise;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> barPromise;</span><br><span class="line"><span class="comment">//以上可以同时执行,节省时间</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每年年底我都会重读一遍《JavaScript 高级程序设计》,每次看都有收获,今年重读写下笔记~~~&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://zhaohang.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>redis数据库与go中的使用</title>
    <link href="http://zhaohang.site/2018/01/21/redis%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Ego%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://zhaohang.site/2018/01/21/redis数据库与go中的使用/</id>
    <published>2018-01-21T14:17:25.000Z</published>
    <updated>2018-06-13T02:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于<code>redis</code>的学习,感谢<a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>提供的优秀资料<br>随着学习的深入,此文章持续更新…</p><a id="more"></a><p>Redis 是 key - value 型数据库,有以下三个特点：</p><ul><li>Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。</li><li>Redis 支持数据的备份，即 master-slave 模式的数据备份。</li></ul><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>通过<code>homebrew</code>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p>通过<code>homebrew</code>安装<code>Redis Desktop Manager</code> 是一个<code>redis</code>桌面管理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install rdm</span><br></pre></td></tr></table></figure><p>启动<code>redis</code> / 关闭<code>redis</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br><span class="line"></span><br><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure><p>进入<code>redis</code>命令界面 –raw 解决乱码问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --raw</span><br></pre></td></tr></table></figure><p>选择数据库 默认数据库为<code>0</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 0   # ok</span><br></pre></td></tr></table></figure><p>通过 config 命令查看或设置配置项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config get config_setting_name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有配置</span></span><br><span class="line">config get *</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置配置</span></span><br><span class="line">config set config_setting_name new_config_value</span><br><span class="line">config set loglevel "notice"</span><br><span class="line"></span><br><span class="line">config get loglevel</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"notice"</span></span></span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h4><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">描述</th><th style="text-align:center">返回</th></tr></thead><tbody><tr><td style="text-align:center">Del key</td><td style="text-align:center">key 存在时删除 key</td><td style="text-align:center">删除的数量</td></tr><tr><td style="text-align:center">Exists key</td><td style="text-align:center">检查 key 值是否存在</td><td style="text-align:center">存在<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">Expire key</td><td style="text-align:center">已秒设置过期时间</td><td style="text-align:center">成功<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">Expireat key</td><td style="text-align:center"><code>unix</code>时间戳设置过去时间</td><td style="text-align:center">成功<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">PEXPIRE key</td><td style="text-align:center">以毫秒设置过期时间</td><td style="text-align:center">成功<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">KEYS *</td><td style="text-align:center">查找所有符合给定模式的 key</td><td style="text-align:center">符合查询要求的数组</td></tr><tr><td style="text-align:center">Move key database</td><td style="text-align:center">移动 key 值到其他数据库</td><td style="text-align:center">成功<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">PERSIST key</td><td style="text-align:center">移除 key 的过期时间</td><td style="text-align:center">成功<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">Pttl key</td><td style="text-align:center">以毫秒为单位返回过期时间</td><td style="text-align:center">无 key:<code>-2</code> 无过期时间: <code>-1</code> 否则返回时间</td></tr><tr><td style="text-align:center">TTL key</td><td style="text-align:center">以秒为单位返回 key 的过期时间</td><td style="text-align:center">无 key:<code>-2</code> 无过期时间: <code>-1</code> 否则返回时间</td></tr><tr><td style="text-align:center">RANDOMKEY</td><td style="text-align:center">从当前数据库中随机返回一个 key</td><td style="text-align:center">无 key 返回<code>nil</code></td></tr><tr><td style="text-align:center">RENAME oldkey newkey</td><td style="text-align:center">修改 key 的名称</td><td style="text-align:center">成功:<code>ok</code> 失败返回错误 新 key 存在覆盖新 key</td></tr><tr><td style="text-align:center">Renamenx oldkey newkey</td><td style="text-align:center">仅当 newkey 不存在时，将 key 改名为 newkey</td><td style="text-align:center">成功<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">TYPE key</td><td style="text-align:center">返回 key 所储存的值的类型</td><td style="text-align:center">无 key 返回<code>none</code></td></tr></tbody></table><h4 id="String（字符串"><a href="#String（字符串" class="headerlink" title="String（字符串)"></a>String（字符串)</h4><ul><li>string 可以包含任何数据。比如 jpg 图片或者序列化的对象</li><li>一个键最大能存储 512MB</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">描述</th><th style="text-align:center">返回</th></tr></thead><tbody><tr><td style="text-align:center">SET key value</td><td style="text-align:center">设置 key value</td><td style="text-align:center">成功后返回<code>ok</code></td></tr><tr><td style="text-align:center">Get key</td><td style="text-align:center">获取指定 key 的值</td><td style="text-align:center">无 key 返回<code>nil</code></td></tr><tr><td style="text-align:center">Getrange key start end</td><td style="text-align:center">返回 key 中字符串值的子字符</td><td style="text-align:center">截取的子字符串</td></tr><tr><td style="text-align:center">GETSET key value</td><td style="text-align:center">将给定 key 的值设为 value 返回 key 的旧值(old value)</td><td style="text-align:center">无 key 返回<code>nil</code></td></tr><tr><td style="text-align:center">MGET key1 key2</td><td style="text-align:center">获取所有(一个或多个)给定 key 的值</td><td style="text-align:center">一个包含所有给定 key 的值的列表</td></tr><tr><td style="text-align:center">SETEX key time(s) value</td><td style="text-align:center">重设 key 与过期时间</td><td style="text-align:center">成功<code>ok</code></td></tr><tr><td style="text-align:center">SETNX key value</td><td style="text-align:center">key 不存在时设置 value</td><td style="text-align:center">成功<code>1</code>失败<code>0</code></td></tr><tr><td style="text-align:center">STRLEN key</td><td style="text-align:center">返回 key 的长度</td><td style="text-align:center">无 key 返回<code>0</code></td></tr><tr><td style="text-align:center">MSET key1 value1 key2 value2</td><td style="text-align:center">同时设置多个 key 与 value</td><td style="text-align:center">总是<code>ok</code></td></tr><tr><td style="text-align:center">MSETNX key1 value1 key2 value2</td><td style="text-align:center">同时设置多个不存在的 key 与 value</td><td style="text-align:center">全部成功返回<code>1</code>否则<code>0</code></td></tr><tr><td style="text-align:center">PSETEX key time(s) value</td><td style="text-align:center">毫秒为单位设置过期时间</td><td style="text-align:center">成功<code>ok</code></td></tr><tr><td style="text-align:center">INCR key</td><td style="text-align:center">使 key 值加一</td><td style="text-align:center">newkey,无 key 初始化为<code>0</code>再加<code>1</code>否则返回错误</td></tr><tr><td style="text-align:center">Incrby key int64</td><td style="text-align:center">使 key 值加 num</td><td style="text-align:center">newkey,无 key 初始化为<code>0</code>再加<code>num</code>否则返回错误</td></tr><tr><td style="text-align:center">Incrbyfloat key float</td><td style="text-align:center">同上 浮点数类型</td><td style="text-align:center">同上</td></tr><tr><td style="text-align:center">Decr key</td><td style="text-align:center">使 key 值减一</td><td style="text-align:center">同上</td></tr><tr><td style="text-align:center">Decrby key int64</td><td style="text-align:center">使 key 值减去 num</td><td style="text-align:center">同上</td></tr><tr><td style="text-align:center">Append key value</td><td style="text-align:center">给 key 追加 value</td><td style="text-align:center">newkey 的长度 无 key 等于 set</td></tr></tbody></table><h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h4><ul><li>hash 是一个键值(key=&gt;value)对集合。</li><li>hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</li><li>每个 hash 可以存储 232 -1 键值对（40 多亿）</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">描述</th><th style="text-align:center">返回</th></tr></thead><tbody><tr><td style="text-align:center">Hdel key field1</td><td style="text-align:center">删除一个或多个哈希表字段</td><td style="text-align:center">成功删除的数量</td></tr><tr><td style="text-align:center">Hexists key field1</td><td style="text-align:center">查看指定字段是否存在</td><td style="text-align:center">存在<code>1</code> 否则<code>0</code></td></tr><tr><td style="text-align:center">HGET key field1</td><td style="text-align:center">返回指定字段的值</td><td style="text-align:center">不存在返回<code>nil</code></td></tr><tr><td style="text-align:center">Hgetall key field1</td><td style="text-align:center">返回整个 key</td><td style="text-align:center">不存在返回空列表</td></tr><tr><td style="text-align:center">HINCRBY key field1 int64</td><td style="text-align:center">为 key 中的指定字段的整数值加上指定增量</td><td style="text-align:center">此字段的新值</td></tr><tr><td style="text-align:center">HINCRBYFLOAT key field1 float</td><td style="text-align:center">浮点数版本</td><td style="text-align:center">同上</td></tr><tr><td style="text-align:center">Hkeys key</td><td style="text-align:center">获取所有哈希表中的字段</td><td style="text-align:center">不存在返回空列表</td></tr><tr><td style="text-align:center">Hlen key</td><td style="text-align:center">获取哈希表中字段的数量</td><td style="text-align:center">不存在返回<code>0</code></td></tr><tr><td style="text-align:center">Hmget key field1 field2</td><td style="text-align:center">获取所有给定字段的值</td><td style="text-align:center">不存在返回<code>nil</code></td></tr><tr><td style="text-align:center">Hmset key field1 value1 field2 value2</td><td style="text-align:center">同时将多个 field-value (域-值)对设置到 key 中</td><td style="text-align:center">成功返回<code>ok</code></td></tr><tr><td style="text-align:center">Hset key field value</td><td style="text-align:center">key 中的字段 field 的值设为 value</td><td style="text-align:center">新建字段返回<code>1</code>覆盖返回<code>0</code></td></tr><tr><td style="text-align:center">Hsetnx key field value</td><td style="text-align:center">字段 field 不存在时设置哈希表字段的值</td><td style="text-align:center">成功<code>1</code>失败<code>0</code></td></tr><tr><td style="text-align:center">Hvals key</td><td style="text-align:center">获取哈希表中所有值</td><td style="text-align:center">不存在返回空列表</td></tr></tbody></table><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><ul><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</li><li>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储 40 多亿)。</li></ul><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><ul><li>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</li><li>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储 40 多亿个成员)。</li></ul><h4 id="Zset（有序集合"><a href="#Zset（有序集合" class="headerlink" title="Zset（有序集合)"></a>Zset（有序集合)</h4><ul><li>string 类型元素的集合,且不允许重复的成员</li><li>每个元素都会关联一个 double 类型的分数,通过分数来为集合中的成员进行从小到大的排序。</li><li>成员是唯一的,但分数(score)却可以重复</li></ul><h3 id="Golang-redis-操作"><a href="#Golang-redis-操作" class="headerlink" title="Golang redis 操作"></a>Golang redis 操作</h3><p><code>golang</code>操作<code>redis</code>,使用<a href="https://gopkg.in/redis.v6" target="_blank" rel="noopener">redis.v6</a>的一些简单说明</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get gopkg.in/redis.v6</span><br><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/redis.v6"</span></span><br></pre></td></tr></table></figure><h4 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h4><p>通过 redis.NewClient 函数即可创建一个 redis 客户端, 这个方法接收一个 redis.Options 对象参数, 通过这个参数, 我们可以配置 redis 相关的属性, 例如 redis 服务器地址, 数据库名, 数据库密码等.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createClient</span><span class="params">()</span> *<span class="title">redis</span>.<span class="title">Client</span></span> &#123;</span><br><span class="line">    client := redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">        Addr:     <span class="string">"localhost:6379"</span>,</span><br><span class="line">        Password: <span class="string">""</span>,</span><br><span class="line">        DB:       <span class="number">0</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 cient.Ping() 来检查是否成功连接到了 redis 服务器</span></span><br><span class="line">    pong, err := client.Ping().Result()</span><br><span class="line">    fmt.Println(pong, err)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>set get 操作,第三个参数是过期时间, 如果是 0, 则表示没有过期时间.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">err := client.Set(<span class="string">"name"</span>, <span class="string">"xys"</span>, <span class="number">0</span>).Err()</span><br><span class="line"></span><br><span class="line">val, err := client.Get(<span class="string">"name"</span>).Result()</span><br></pre></td></tr></table></figure><p>这里设置过期时间.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err = client.Set(<span class="string">"age"</span>, <span class="string">"20"</span>, <span class="number">1</span> * time.Second).Err()</span><br></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>在名称为 fruit 的 list 尾添加一个值为 value 的元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.RPush(<span class="string">"fruit"</span>, <span class="string">"apple"</span>)</span><br></pre></td></tr></table></figure><p>在名称为 fruit 的 list 头添加一个值为 value 的 元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.LPush(<span class="string">"fruit"</span>, <span class="string">"banana"</span>)</span><br></pre></td></tr></table></figure><p>返回名称为 fruit 的 list 的长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length, err := client.LLen(<span class="string">"fruit"</span>).Result()</span><br></pre></td></tr></table></figure><p>返回并删除名称为 fruit 的 list 中的首元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, err := client.LPop(<span class="string">"fruit"</span>).Result()</span><br></pre></td></tr></table></figure><p>返回并删除名称为 fruit 的 list 中的尾元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, err = client.RPop(<span class="string">"fruit"</span>).Result()</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>向 blacklist 中添加元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.SAdd(<span class="string">"blacklist"</span>, <span class="string">"Obama"</span>)</span><br></pre></td></tr></table></figure><p>向 whitelist 添加元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.SAdd(<span class="string">"whitelist"</span>, <span class="string">"the Elder"</span>)</span><br></pre></td></tr></table></figure><p>判断元素是否在集合中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isMember, err := client.SIsMember(<span class="string">"blacklist"</span>, <span class="string">"Bush"</span>).Result()</span><br></pre></td></tr></table></figure><p>求交集, 即既在黑名单中, 又在白名单中的元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names, err := client.SInter(<span class="string">"blacklist"</span>, <span class="string">"whitelist"</span>).Result()</span><br></pre></td></tr></table></figure><p>获取指定集合的所有元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all, err := client.SMembers(<span class="string">"blacklist"</span>).Result()</span><br></pre></td></tr></table></figure><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>向名称为 user_xys 的 hash 中添加元素 name</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.HSet(<span class="string">"user_xys"</span>, <span class="string">"name"</span>, <span class="string">"xys"</span>)</span><br></pre></td></tr></table></figure><p>批量地向名称为 user_test 的 hash 中添加元素 name 和 age</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.HMSet(<span class="string">"user_test"</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>: <span class="string">"test"</span>, <span class="string">"age"</span>:<span class="string">"20"</span>&#125;)</span><br></pre></td></tr></table></figure><p>单独获取名为 user_test 的 age 字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age, err := client.HGet(<span class="string">"user_test"</span>, <span class="string">"age"</span>).Result()</span><br></pre></td></tr></table></figure><p>批量获取名为 user_test 的 hash 中的指定字段的值.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fields, err := client.HMGet(<span class="string">"user_test"</span>, <span class="string">"name"</span>, <span class="string">"age"</span>).Result()</span><br></pre></td></tr></table></figure><p>获取名为 user_xys 的 hash 中的字段个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length, err := client.HLen(<span class="string">"user_xys"</span>).Result()</span><br></pre></td></tr></table></figure><p>删除名为 user_test 的 age 字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.HDel(<span class="string">"user_test"</span>, <span class="string">"age"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于&lt;code&gt;redis&lt;/code&gt;的学习,感谢&lt;a href=&quot;http://www.runoob.com/redis/redis-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程&lt;/a&gt;提供的优秀资料&lt;br&gt;随着学习的深入,此文章持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://zhaohang.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://zhaohang.site/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>supervisor进程管理工具</title>
    <link href="http://zhaohang.site/2018/01/08/supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://zhaohang.site/2018/01/08/supervisor进程管理工具/</id>
    <published>2018-01-08T03:17:25.000Z</published>
    <updated>2018-06-13T01:41:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>我平时写 node 小工具的进程管理工具都是<code>pm2</code>,但公司内部使用<code>supervisor</code>,所以也来了解学习一下~~~</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> supervisor</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Supervisor 相当强大，提供了很丰富的功能，不过我们可能只需要用到其中一小部分。安装完成之后，可以编写配置文件，来满足自己的需求。为了方便，我们把配置分成两部分：supervisord（supervisor 是一个 C/S 模型的程序，这是 server 端，对应的有 client 端：supervisorctl）和应用程序（即我们要管理的程序）。</p><p>首先来看 supervisord 的配置文件。安装完 supervisor 之后，可以运行 echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span>_supervisord_conf &gt; <span class="string">/etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><p>去除里面大部分注释和“不相关”的部分，我们可以先看这些配置：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ; socket 文件的 mode，默认是 0700</span><br><span class="line"><span class="section">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</span></span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</span><br><span class="line"><span class="section">;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</span></span><br><span class="line">;username=user              ; 登录管理后台的用户名</span><br><span class="line">;password=123               ; 登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</span><br><span class="line">logfile_backups=10           ; 日志文件保留备份数量默认 10</span><br><span class="line">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ; pid 文件</span><br><span class="line">nodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line"><span class="section">[rpcinterface:supervisor]</span></span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line"><span class="section">;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</span></span><br><span class="line"></span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[<span class="keyword">include</span>]</span><br><span class="line">files = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini</span><br></pre></td></tr></table></figure><p>我们把上面这部分配置保存到 /etc/supervisord.conf（或其他任意有权限访问的文件），然后启动 supervisord（通过 -c 选项指定配置文件路径，如果不指定会按照这个顺序查找配置文件：$CWD/supervisord.conf, $CWD/etc/supervisord.conf, /etc/supervisord.conf）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c <span class="regexp">/etc/</span>supervisord.conf</span><br></pre></td></tr></table></figure><p>查看 supervisord 是否在运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> aux | <span class="keyword">grep</span> supervisord</span><br></pre></td></tr></table></figure><p>program 配置<br>上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。这些配置可以都写到 supervisord.conf 文件里，如果应用程序很多，最好通过 include 的方式把不同的程序（组）写到不同的配置文件里。</p><p>为了举例，我们新建一个目录 /etc/supervisor/ 用于存放这些配置文件，相应的，把 /etc/supervisord.conf 里 include 部分的的配置修改一下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">include</span>]</span><br><span class="line">files = /etc/supervisor/*.conf</span><br><span class="line">假设有个用 Flask 开发的用户系统 usercenter, 生产环境使用 gunicorn 运行。项目代码位于 /home/leon/projects/usercenter，WSGI 对象位于 wsgi.py。在命令行启动的方式是这样的：</span><br><span class="line"></span><br><span class="line">cd /home/leon/projects/usercenter</span><br><span class="line">gunicorn -w 8 -b 0.0.0.0:17510 wsgi:app</span><br><span class="line">对应的配置文件可能是：</span><br><span class="line"></span><br><span class="line"><span class="section">[program:usercenter]</span></span><br><span class="line">directory = /home/leon/projects/usercenter ; 程序的启动目录</span><br><span class="line">command = gunicorn -w 8 -b 0.0.0.0:17510 wsgi:app  ; 启动命令</span><br><span class="line">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true   ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class="line">user = leon          ; 用哪个用户启动</span><br><span class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile = /data/logs/usercenter_stdout.log</span><br></pre></td></tr></table></figure><p>其中 [program:usercenter] 中的 usercenter 是应用程序的唯一标识，不能重复。对该程序的所有操作（start, restart 等）都通过名字来实现。</p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p>Supervisord 安装完成后有两个可用的命令行 supervisor 和 supervisorctl，命令使用解释如下：</p><ul><li>supervisord，初始启动 Supervisord，启动、管理配置中设置的进程。</li><li>supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx 为[program:blogdemon]里配置的值，这个示例就是 blogdemon。</li><li>supervisorctl start programxxx，启动某个进程</li><li>supervisorctl restart programxxx，重启某个进程</li><li>supervisorctl stop all，停止全部进程，注：start、restart、stop 都不会载入最新的配置文件。</li><li>supervisorctl reload，载入最新的配置文件，并按新的配置启动、管理所有进程。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我平时写 node 小工具的进程管理工具都是&lt;code&gt;pm2&lt;/code&gt;,但公司内部使用&lt;code&gt;supervisor&lt;/code&gt;,所以也来了解学习一下~~~&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhaohang.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="variety" scheme="http://zhaohang.site/tags/variety/"/>
    
  </entry>
  
  <entry>
    <title>jQuery与lodash($|_)</title>
    <link href="http://zhaohang.site/2017/12/23/jQuery%E4%B8%8Elodash($%7C_)/"/>
    <id>http://zhaohang.site/2017/12/23/jQuery与lodash($|_)/</id>
    <published>2017-12-23T10:37:57.000Z</published>
    <updated>2018-06-13T02:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近写了个游览器插件,用于加载网页时自动给图片添加一个下载按钮,没有搞得太复杂,用 jq 和 lodash 搞定了,所以回顾一下常用操作~~~</p><a id="more"></a><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a><strong>jQuery</strong></h3><blockquote><p>jQuery 是一个非常经典的 js 库 $是表达符号</p></blockquote><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><table><thead><tr><th style="text-align:left">选择器</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">\$( <code>&#39;.class&#39;</code> )</td><td style="text-align:left">匹配所有 符合<a href="#选择器">元素</a> 返回 数组</td></tr><tr><td style="text-align:left">\$( <code>&#39; #id, .class ,div &#39;</code>)</td><td style="text-align:left">组选择</td></tr><tr><td style="text-align:left">.find( <code>&#39;#id&#39;</code> )</td><td style="text-align:left">向下查找子元素</td></tr><tr><td style="text-align:left">.closest( <code>&#39;.class&#39;</code> )</td><td style="text-align:left">查找 父元素（一直向上 找到为止）</td></tr><tr><td style="text-align:left">.parent()</td><td style="text-align:left">查找 父元素</td></tr><tr><td style="text-align:left">.next()</td><td style="text-align:left">下一个元素</td></tr><tr><td style="text-align:left">.prev()</td><td style="text-align:left">上一个元素</td></tr><tr><td style="text-align:left">.children()</td><td style="text-align:left">查找 子元素</td></tr><tr><td style="text-align:left">.parent().children()</td><td style="text-align:left">查找 父子元素</td></tr><tr><td style="text-align:left">.siblings()</td><td style="text-align:left">查找 父子元素（除过 自己）</td></tr><tr><td style="text-align:left">.first()</td><td style="text-align:left">第一个元素</td></tr><tr><td style="text-align:left">.last()</td><td style="text-align:left">最后一个元素</td></tr><tr><td style="text-align:left">.slice( , )</td><td style="text-align:left">同数组 slice()方法一致</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'ul.lang li'</span>) <span class="comment">// 选出JavaScript、Python和Lua 3个节点</span></span><br><span class="line">$(<span class="string">'ul.lang li:first-child'</span>) <span class="comment">// 仅选出JavaScript</span></span><br><span class="line">$(<span class="string">'ul.lang li:last-child'</span>) <span class="comment">// 仅选出Lua</span></span><br><span class="line">$(<span class="string">'ul.lang li:nth-child(2)'</span>) <span class="comment">// 选出第N个元素，N从1开始</span></span><br><span class="line">$(<span class="string">'ul.lang li:nth-child(even)'</span>) <span class="comment">// 选出序号为偶数的元素</span></span><br><span class="line">$(<span class="string">'ul.lang li:nth-child(odd)'</span>) <span class="comment">// 选出序号为奇数的元素</span></span><br></pre></td></tr></table></figure><hr><h4 id="jQuery-对象-DOM-操作"><a href="#jQuery-对象-DOM-操作" class="headerlink" title="jQuery 对象 DOM 操作"></a><strong>jQuery 对象 DOM 操作</strong></h4><table><thead><tr><th style="text-align:left">dom 操作修改</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">.text( )</td><td style="text-align:left">取值文本（有参数则为赋值）</td></tr><tr><td style="text-align:left">.html( )</td><td style="text-align:left">取值字符串（有参数则为赋值)</td></tr><tr><td style="text-align:left">.show()</td><td style="text-align:left">显示</td></tr><tr><td style="text-align:left">.hide()</td><td style="text-align:left">隐藏</td></tr><tr><td style="text-align:left">.toggle()</td><td style="text-align:left">开关</td></tr><tr><td style="text-align:left">.hasClass( )</td><td style="text-align:left">查询 class 返回 ture 或 false</td></tr><tr><td style="text-align:left">.addClass(‘className’)</td><td style="text-align:left">添加 class</td></tr><tr><td style="text-align:left">.removeClass( )</td><td style="text-align:left">删除 class</td></tr><tr><td style="text-align:left">.removeClass( )</td><td style="text-align:left">删除 class</td></tr><tr><td style="text-align:left">.data( )</td><td style="text-align:left">获取 data 属性</td></tr><tr><td style="text-align:left">.width()//.height()</td><td style="text-align:left">查询宽高,填写参数是设置宽高</td></tr><tr><td style="text-align:left">.attr( , )</td><td style="text-align:left">第一个参数属性名,查询(有第二个参数赋值)</td></tr><tr><td style="text-align:left">.removeAttr( )</td><td style="text-align:left">填入参数移除属性</td></tr><tr><td style="text-align:left">.prop()</td><td style="text-align:left">与 attr 类似,但是处理 checked 等 bool 属性</td></tr><tr><td style="text-align:left">.val()</td><td style="text-align:left">表单元素专属获取和设置(填参数)对应的 value 属性</td></tr><tr><td style="text-align:left">.append( )</td><td style="text-align:left">最末尾</td></tr><tr><td style="text-align:left">.prepend( )</td><td style="text-align:left">最开头</td></tr><tr><td style="text-align:left">.before( )</td><td style="text-align:left">同级节点 之前</td></tr><tr><td style="text-align:left">.after( )</td><td style="text-align:left">同级节点 之后</td></tr><tr><td style="text-align:left">.remove()</td><td style="text-align:left">删除</td></tr><tr><td style="text-align:left">.empty()</td><td style="text-align:left">删除（除过 自己)</td></tr></tbody></table><p>####<strong>jQuery 对象 css 操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery对象有“批量操作”的特点可调用css对象方便修改对象的CSS</span></span><br><span class="line">$(<span class="string">'#test'</span>)</span><br><span class="line">    .css(<span class="string">'background-color'</span>, <span class="string">'black'</span>)</span><br><span class="line">    .css(<span class="string">'color'</span>, <span class="string">'red'</span>)</span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">'#test-div'</span>)</span><br><span class="line">div.css(<span class="string">'color'</span>) <span class="comment">// '#000033', 获取CSS属性</span></span><br><span class="line">div.css(<span class="string">'color'</span>, <span class="string">'#336699'</span>) <span class="comment">// 设置CSS属性</span></span><br><span class="line">div.css(<span class="string">'color'</span>, <span class="string">''</span>) <span class="comment">// 清除CSS属性</span></span><br><span class="line"><span class="comment">//css()方法将作用于DOM节点的style属性，具有最高优先级</span></span><br></pre></td></tr></table></figure><hr><h4 id="jQ-动画"><a href="#jQ-动画" class="headerlink" title="jQ 动画"></a><strong>jQ</strong> 动画</h4><table><thead><tr><th style="text-align:left">动画操作</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">.show(‘slow’)</td><td style="text-align:left">显示(参数时间 1000 或者时间描述)</td></tr><tr><td style="text-align:left">.hide(3000)</td><td style="text-align:left">同上</td></tr><tr><td style="text-align:left">.toggle()</td><td style="text-align:left">开关</td></tr><tr><td style="text-align:left">.slideUp()</td><td style="text-align:left">窗帘效果的关(参数同上)</td></tr><tr><td style="text-align:left">.slideDown()</td><td style="text-align:left">….开</td></tr><tr><td style="text-align:left">.slideToggle()</td><td style="text-align:left">开关</td></tr><tr><td style="text-align:left">.fadeOut()</td><td style="text-align:left">淡入(参数同上)</td></tr><tr><td style="text-align:left">.fadeIn()</td><td style="text-align:left">淡出</td></tr><tr><td style="text-align:left">.fadeToggle()</td><td style="text-align:left">淡入淡出</td></tr><tr><td style="text-align:left">.animate({opacity: 0.25,width: ‘256px’},3000,callback)</td><td style="text-align:left">自定义动画,三个参数,1 变化对象,2 时间,3 动画结束回调函数</td></tr><tr><td style="text-align:left">.delay(1000)</td><td style="text-align:left">暂停动画</td></tr><tr><td style="text-align:left">.data(‘id’)</td><td style="text-align:left"><code>&lt;div data-id=&#39;101&#39;&gt;</code>取 data 值</td></tr></tbody></table><hr><h4 id="jQ-事件绑定"><a href="#jQ-事件绑定" class="headerlink" title="jQ 事件绑定"></a><strong>jQ</strong> 事件绑定</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.click(hello); <span class="comment">// 绑定事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10秒钟后解除绑定:</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    a.off(<span class="string">'click'</span>, hello);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line">使用off(<span class="string">'click'</span>)一次性移除已绑定的click事件的所有处理函数</span><br><span class="line">无参数调用off()一次性移除已绑定的所有类型的事件处理函数</span><br><span class="line"></span><br><span class="line">a.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 两者等价(常用下一种)</span></span><br><span class="line">a.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//事件委托用法</span></span><br><span class="line">$( <span class="string">'#id-div-cont'</span> ).on( <span class="string">'click'</span>, <span class="string">'.del'</span>, Event )</span><br><span class="line"><span class="comment">// 绑定 父元素 #id-div-cont 监听.del(如果点击的是.del则发生)</span></span><br></pre></td></tr></table></figure><hr><h4 id="jQ-Ajax"><a href="#jQ-Ajax" class="headerlink" title="jQ Ajax"></a><strong>jQ</strong> Ajax</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = &#123;</span><br><span class="line">    url: <span class="string">'/uploads/tags.json'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(r)</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$.ajax(request)</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础的jq ajax方法</span></span><br><span class="line">$.ajax(&#123;<span class="attr">name</span>:value, <span class="attr">name</span>:value, ... &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jq get方法</span></span><br><span class="line">$.get(<span class="string">"test.php"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//jq post 方法</span></span><br><span class="line">$.post(URL,&#123;<span class="attr">name</span>:<span class="string">'小明'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data,status,xhr</span>),<span class="title">dataType</span>)</span></span><br></pre></td></tr></table></figure><hr><h3 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a><strong>lodash</strong></h3><blockquote><p>lodash 是一个非常实用的 js 工具库 _是表达符号</p></blockquote><h3 id="lodash-函数"><a href="#lodash-函数" class="headerlink" title="lodash 函数"></a><strong>lodash</strong> 函数</h3><p><strong>each</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_.each(list(数组或对象), (v, k) =&gt; &#123;</span><br><span class="line">    <span class="comment">// each 方法的两个参数</span></span><br><span class="line">    <span class="comment">// 如果 list 是 列表，那么 v 和 k 分别是指 list 的 element/index</span></span><br><span class="line">    <span class="comment">// 如果 list 是 对象（字典），那么 v 和 k 分别是指 object 的 value/key</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'element and index'</span>, v, k)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>map</strong> (旧数组/对象生成一个新数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list2(新数组) = _.map(list1(旧数组), (v, k) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> r = v * v</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list2'</span>, list2)</span><br></pre></td></tr></table></figure><p><strong>filter</strong> (遍历数组/对象，返回符合判断函数中的元素)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u(符合条件的新数组) =</span><br><span class="line">_.filter(us(数组可包含对象), (e) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> b = e.score &gt; <span class="number">70</span>(bool值)</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'filter u'</span>, u)</span><br></pre></td></tr></table></figure><p><strong>orderBy</strong> (按照条件排序,先按 score 升序,如果有 score 一样的,再按 name 降序)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = _.orderBy(us, [<span class="string">'score'</span>, <span class="string">'name'</span>], [<span class="string">'asc'</span>(升序), <span class="string">'desc'</span>(降序)])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'order by users'</span>, users)</span><br></pre></td></tr></table></figure><p><strong>flatten</strong> (减少一层嵌套数组(只减少一层),也就是可以将二维数组拍成一维数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l = [<span class="number">1</span>, [<span class="number">2</span>], [<span class="number">3</span>, [<span class="number">4</span>]], [<span class="number">5</span>, [<span class="number">6</span>], [<span class="number">7</span>]]]</span><br><span class="line"><span class="keyword">var</span> f = _.flatten(l)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'flatten result'</span>, f)</span><br></pre></td></tr></table></figure><p><strong>compact</strong> 剔除数组中的假值元素(js 中假值元素分别为<code>false null 0 NaN &#39;&#39; undefined</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = _.compact(l(包含假值元素的数组))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'compact result'</span>, result) ** (isEqual ** isEqual比较两个对象或者数组是否相等)</span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    key: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">    key: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = _.isEqual(o1, o2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'isEqual result'</span>, result)</span><br></pre></td></tr></table></figure><p><strong>result</strong> (获取嵌套对象的值)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    k1: &#123;</span><br><span class="line">        k2: &#123;</span><br><span class="line">            k3: &#123;</span><br><span class="line">                k4: <span class="string">'value in nested dict'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="string">'k1.k2.k3.k4'</span></span><br><span class="line"><span class="keyword">var</span> result = _.result(o, path)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result nested result'</span>, result)</span><br></pre></td></tr></table></figure><p><strong>cloneDeep</strong> 深拷贝(改变赋值不影响原函数的拷贝)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: [<span class="number">1</span>],</span><br><span class="line">    b: [<span class="number">2</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> deep = _.cloneDeep(o)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'deep'</span>, deep)</span><br></pre></td></tr></table></figure><p><strong>random</strong> (返回给定范围的随机值)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>      <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">    <span class="comment">// 返回 a 和 b 之间的一个整数</span></span><br><span class="line">    <span class="keyword">var</span> r1 = _.random(a, b)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'random r1'</span>, r1)</span><br><span class="line"><span class="comment">//如果指定第三个参数为 true，这个参数的意思是指 floating ,那么返回的就是一个浮点数</span></span><br><span class="line">    <span class="keyword">var</span> r2 = _.random(a, b, <span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'random r2'</span>, r2(浮点数))</span><br></pre></td></tr></table></figure><p><strong>shuffle</strong> (返回打乱顺序后的数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> s = _.shuffle(l)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'shuffle l'</span>, s)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写了个游览器插件,用于加载网页时自动给图片添加一个下载按钮,没有搞得太复杂,用 jq 和 lodash 搞定了,所以回顾一下常用操作~~~&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://zhaohang.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习</title>
    <link href="http://zhaohang.site/2017/12/09/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhaohang.site/2017/12/09/go语言学习/</id>
    <published>2017-12-09T09:37:34.000Z</published>
    <updated>2018-06-13T02:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>go</code>的学习,感谢<a href="https://gobyexample.xgwang.me/" target="_blank" rel="noopener">Go By Example</a>、<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="noopener">go 网络编程</a>与<a href="http://books.studygolang.com/The-Golang-Standard-Library-by-Example/" target="_blank" rel="noopener">go 语言标准库</a>,随着学习的深入,此文章持续更新…</p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量  </span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">var</span> b, c <span class="keyword">int</span> =  <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="comment">// 只允许函数中这样声明</span></span><br><span class="line">f := <span class="string">"world"</span></span><br><span class="line"><span class="comment">// 常量(只允许布尔型、数字型（整数型、浮点型和复数）和字符串型)</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="string">"hello, world"</span></span><br><span class="line"><span class="comment">// 同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明</span></span><br><span class="line"><span class="comment">// 关键字iota，这个关键字用来声明enum的时候采用，它默认开始值是0，const中每增加一行加1</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span>  <span class="comment">//0</span></span><br><span class="line">    b = <span class="literal">iota</span>  <span class="comment">//1</span></span><br><span class="line">    c = <span class="literal">iota</span>  <span class="comment">//2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> v = <span class="literal">iota</span> <span class="comment">// 每遇到一个const关键字，iota就会重置，此时v == 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    h, i, j = <span class="literal">iota</span>, <span class="literal">iota</span>, <span class="literal">iota</span> <span class="comment">//h=0,i=0,j=0 iota在同一行值相同</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明了一个二维数组，该数组以两个数组作为元素，其中每个数组中又有4个int类型的元素</span></span><br><span class="line">doubleArray := [<span class="number">2</span>][<span class="number">4</span>]<span class="keyword">int</span>&#123;[<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的声明可以简化，直接忽略内部的类型</span></span><br><span class="line">easyArray := [<span class="number">2</span>][<span class="number">4</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>go</code>语言中字符串是不可变的,想改变可以这样实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"hello"</span></span><br><span class="line">c := []<span class="keyword">byte</span>(s)  <span class="comment">// 将字符串 s 转换为 []byte 类型</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="string">'c'</span></span><br><span class="line">s2 := <span class="keyword">string</span>(c)  <span class="comment">// 再转换回 string 类型</span></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, s2)</span><br></pre></td></tr></table></figure><p>这样修改,字符串虽不能更改，但可进行切片操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"hello"</span></span><br><span class="line">s = <span class="string">"c"</span> + s[<span class="number">1</span>:]</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, s)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>strings.Contains(&quot;test&quot;, &quot;es&quot;)</code></td><td style="text-align:left">是否包含:<code>true</code></td></tr><tr><td style="text-align:left"><code>strings.Count(&quot;test&quot;, &quot;t&quot;)</code></td><td style="text-align:left">包含数量:<code>2</code></td></tr><tr><td style="text-align:left"><code>strings.HasPrefix(&quot;test&quot;, &quot;te&quot;)</code></td><td style="text-align:left">前缀:<code>true</code></td></tr><tr><td style="text-align:left"><code>strings.HasSuffix(&quot;test&quot;, &quot;st&quot;)</code></td><td style="text-align:left">后缀:<code>true</code></td></tr><tr><td style="text-align:left"><code>strings.Index(&quot;test&quot;, &quot;e&quot;)</code></td><td style="text-align:left">index:<code>1</code></td></tr><tr><td style="text-align:left"><code>strings.Join([]string{&quot;a&quot;, &quot;b&quot;, &quot;b&quot;}, &quot;-&quot;)</code></td><td style="text-align:left">join:<code>a-b-b</code></td></tr><tr><td style="text-align:left"><code>strings.Repeat(&quot;a&quot;, 5)</code></td><td style="text-align:left">复制:<code>aaaaa</code></td></tr><tr><td style="text-align:left"><code>strings.Replace(&quot;foo&quot;, &quot;o&quot;, &quot;0&quot;, -1)</code></td><td style="text-align:left">替换:<code>f00</code></td></tr><tr><td style="text-align:left"><code>strings.Replace(&quot;foo&quot;, &quot;o&quot;, &quot;0&quot;, 1)</code></td><td style="text-align:left">替换 1 次:<code>f0o</code></td></tr><tr><td style="text-align:left"><code>strings.Split(&quot;a-b-c-d-e&quot;, &quot;-&quot;)</code></td><td style="text-align:left">split:<code>[a b c d e]</code></td></tr><tr><td style="text-align:left"><code>strings.ToLower(&quot;TEST&quot;)</code></td><td style="text-align:left">转小写:<code>test</code></td></tr><tr><td style="text-align:left"><code>strings.ToUpper(&quot;test&quot;)</code></td><td style="text-align:left">转大写:<code>TEST</code></td></tr><tr><td style="text-align:left"><code>len(&quot;hello&quot;)</code></td><td style="text-align:left">长度:<code>5</code></td></tr><tr><td style="text-align:left"><code>&quot;hello&quot;[1]</code></td><td style="text-align:left">索引取值:<code>101</code></td></tr></tbody></table><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">// fmt.Printf  通过 os.Stdout打印格式化的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Sprintf 格式化并返回一个字符串而不带任何输出</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"a %s"</span>, <span class="string">"string"</span>)</span><br><span class="line">fmt.Println(s)   <span class="comment">// a string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Fprintf 格式化并输出到 io.Writers而不是 os.Stdout</span></span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">"an %s\n"</span>, <span class="string">"error"</span>)  <span class="comment">// an error</span></span><br><span class="line"></span><br><span class="line">p := point&#123;x:<span class="number">1</span>, y:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>fmt.Printf(&quot;%v\n&quot;, p)</code></td><td style="text-align:left">打印结构体<code>{1 2}</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%+v\n&quot;, p)</code></td><td style="text-align:left">打印结构体的字段名<code>{x:1 y:2}</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%#v\n&quot;, p)</code></td><td style="text-align:left">打印 Go 语法表示<code>main.point{x:1, y:2}</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%T\n&quot;, p)</code></td><td style="text-align:left">打印值的类型<code>main.point</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%t\n&quot;, true)</code></td><td style="text-align:left">格式化布尔值<code>true</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%d\n&quot;, 123)</code></td><td style="text-align:left">整数标准的十进制格式化<code>123</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%b\n&quot;, 14)</code></td><td style="text-align:left">整数二进制<code>1110</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%c\n&quot;, 33)</code></td><td style="text-align:left">整数输出给定整数的对应字符<code>!</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%x\n&quot;, 456)</code></td><td style="text-align:left">整数十六进制<code>1c8</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%f\n&quot;, 78.9)</code></td><td style="text-align:left">浮点数十进制格式化<code>78.900000</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%e\n&quot;, 123400000.0)</code></td><td style="text-align:left">浮点型格式化科学技科学记数法<code>1.234000e+08</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%E\n&quot;, 123400000.0)</code></td><td style="text-align:left">浮点型格式化科学技科学记数法<code>1.234000E+08</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%s\n&quot;, &quot;\&quot;string\&quot;&quot;)</code></td><td style="text-align:left">基本的字符串输出<code>&quot;string&quot;</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%q\n&quot;, &quot;\&quot;string\&quot;&quot;)</code></td><td style="text-align:left">Go 源代码中那样带有双引号的输出<code>&quot;\&quot;string\&quot;&quot;</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%x\n&quot;, &quot;hex this&quot;)</code></td><td style="text-align:left">base-16 编码的字符串<code>6865782074686973</code></td></tr><tr><td style="text-align:left"><code>fmt.Printf(&quot;%p\n&quot;, &amp;p)</code></td><td style="text-align:left">输出一个指针的值<code>0x42135100</code></td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当输出数字的时候，你将经常想要控制输出结果的宽度和精度，可以使用在 % 后面使用数字来控制输出宽度。默认结果使用右对齐并且通过空格来填充空白部分。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%6d|%6d|\n"</span>, <span class="number">12</span>, <span class="number">345</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也可以指定浮点型的输出宽度，同时也可以通过 宽度.精度 的语法来指定输出的精度。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%6.2f|%6.2f|\n"</span>, <span class="number">1.2</span>, <span class="number">3.45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要左对齐，使用 - 标志。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%-6.2f|%-6.2f|\n"</span>, <span class="number">1.2</span>, <span class="number">3.45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也许也想控制字符串输出时的宽度，特别是要确保他们在类表格输出时的对齐。这是基本的右对齐宽度表示。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%6s|%6s|\n"</span>, <span class="string">"foo"</span>, <span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要左对齐，和数字一样，使用 - 标志。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%-6s|%-6s|\n"</span>, <span class="string">"foo"</span>, <span class="string">"b"</span>)</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt;= <span class="number">3</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经典的初始化/条件/后续形式 for 循环。 同样也支持跳过循环</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">7</span>; j &lt;= <span class="number">9</span>; j++ &#123;</span><br><span class="line">    fmt.Println(j)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不带条件的 for 循环将一直执行，直到在循环体内使用了 break 或者 return 来跳出循环。</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"loop"</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-else"><a href="#if-else" class="headerlink" title="if/else"></a>if/else</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"7 is even"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"7 is odd"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在条件语句之前可以有一个语句；任何在这里声明的变量都可以在所有的条件分支中使用。</span></span><br><span class="line"><span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">"is negative"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">"has 1 digit"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(num, <span class="string">"has multiple digits"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个 case 语句中，你可以使用逗号来分隔多个表达式。在这个例子中，我们很好的使用了可选的default 分支。</span></span><br><span class="line"><span class="keyword">switch</span> time.Now().Weekday() &#123;</span><br><span class="line"><span class="keyword">case</span> time.Saturday, time.Sunday:</span><br><span class="line">    fmt.Println(<span class="string">"it's the weekend"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">"it's a weekday"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不带表达式的 switch 是实现 if/else 逻辑的另一种方式。这里展示了 case 表达式是如何使用非常量的。</span></span><br><span class="line">t := time.Now()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">    fmt.Println(<span class="string">"it's before noon"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">"it's after noon"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我们创建了一个数组 a 来存放刚好 5 个 int。元素的类型和长度都是数组类型的一部分。数组默认是零值的，对于 int 数组来说也就是 0。</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(<span class="string">"emp:"</span>, a)</span><br><span class="line"><span class="comment">// 我们可以使用 array[index] = value 语法来设置数组指定位置的值，或者用 array[index] 得到值。</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">"set:"</span>, a)</span><br><span class="line">fmt.Println(<span class="string">"get:"</span>, a[<span class="number">4</span>])</span><br><span class="line"><span class="comment">// 使用内置函数 len 返回数组的长度</span></span><br><span class="line">fmt.Println(<span class="string">"len:"</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="comment">// 使用这个语法在一行内初始化一个数组</span></span><br><span class="line">b := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"dcl:"</span>, b)</span><br><span class="line"><span class="comment">// 数组的存储类型是单一的，但是你可以组合这些数据来构造多维的数据结构。</span></span><br><span class="line"><span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">        twoD[i][j] = i + j</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"2d: "</span>, twoD)</span><br></pre></td></tr></table></figure><h3 id="切片slice"><a href="#切片slice" class="headerlink" title="切片slice"></a>切片<code>slice</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不像数组，slice 的类型仅由它所包含的元素决定（不像数组中还需要元素的个数）。要创建一个长度非零的空slice，需要使用内建的方法 make。这里我们创建了一个长度为3的 string 类型 slice（初始化为零值）。</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">"emp:"</span>, s)</span><br><span class="line"><span class="comment">// 我们可以和数组一样设置和得到值</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">"a"</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">"b"</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="string">"c"</span></span><br><span class="line">fmt.Println(<span class="string">"set:"</span>, s)</span><br><span class="line">fmt.Println(<span class="string">"get:"</span>, s[<span class="number">2</span>])</span><br><span class="line"><span class="comment">// 如你所料，len 返回 slice 的长度</span></span><br><span class="line">fmt.Println(<span class="string">"len:"</span>, <span class="built_in">len</span>(s))</span><br><span class="line"><span class="comment">// 作为基本操作的补充，slice 支持比数组更多的操作。其中一个是内建的 append，它返回一个包含了一个或者多个新值的 slice。注意我们接受返回由 append返回的新的 slice 值。</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"d"</span>)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"e"</span>, <span class="string">"f"</span>)</span><br><span class="line">fmt.Println(<span class="string">"apd:"</span>, s)</span><br><span class="line"><span class="comment">// Slice 也可以被 copy。这里我们创建一个空的和 s 有相同长度的 slice c，并且将 s 复制给 c。</span></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(s))</span><br><span class="line"><span class="built_in">copy</span>(c, s)</span><br><span class="line">fmt.Println(<span class="string">"cpy:"</span>, c)</span><br><span class="line"><span class="comment">// Slice 支持通过 slice[low:high] 语法进行“切片”操作。例如，这里得到一个包含元素 s[2], s[3],s[4] 的 slice。</span></span><br><span class="line">l := s[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Println(<span class="string">"sl1:"</span>, l)</span><br><span class="line"><span class="comment">// 这个 slice 从 s[0] 到（但是包含）s[5]。</span></span><br><span class="line">l = s[:<span class="number">5</span>]</span><br><span class="line">fmt.Println(<span class="string">"sl2:"</span>, l)</span><br><span class="line"><span class="comment">// 这个 slice 从（包含）s[2] 到 slice 的后一个值。</span></span><br><span class="line">l = s[<span class="number">2</span>:]</span><br><span class="line">fmt.Println(<span class="string">"sl3:"</span>, l)</span><br><span class="line"><span class="comment">// 我们可以在一行代码中声明并初始化一个 slice 变量。</span></span><br><span class="line">t := []<span class="keyword">string</span>&#123;<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"dcl:"</span>, t)</span><br><span class="line"><span class="comment">// Slice 可以组成多维数据结构。内部的 slice 长度可以不同，这和多位数组不同。</span></span><br><span class="line">twoD := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">    innerLen := i + <span class="number">1</span></span><br><span class="line">    twoD[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, innerLen)</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; innerLen; j++ &#123;</span><br><span class="line">        twoD[i][j] = i + j</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"2d: "</span>, twoD)</span><br></pre></td></tr></table></figure><h3 id="关系数组map"><a href="#关系数组map" class="headerlink" title="关系数组map"></a>关系数组<code>map</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要创建一个空 map，需要使用内建的 make:make(map[key-type]val-type).</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="comment">// 使用典型的 make[key] = val 语法来设置键值对。</span></span><br><span class="line">m[<span class="string">"k1"</span>] = <span class="number">7</span></span><br><span class="line">m[<span class="string">"k2"</span>] = <span class="number">13</span></span><br><span class="line"><span class="comment">// 使用例如 Println 来打印一个 map 将会输出所有的键值对。</span></span><br><span class="line">fmt.Println(<span class="string">"map:"</span>, m)</span><br><span class="line"><span class="comment">// 使用 name[key] 来获取一个键的值</span></span><br><span class="line">v1 := m[<span class="string">"k1"</span>]</span><br><span class="line">fmt.Println(<span class="string">"v1: "</span>, v1)</span><br><span class="line"><span class="comment">// 当对一个 map 调用内建的 len 时，返回的是键值对数目</span></span><br><span class="line">fmt.Println(<span class="string">"len:"</span>, <span class="built_in">len</span>(m))</span><br><span class="line"><span class="comment">// 内建的 delete 可以从一个 map 中移除键值对</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"k2"</span>)</span><br><span class="line">fmt.Println(<span class="string">"map:"</span>, m)</span><br><span class="line"><span class="comment">// 当从一个 map 中取值时，可选的第二返回值指示这个键是在这个 map 中。这可以用来消除键不存在和键有零值，像 0 或者 "" 而产生的歧义。</span></span><br><span class="line">num, prs := m[<span class="string">"k1"</span>]</span><br><span class="line">fmt.Println(<span class="string">"prs:"</span>, prs, num)</span><br><span class="line"><span class="comment">// 你也可以通过这个语法在同一行申明和初始化一个新的map。</span></span><br><span class="line">n := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"foo"</span>: <span class="number">1</span>, <span class="string">"bar"</span>: <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"map:"</span>, n)</span><br></pre></td></tr></table></figure><h3 id="遍历Rang"><a href="#遍历Rang" class="headerlink" title="遍历Rang"></a>遍历<code>Rang</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我们使用 range 来统计一个 slice 的元素个数。数组也可以采用这种方法。</span></span><br><span class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    sum += num</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"sum:"</span>, sum)</span><br><span class="line"><span class="comment">// range 在数组和 slice 中都同样提供每个项的索引和值。上面我们不需要索引，所以我们使用 空值定义符_ 来忽略它。有时候我们实际上是需要这个索引的。</span></span><br><span class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">3</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"index:"</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// range 在 map 中迭代键值对。</span></span><br><span class="line">kvs := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"a"</span>: <span class="string">"apple"</span>, <span class="string">"b"</span>: <span class="string">"banana"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> kvs &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s -&gt; %s\n"</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// range 在字符串中迭代 unicode 编码。第一个返回值是rune 的起始字节位置，然后第二个是 rune 自己。</span></span><br><span class="line"><span class="keyword">for</span> i, c := <span class="keyword">range</span> <span class="string">"go"</span> &#123;</span><br><span class="line">    fmt.Println(i, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 首先我们来看一下基本数据类型到 JSON 字符串的编码过程。这里是一些原子值的例子。</span></span><br><span class="line">    bolB, _ := json.Marshal(<span class="literal">true</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(bolB))</span><br><span class="line">    intB, _ := json.Marshal(<span class="number">1</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(intB))</span><br><span class="line">    fltB, _ := json.Marshal(<span class="number">2.34</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(fltB))</span><br><span class="line">    strB, _ := json.Marshal(<span class="string">"gopher"</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(strB))</span><br><span class="line">    <span class="comment">// 这里是一些切片和 map 编码成 JSON 数组和对象的例子。</span></span><br><span class="line">    slcD := []<span class="keyword">string</span>&#123;<span class="string">"apple"</span>, <span class="string">"peach"</span>, <span class="string">"pear"</span>&#125;</span><br><span class="line">    slcB, _ := json.Marshal(slcD)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(slcB))</span><br><span class="line">    mapD := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"apple"</span>: <span class="number">5</span>, <span class="string">"lettuce"</span>: <span class="number">7</span>&#125;</span><br><span class="line">    mapB, _ := json.Marshal(mapD)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(mapB))</span><br><span class="line">    <span class="comment">// JSON 包可以自动的编码你的自定义类型。编码仅输出可导出的字段，并且默认使用他们的名字作为 JSON 数据的键。</span></span><br><span class="line">    res1D := &amp;Response1&#123;</span><br><span class="line">        Page:   <span class="number">1</span>,</span><br><span class="line">        Fruits: []<span class="keyword">string</span>&#123;<span class="string">"apple"</span>, <span class="string">"peach"</span>, <span class="string">"pear"</span>&#125;&#125;</span><br><span class="line">    res1B, _ := json.Marshal(res1D)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(res1B))</span><br><span class="line">    <span class="comment">// 你可以给结构字段声明标签来自定义编码的 JSON 数据键名称。在上面 Response2 的定义可以作为这个标签这个的一个例子。</span></span><br><span class="line">    res2D := Response2&#123;</span><br><span class="line">        Page:   <span class="number">1</span>,</span><br><span class="line">        Fruits: []<span class="keyword">string</span>&#123;<span class="string">"apple"</span>, <span class="string">"peach"</span>, <span class="string">"pear"</span>&#125;&#125;</span><br><span class="line">    res2B, _ := json.Marshal(res2D)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(res2B))</span><br><span class="line">    <span class="comment">// 现在来看看解码 JSON 数据为 Go 值的过程。这里是一个普通数据结构的解码例子。</span></span><br><span class="line">    byt := []<span class="keyword">byte</span>(<span class="string">`&#123;"num":6.13,"strs":["a","b"]&#125;`</span>)</span><br><span class="line">    <span class="comment">// 我们需要提供一个 JSON 包可以存放解码数据的变量。这里的 map[string]interface&#123;&#125; 将保存一个 string 为键，值为任意值的map。</span></span><br><span class="line">    <span class="keyword">var</span> dat <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 这里就是实际的解码和相关的错误检查。</span></span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal(byt, &amp;dat); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(dat)</span><br><span class="line">    <span class="comment">// 为了使用解码 map 中的值，我们需要将他们进行适当的类型转换。例如这里我们将 num 的值转换成 float64类型。</span></span><br><span class="line">    num := dat[<span class="string">"num"</span>].(<span class="keyword">float64</span>)</span><br><span class="line">    fmt.Println(num)</span><br><span class="line">    <span class="comment">// 访问嵌套的值需要一系列的转化。</span></span><br><span class="line">    strs := dat[<span class="string">"strs"</span>].([]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">    str1 := strs[<span class="number">0</span>].(<span class="keyword">string</span>)</span><br><span class="line">    fmt.Println(str1)</span><br><span class="line">    <span class="comment">// 我们也可以解码 JSON 值到自定义类型。这个功能的好处就是可以为我们的程序带来额外的类型安全加强，并且消除在访问数据时的类型断言。</span></span><br><span class="line">    str := <span class="string">`&#123;"page": 1, "fruits": ["apple", "peach"]&#125;`</span></span><br><span class="line">    res := &amp;Response2&#123;&#125;</span><br><span class="line">    json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;res)</span><br><span class="line">    fmt.Println(res)</span><br><span class="line">    fmt.Println(res.Fruits[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 在上面的例子中，我们经常使用 byte 和 string 作为使用标准输出时数据和 JSON 表示之间的中间值。我们也可以和os.Stdout 一样，直接将 JSON 编码直接输出至 os.Writer流中，或者作为 HTTP 响应体。</span></span><br><span class="line">    enc := json.NewEncoder(os.Stdout)</span><br><span class="line">    d := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"apple"</span>: <span class="number">5</span>, <span class="string">"lettuce"</span>: <span class="number">7</span>&#125;</span><br><span class="line">    enc.Encode(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是一个函数，接受两个 int 并且以 int 返回它们的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plus</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// Go 需要明确的返回值，例如，它不会自动返回最后一个表达式的值</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 正如你期望的那样，通过 name(args) 来调用一个函数，</span></span><br><span class="line">    res := plus(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    fmt.Println(<span class="string">"1+2 ="</span>, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (int, int) 在这个函数中标志着这个函数返回 2 个 int。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">vals</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>, <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 这里我们通过多赋值 操作来使用这两个不同的返回值。</span></span><br><span class="line">    a, b := vals()</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    fmt.Println(b)</span><br><span class="line">    <span class="comment">// 如果你仅仅想返回值的一部分的话，你可以使用空白定义符 _。</span></span><br><span class="line">    _, c := vals()</span><br><span class="line">    fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变参函数"><a href="#变参函数" class="headerlink" title="变参函数"></a>变参函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数使用任意数目的 int 作为参数。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(nums ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Print(nums, <span class="string">" "</span>)</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        total += num</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(total)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 变参函数使用常规的调用方式，除了参数比较特殊。</span></span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="comment">// 如果你的 slice 已经有了多个值，想把它们作为变参使用，你要这样调用 func(slice...)。</span></span><br><span class="line">    nums := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sum(nums...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个 intSeq 函数返回另一个在 intSeq 函数体内定义的匿名函数。这个返回的函数使用闭包的方式 隐藏 变量 i。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intSeq</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们调用 intSeq 函数，将返回值（也是一个函数）赋给nextInt。这个函数的值包含了自己的值 i，这样在每次调用 nextInt 时都会更新 i 的值。</span></span><br><span class="line">    nextInt := intSeq()</span><br><span class="line">    <span class="comment">// 通过多次调用 nextInt 来看看闭包的效果。</span></span><br><span class="line">    fmt.Println(nextInt())</span><br><span class="line">    fmt.Println(nextInt())</span><br><span class="line">    fmt.Println(nextInt())</span><br><span class="line">    <span class="comment">// 为了确认这个状态对于这个特定的函数是唯一的，我们重新创建并测试一下。</span></span><br><span class="line">    newInts := intSeq()</span><br><span class="line">    fmt.Println(newInts())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// face 函数在到达 face(0) 前一直调用自身。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fact</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(fact(<span class="number">7</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们将通过两个函数：zeroval 和 zeroptr 来比较指针和值类型的不同。zeroval 有一个 int 型参数，所以使用值传递。zeroval 将从调用它的那个函数中得到一个 ival形参的拷贝。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zeroval</span><span class="params">(ival <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    ival = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zeroptr 有一和上面不同的 *int 参数，意味着它用了一个 int指针。函数体内的 *iptr 接着解引用 这个指针，从它内存地址得到这个地址对应的当前值。对一个解引用的指针赋值将会改变这个指针引用的真实地址的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zeroptr</span><span class="params">(iptr *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    *iptr = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    fmt.Println(<span class="string">"initial:"</span>, i)</span><br><span class="line">    zeroval(i)</span><br><span class="line">    fmt.Println(<span class="string">"zeroval:"</span>, i)</span><br><span class="line">    <span class="comment">// 通过 &amp;i 语法来取得 i 的内存地址，例如一个变量i 的指针。</span></span><br><span class="line">    zeroptr(&amp;i)</span><br><span class="line">    fmt.Println(<span class="string">"zeroptr:"</span>, i)</span><br><span class="line">    <span class="comment">// 指针也是可以被打印的。</span></span><br><span class="line">    fmt.Println(<span class="string">"pointer:"</span>, &amp;i)</span><br><span class="line">        <span class="comment">// 又可以获取到值了</span></span><br><span class="line">    fmt.Println(<span class="string">"pointer:"</span>, *&amp;i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zeroval 在 main 函数中不能改变 i 的值，但是zeroptr 可以，因为它有一个这个变量的内存地址的引用。</span></span><br><span class="line"><span class="comment">// 对于空指针   var  ptr *int    ptr == nil</span></span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用这个语法创建了一个新的结构体元素。</span></span><br><span class="line">    fmt.Println(person&#123;<span class="string">"Bob"</span>, <span class="number">20</span>&#125;)</span><br><span class="line">    <span class="comment">// 你可以在初始化一个结构体元素时指定字段名字。</span></span><br><span class="line">    fmt.Println(person&#123;name: <span class="string">"Alice"</span>, age: <span class="number">30</span>&#125;)</span><br><span class="line">    <span class="comment">// 省略的字段将被初始化为零值。</span></span><br><span class="line">    fmt.Println(person&#123;name: <span class="string">"Fred"</span>&#125;)</span><br><span class="line">    <span class="comment">// &amp; 前缀生成一个结构体指针。</span></span><br><span class="line">    fmt.Println(&amp;person&#123;name: <span class="string">"Ann"</span>, age: <span class="number">40</span>&#125;)</span><br><span class="line">    <span class="comment">// 使用点来访问结构体字段。</span></span><br><span class="line">    s := person&#123;name: <span class="string">"Sean"</span>, age: <span class="number">50</span>&#125;</span><br><span class="line">    fmt.Println(s.name)</span><br><span class="line">    <span class="comment">// 也可以对结构体指针使用. - 指针会被自动解引用。</span></span><br><span class="line">    sp := &amp;s</span><br><span class="line">    fmt.Println(sp.age)</span><br><span class="line">    <span class="comment">// 结构体是可变的。</span></span><br><span class="line">    sp.age = <span class="number">51</span></span><br><span class="line">    fmt.Println(sp.age)</span><br><span class="line">    fmt.Println(s.age) <span class="comment">// 51</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> rect <span class="keyword">struct</span> &#123;</span><br><span class="line">    width, height <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 area 方法有一个接收器类型 rect。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *rect)</span> <span class="title">area</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以为值类型或者指针类型的接收器定义方法。这里是一个值类型接收器的例子。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*r.width + <span class="number">2</span>*r.height</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := rect&#123;width: <span class="number">10</span>, height: <span class="number">5</span>&#125;</span><br><span class="line">    <span class="comment">// 这里我们调用上面为结构体定义的两个方法。</span></span><br><span class="line">    fmt.Println(<span class="string">"area: "</span>, r.area())</span><br><span class="line">    fmt.Println(<span class="string">"perim:"</span>, r.perim())</span><br><span class="line">    <span class="comment">// Go 自动处理方法调用时的值和指针之间的转化。你可以使用指针来调用方法来避免在方法调用时产生一个拷贝，或者让方法能够改变接受的数据。</span></span><br><span class="line">    rp := &amp;r</span><br><span class="line">    fmt.Println(<span class="string">"area: "</span>, rp.area())</span><br><span class="line">    fmt.Println(<span class="string">"perim:"</span>, rp.perim())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口 是方法特征的命名集合。</span></span><br><span class="line"><span class="comment">// 这里是一个几何体的基本接口。</span></span><br><span class="line"><span class="keyword">type</span> geometry <span class="keyword">interface</span> &#123;</span><br><span class="line">    area() <span class="keyword">float64</span></span><br><span class="line">    perim() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在我们的例子中，我们将让 rect 和 circle 实现这个接口</span></span><br><span class="line"><span class="keyword">type</span> rect <span class="keyword">struct</span> &#123;</span><br><span class="line">    width, height <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要在 Go 中实现一个接口，我们只需要实现接口中的所有方法。这里我们让 rect 实现了 geometry 接口。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*r.width + <span class="number">2</span>*r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// circle 的实现。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Pi * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * math.Pi * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个变量是接口类型，那么我们可以调用这个被命名的接口中的方法。这里有一个一通用的 measure 函数，利用这个特性，它可以用在任何 geometry 上。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">measure</span><span class="params">(g geometry)</span></span> &#123;</span><br><span class="line">    fmt.Println(g)</span><br><span class="line">    fmt.Println(g.area())</span><br><span class="line">    fmt.Println(g.perim())</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := rect&#123;width: <span class="number">3</span>, height: <span class="number">4</span>&#125;</span><br><span class="line">    c := circle&#123;radius: <span class="number">5</span>&#125;</span><br><span class="line">    <span class="comment">// 结构体类型 circle 和 rect 都实现了 geometry接口，所以我们可以使用它们的实例作为 measure 的参数。</span></span><br><span class="line">    measure(r)</span><br><span class="line">    measure(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取-interface-变量存储的类型"><a href="#获取-interface-变量存储的类型" class="headerlink" title="获取 interface 变量存储的类型"></a>获取 interface 变量存储的类型</h3><p><code>interface</code>的变量里面可以存储任意类型的数值(该类型实现了<code>interface</code>)<br>那么获取这个变量里面实际保存的对象类型可以使用下列方法</p><ul><li>Comma-ok 断言<br>Go 语言里面有一个语法，可以直接判断是否是该类型的变量： value, ok = element.(T)，这里 value 就是变量的值，ok 是一个 bool 类型，element 是 interface 变量，T 是断言的类型。如果 element 里面确实存储了 T 类型的数值，那么 ok 返回 true，否则返回 false。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Element <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> List []Element</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了String方法，实现了fmt.Stringer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"(name: "</span> + p.name + <span class="string">" - age: "</span> + strconv.Itoa(p.age) + <span class="string">" years)"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list := <span class="built_in">make</span>(List, <span class="number">3</span>)</span><br><span class="line">    list[<span class="number">0</span>] = <span class="number">1</span>       <span class="comment">// an int</span></span><br><span class="line">    list[<span class="number">1</span>] = <span class="string">"Hello"</span> <span class="comment">// a string</span></span><br><span class="line">    list[<span class="number">2</span>] = Person&#123;<span class="string">"Dennis"</span>, <span class="number">70</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, element := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> value, ok := element.(<span class="keyword">int</span>); ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"list[%d] is an int and its value is %d\n"</span>, index, value)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value, ok := element.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"list[%d] is a string and its value is %s\n"</span>, index, value)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value, ok := element.(Person); ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"list[%d] is a Person and its value is %s\n"</span>, index, value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"list[%d] is of a different type\n"</span>, index)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch 测试</li></ul><p>因为用到了很多的 if 所以自然有<code>switch</code><br>这里有一点需要强调的是：<code>element.(type)</code>语法不能在 switch 外的任何逻辑里面使用，如果你要在 switch 外面判断一个类型就使用<code>comma-ok</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list := <span class="built_in">make</span>(List, <span class="number">3</span>)</span><br><span class="line">    list[<span class="number">0</span>] = <span class="number">1</span>       <span class="comment">//an int</span></span><br><span class="line">    list[<span class="number">1</span>] = <span class="string">"Hello"</span> <span class="comment">//a string</span></span><br><span class="line">    list[<span class="number">2</span>] = Person&#123;<span class="string">"Dennis"</span>, <span class="number">70</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, element := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="keyword">switch</span> value := element.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">            fmt.Printf(<span class="string">"list[%d] is an int and its value is %d\n"</span>, index, value)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">            fmt.Printf(<span class="string">"list[%d] is a string and its value is %s\n"</span>, index, value)</span><br><span class="line">        <span class="keyword">case</span> Person:</span><br><span class="line">            fmt.Printf(<span class="string">"list[%d] is a Person and its value is %s\n"</span>, index, value)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">"list[%d] is of a different type"</span>, index)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射-不太懂"><a href="#反射-不太懂" class="headerlink" title="反射(不太懂)"></a>反射(不太懂)</h3><p>暂时觉得这个可以判断结构类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyStruct)</span> <span class="title">GetName</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    this.name = str</span><br><span class="line">    <span class="keyword">return</span> this.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 备注: reflect.Indirect -&gt; 如果是指针则返回 Elem()</span></span><br><span class="line">    <span class="comment">// 首先，reflect包有两个数据类型我们必须知道，一个是Type，一个是Value。</span></span><br><span class="line">    <span class="comment">// Type就是定义的类型的一个数据类型，Value是值的类型</span></span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    s := <span class="string">"this is string"</span></span><br><span class="line">    <span class="comment">// 获取对象类型 (string)</span></span><br><span class="line">    fmt.Println(reflect.TypeOf(s))</span><br><span class="line">    <span class="comment">// 获取对象值 (this is string)</span></span><br><span class="line">    fmt.Println(reflect.ValueOf(s))</span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">float64</span> = <span class="number">3.4</span></span><br><span class="line">    <span class="comment">// 获取对象值 (&lt;float64 Value&gt;)</span></span><br><span class="line">    fmt.Println(reflect.ValueOf(x))</span><br><span class="line">    <span class="comment">// 对象</span></span><br><span class="line">    a := &amp;MyStruct&#123;name: <span class="string">"nljb"</span>&#125;</span><br><span class="line">    <span class="comment">// 返回对象的方法的数量 (1)</span></span><br><span class="line">    fmt.Println(reflect.TypeOf(a).NumMethod())</span><br><span class="line">    <span class="comment">// 遍历对象中的方法</span></span><br><span class="line">    <span class="keyword">for</span> m := <span class="number">0</span>; m &lt; reflect.TypeOf(a).NumMethod(); m++ &#123;</span><br><span class="line">        method := reflect.TypeOf(a).Method(m)</span><br><span class="line">        fmt.Println(method.Type)         <span class="comment">// func(*main.MyStruct) string</span></span><br><span class="line">        fmt.Println(method.Name)         <span class="comment">// GetName</span></span><br><span class="line">        fmt.Println(method.Type.NumIn()) <span class="comment">// 参数个数</span></span><br><span class="line">        fmt.Println(method.Type.In(<span class="number">1</span>))   <span class="comment">// 参数类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取对象值 (&lt;*main.MyStruct Value&gt;)</span></span><br><span class="line">    fmt.Println(reflect.ValueOf(a))</span><br><span class="line">    <span class="comment">// 获取对象名称</span></span><br><span class="line">    fmt.Println(reflect.Indirect(reflect.ValueOf(a)).Type().Name())</span><br><span class="line">    <span class="comment">// 参数</span></span><br><span class="line">    i := <span class="string">"Hello"</span></span><br><span class="line">    v := <span class="built_in">make</span>([]reflect.Value, <span class="number">0</span>)</span><br><span class="line">    v = <span class="built_in">append</span>(v, reflect.ValueOf(i))</span><br><span class="line">    <span class="comment">// 通过对象值中的方法名称调用方法 ([nljb]) (返回数组因为Go支持多值返回)</span></span><br><span class="line">    fmt.Println(reflect.ValueOf(a).MethodByName(<span class="string">"GetName"</span>).Call(v))</span><br><span class="line">    <span class="comment">// 通过对值中的子对象名称获取值 (nljb)</span></span><br><span class="line">    fmt.Println(reflect.Indirect(reflect.ValueOf(a)).FieldByName(<span class="string">"name"</span>))</span><br><span class="line">    <span class="comment">// 是否可以改变这个值 (false)</span></span><br><span class="line">    fmt.Println(reflect.Indirect(reflect.ValueOf(a)).FieldByName(<span class="string">"name"</span>).CanSet())</span><br><span class="line">    <span class="comment">// 是否可以改变这个值 (true)</span></span><br><span class="line">    fmt.Println(reflect.Indirect(reflect.ValueOf(&amp;(a.name))).CanSet())</span><br><span class="line">    <span class="comment">// 不可改变 (false)</span></span><br><span class="line">    fmt.Println(reflect.Indirect(reflect.ValueOf(s)).CanSet())</span><br><span class="line">    <span class="comment">// 可以改变</span></span><br><span class="line">    <span class="comment">// reflect.Indirect(reflect.ValueOf(&amp;s)).SetString("jbnl")</span></span><br><span class="line">    fmt.Println(reflect.Indirect(reflect.ValueOf(&amp;s)).CanSet())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照惯例，错误通常是最后一个返回值并且是 error 类型，一个内建的接口。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(arg <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> arg == <span class="number">42</span> &#123;</span><br><span class="line">        <span class="comment">// errors.New 构造一个使用给定的错误信息的基本error 值。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, errors.New(<span class="string">"can't work with 42"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回错误值为 nil 代表没有错误。</span></span><br><span class="line">    <span class="keyword">return</span> arg + <span class="number">3</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过实现 Error 方法来自定义 error 类型是可以的。这里使用自定义错误类型来表示上面的参数错误。</span></span><br><span class="line"><span class="keyword">type</span> argError <span class="keyword">struct</span> &#123;</span><br><span class="line">    arg  <span class="keyword">int</span></span><br><span class="line">    prob <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *argError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d - %s"</span>, e.arg, e.prob)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(arg <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> arg == <span class="number">42</span> &#123;</span><br><span class="line">        <span class="comment">// 在这个例子中，我们使用 &amp;argError 语法来建立一个新的结构体，并提供了 arg 和 prob 这个两个字段的值。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, &amp;argError&#123;arg, <span class="string">"can't work with it"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arg + <span class="number">3</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 下面的两个循环测试了各个返回错误的函数。注意在 if行内的错误检查代码，在 Go 中是一个普遍的用法。</span></span><br><span class="line">    <span class="keyword">for</span> _, i := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">        <span class="keyword">if</span> r, e := f1(i); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"f1 failed:"</span>, e)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"f1 worked:"</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, i := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">        <span class="keyword">if</span> r, e := f2(i); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"f2 failed:"</span>, e)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"f2 worked:"</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 你如果想在程序中使用一个自定义错误类型中的数据，你需要通过类型断言来得到这个错误类型的实例。</span></span><br><span class="line">    _, e := f2(<span class="number">42</span>)</span><br><span class="line">    <span class="keyword">if</span> ae, ok := e.(*argError); ok &#123;</span><br><span class="line">        fmt.Println(ae.arg)</span><br><span class="line">        fmt.Println(ae.prob)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 排序方法是正对内置数据类型的；这里是一个字符串的例子。注意排序是原地更新的，所以他会改变给定的序列并且不返回一个新值。</span></span><br><span class="line">    strs := []<span class="keyword">string</span>&#123;<span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>&#125;</span><br><span class="line">    sort.Strings(strs)</span><br><span class="line">    fmt.Println(<span class="string">"Strings:"</span>, strs)</span><br><span class="line">    <span class="comment">// 一个 int 排序的例子。</span></span><br><span class="line">    ints := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">    sort.Ints(ints)</span><br><span class="line">    fmt.Println(<span class="string">"Ints:   "</span>, ints)</span><br><span class="line">    <span class="comment">// 我们也可以使用 sort 来检查一个序列是不是已经是排好序的。</span></span><br><span class="line">    s := sort.IntsAreSorted(ints)</span><br><span class="line">    fmt.Println(<span class="string">"Sorted: "</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了在 Go 中使用自定义函数进行排序，我们需要一个对应的类型。这里我们创建一个为内置 []string 类型的别名的ByLength 类型，</span></span><br><span class="line"><span class="keyword">type</span> ByLength []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们在类型中实现了 sort.Interface 的 Len，Less和 Swap 方法，这样我们就可以使用 sort 包的通用Sort 方法了，Len 和 Swap 通常在各个类型中都差不多，Less 将控制实际的自定义排序逻辑。在我们的例子中，我们想按字符串长度增加的顺序来排序，所以这里使用了 len(s[i]) 和 len(s[j])。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ByLength)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ByLength)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ByLength)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s[i]) &lt; <span class="built_in">len</span>(s[j])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一切都准备好了，我们现在可以通过将原始的 fruits 切片转型成 ByLength 来实现我们的自定排序了。然后对这个转型的切片使用 sort.Sort 方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fruits := []<span class="keyword">string</span>&#123;<span class="string">"peach"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>&#125;</span><br><span class="line">    sort.Sort(ByLength(fruits))</span><br><span class="line">    fmt.Println(fruits)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们将在这个网站中使用 panic 来检查预期外的错误。这个是唯一一个为 panic 准备的例子。</span></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"a problem"</span>)</span><br><span class="line">    <span class="comment">// panic 的一个基本用法就是在一个函数返回了错误值但是我们并不知道（或者不想）处理时终止运行。这里是一个在创建一个新文件时返回异常错误时的panic 用法。</span></span><br><span class="line">    _, err := os.Create(<span class="string">"/tmp/file"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设我们想要创建一个文件，向它进行写操作，然后在结束时关闭它。这里展示了如何通过 defer 来做到这一切。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在 closeFile 后得到一个文件对象，我们使用 defer通过 closeFile 来关闭这个文件。这会在封闭函数（main）结束时执行，就是 writeFile 结束后。</span></span><br><span class="line">    f := createFile(<span class="string">"/tmp/defer.txt"</span>)</span><br><span class="line">    <span class="keyword">defer</span> closeFile(f)</span><br><span class="line">    writeFile(f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">(p <span class="keyword">string</span>)</span> *<span class="title">os</span>.<span class="title">File</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"creating"</span>)</span><br><span class="line">    f, err := os.Create(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(f *os.File)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"writing"</span>)</span><br><span class="line">    fmt.Fprintln(f, <span class="string">"data"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closeFile</span><span class="params">(f *os.File)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"closing"</span>)</span><br><span class="line">    f.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := fmt.Println</span><br><span class="line">    <span class="comment">// 得到当前时间。</span></span><br><span class="line">    now := time.Now()</span><br><span class="line">    p(now)</span><br><span class="line">    <span class="comment">// 通过提供年月日等信息，你可以构建一个 time。时间总是关联着位置信息，例如时区。</span></span><br><span class="line">    then := time.Date(</span><br><span class="line">        <span class="number">2009</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">34</span>, <span class="number">58</span>, <span class="number">651387237</span>, time.UTC)</span><br><span class="line">    p(then)</span><br><span class="line">    <span class="comment">// 你可以提取出时间的各个组成部分。</span></span><br><span class="line">    p(then.Year())</span><br><span class="line">    p(then.Month())</span><br><span class="line">    p(then.Day())</span><br><span class="line">    p(then.Hour())</span><br><span class="line">    p(then.Minute())</span><br><span class="line">    p(then.Second())</span><br><span class="line">    p(then.Nanosecond())</span><br><span class="line">    p(then.Location())</span><br><span class="line">    <span class="comment">// 输出是星期一到日的 Weekday 也是支持的。</span></span><br><span class="line">    p(then.Weekday())</span><br><span class="line">    <span class="comment">// 这些方法来比较两个时间，分别测试一下是否是之前，之后或者是同一时刻，精确到秒。</span></span><br><span class="line">    p(then.Before(now))</span><br><span class="line">    p(then.After(now))</span><br><span class="line">    p(then.Equal(now))</span><br><span class="line">    <span class="comment">// 方法 Sub 返回一个 Duration 来表示两个时间点的间隔时间。</span></span><br><span class="line">    diff := now.Sub(then)</span><br><span class="line">    p(diff)</span><br><span class="line">    <span class="comment">// 我们计算出不同单位下的时间长度值。</span></span><br><span class="line">    p(diff.Hours())</span><br><span class="line">    p(diff.Minutes())</span><br><span class="line">    p(diff.Seconds())</span><br><span class="line">    p(diff.Nanoseconds())</span><br><span class="line">    <span class="comment">// 你可以使用 Add 将时间后移一个时间间隔，或者使用一个 - 来将时间前移一个时间间隔。</span></span><br><span class="line">    p(then.Add(diff))</span><br><span class="line">    p(then.Add(-diff))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 分别使用带 Unix 或者 UnixNano 的 time.Now来获取从自协调世界时起到现在的秒数或者纳秒数。</span></span><br><span class="line">    now := time.Now()</span><br><span class="line">    secs := now.Unix()</span><br><span class="line">    nanos := now.UnixNano()</span><br><span class="line">    fmt.Println(now)</span><br><span class="line">    <span class="comment">// 注意 UnixMillis 是不存在的，所以要得到毫秒数的话，你要自己手动的从纳秒转化一下。</span></span><br><span class="line">    millis := nanos / <span class="number">1000000</span></span><br><span class="line">    fmt.Println(secs)</span><br><span class="line">    fmt.Println(millis)</span><br><span class="line">    fmt.Println(nanos)</span><br><span class="line">    <span class="comment">// 你也可以将协调世界时起的整数秒或者纳秒转化到相应的时间。</span></span><br><span class="line">    fmt.Println(time.Unix(secs, <span class="number">0</span>))</span><br><span class="line">    fmt.Println(time.Unix(<span class="number">0</span>, nanos))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间的格式化与解析"><a href="#时间的格式化与解析" class="headerlink" title="时间的格式化与解析"></a>时间的格式化与解析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := fmt.Println</span><br><span class="line">    <span class="comment">// 这里是一个基本的按照 RFC3339 进行格式化的例子，使用对应模式常量。</span></span><br><span class="line">    t := time.Now()</span><br><span class="line">    p(t.Format(time.RFC3339))</span><br><span class="line">    <span class="comment">// 时间解析使用同 Format 相同的形式值。</span></span><br><span class="line">    t1, e := time.Parse(</span><br><span class="line">        time.RFC3339,</span><br><span class="line">        <span class="string">"2012-11-01T22:08:41+00:00"</span>)</span><br><span class="line">    p(t1)</span><br><span class="line">    <span class="comment">// Format 和 Parse 使用基于例子的形式来决定日期格式，一般你只要使用 time 包中提供的模式常量就行了，但是你也可以实现自定义模式。模式必须使用时间 Mon Jan 2 15:04:05 MST 2006来指定给定时间/字符串的格式化/解析方式。时间一定要按照如下所示：2006为年，15 为小时，Monday 代表星期几，等等。</span></span><br><span class="line">    p(t.Format(<span class="string">"3:04PM"</span>))</span><br><span class="line">    p(t.Format(<span class="string">"Mon Jan _2 15:04:05 2006"</span>))</span><br><span class="line">    p(t.Format(<span class="string">"2006-01-02T15:04:05.999999-07:00"</span>))</span><br><span class="line">    form := <span class="string">"3 04 PM"</span></span><br><span class="line">    t2, e := time.Parse(form, <span class="string">"8 41 PM"</span>)</span><br><span class="line">    p(t2)</span><br><span class="line">    <span class="comment">// 对于纯数字表示的时间，你也可以使用标准的格式化字符串来提出出时间值得组成。</span></span><br><span class="line">    fmt.Printf(<span class="string">"%d-%02d-%02dT%02d:%02d:%02d-00:00\n"</span>,</span><br><span class="line">        t.Year(), t.Month(), t.Day(),</span><br><span class="line">        t.Hour(), t.Minute(), t.Second())</span><br><span class="line">    <span class="comment">// Parse 函数在输入的时间格式不正确是会返回一个错误。</span></span><br><span class="line">    ansic := <span class="string">"Mon Jan _2 15:04:05 2006"</span></span><br><span class="line">    _, e = time.Parse(ansic, <span class="string">"8:41PM"</span>)</span><br><span class="line">    p(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数字解析"><a href="#数字解析" class="headerlink" title="数字解析"></a>数字解析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 ParseFloat 解析浮点数，这里的 64 表示表示解析的数的位数。</span></span><br><span class="line">    f, _ := strconv.ParseFloat(<span class="string">"1.234"</span>, <span class="number">64</span>)</span><br><span class="line">    fmt.Println(f)</span><br><span class="line">    <span class="comment">// 在使用 ParseInt 解析整形数时，例子中的参数 0 表示自动推断字符串所表示的数字的进制。64 表示返回的整形数是以 64 位存储的。</span></span><br><span class="line">    i, _ := strconv.ParseInt(<span class="string">"123"</span>, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    <span class="comment">// ParseInt 会自动识别出十六进制数。</span></span><br><span class="line">    d, _ := strconv.ParseInt(<span class="string">"0x1c8"</span>, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    fmt.Println(d)</span><br><span class="line">    <span class="comment">// ParseUint 也是可用的。</span></span><br><span class="line">    u, _ := strconv.ParseUint(<span class="string">"789"</span>, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    fmt.Println(u)</span><br><span class="line">    <span class="comment">// Atoi 是一个基础的 10 进制整型数转换函数。</span></span><br><span class="line">    k, _ := strconv.Atoi(<span class="string">"135"</span>)</span><br><span class="line">    fmt.Println(k)</span><br><span class="line">    <span class="comment">// 在输入错误时，解析函数会返回一个错误。</span></span><br><span class="line">    _, e := strconv.Atoi(<span class="string">"wat"</span>)</span><br><span class="line">    fmt.Println(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="url-解析"><a href="#url-解析" class="headerlink" title="url 解析"></a>url 解析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们将解析这个 URL 示例，它包含了一个 scheme，认证信息，主机名，端口，路径，查询参数和片段。</span></span><br><span class="line">    s := <span class="string">"postgres://user:pass@host.com:5432/path?k=v#f"</span></span><br><span class="line">    <span class="comment">// 解析这个 URL 并确保解析没有出错。</span></span><br><span class="line">    u, err := url.Parse(s)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 直接访问 scheme。</span></span><br><span class="line">    fmt.Println(u.Scheme) <span class="comment">// postgres</span></span><br><span class="line">    <span class="comment">// User 包含了所有的认证信息，这里调用 Username和 Password 来获取独立值。</span></span><br><span class="line">    fmt.Println(u.User)            <span class="comment">// user:pass</span></span><br><span class="line">    fmt.Println(u.User.Username()) <span class="comment">// user</span></span><br><span class="line">    p, _ := u.User.Password()</span><br><span class="line">    fmt.Println(p) <span class="comment">// pass</span></span><br><span class="line">    <span class="comment">// Host 同时包括主机名和端口信息，如过端口存在的话，使用 strings.Split() 从 Host 中手动提取端口。</span></span><br><span class="line">    fmt.Println(u.Host) <span class="comment">// host.com:5432</span></span><br><span class="line">    h := strings.Split(u.Host, <span class="string">":"</span>)</span><br><span class="line">    fmt.Println(h[<span class="number">0</span>]) <span class="comment">// host.com</span></span><br><span class="line">    fmt.Println(h[<span class="number">1</span>]) <span class="comment">// 5432</span></span><br><span class="line">    <span class="comment">// 这里我们提出路径和查询片段信息。</span></span><br><span class="line">    fmt.Println(u.Path)     <span class="comment">// /path</span></span><br><span class="line">    fmt.Println(u.Fragment) <span class="comment">// f</span></span><br><span class="line">    <span class="comment">// 要得到字符串中的 k=v 这种格式的查询参数，可以使用 RawQuery 函数。你也可以将查询参数解析为一个map。</span></span><br><span class="line">    <span class="comment">// 已解析的查询参数 map 以查询字符串为键，对应值字符串切片为值，所以如何只想得到一个键对应的第一个值，将索引位置设置为 [0] 就行了。</span></span><br><span class="line">    fmt.Println(u.RawQuery) <span class="comment">// k=v</span></span><br><span class="line">    m, _ := url.ParseQuery(u.RawQuery)</span><br><span class="line">    fmt.Println(m)         <span class="comment">// map[k:[v]]</span></span><br><span class="line">    fmt.Println(m[<span class="string">"k"</span>][<span class="number">0</span>]) <span class="comment">// v</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 例如，rand.Intn 返回一个随机的整数 n，0 &lt;= n &lt;= 100。</span></span><br><span class="line">    fmt.Print(rand.Intn(<span class="number">100</span>), <span class="string">","</span>)</span><br><span class="line">    fmt.Print(rand.Intn(<span class="number">100</span>))</span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="comment">// rand.Float64 返回一个64位浮点数 f，0.0 &lt;= f &lt;= 1.0。</span></span><br><span class="line">    fmt.Println(rand.Float64())</span><br><span class="line">    <span class="comment">// 这个技巧可以用来生成其他范围的随机浮点数，例如5.0 &lt;= f &lt;= 10.0</span></span><br><span class="line">    fmt.Print((rand.Float64()*<span class="number">5</span>)+<span class="number">5</span>, <span class="string">","</span>)</span><br><span class="line">    fmt.Print((rand.Float64() * <span class="number">5</span>) + <span class="number">5</span>)</span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="comment">// 默认情况下，给定的种子是确定的，每次都会产生相同的随机数数字序列。要产生变化的序列，需要给定一个变化的种子。需要注意的是，如果你出于加密目的，需要使用随机数的话，请使用 crypto/rand 包，此方法不够安全。</span></span><br><span class="line">    s1 := rand.NewSource(time.Now().UnixNano())</span><br><span class="line">    r1 := rand.New(s1)</span><br><span class="line">    <span class="comment">// 调用上面返回的 rand.Source 的函数和调用 rand 包中函数是相同的。</span></span><br><span class="line">    fmt.Print(r1.Intn(<span class="number">100</span>), <span class="string">","</span>)</span><br><span class="line">    fmt.Print(r1.Intn(<span class="number">100</span>))</span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="comment">// 如果使用相同的种子生成的随机数生成器，将会产生相同的随机数序列。</span></span><br><span class="line">    s2 := rand.NewSource(<span class="number">42</span>)</span><br><span class="line">    r2 := rand.New(s2)</span><br><span class="line">    fmt.Print(r2.Intn(<span class="number">100</span>), <span class="string">","</span>)</span><br><span class="line">    fmt.Print(r2.Intn(<span class="number">100</span>))</span><br><span class="line">    fmt.Println()</span><br><span class="line">    s3 := rand.NewSource(<span class="number">42</span>)</span><br><span class="line">    r3 := rand.New(s3)</span><br><span class="line">    fmt.Print(r3.Intn(<span class="number">100</span>), <span class="string">","</span>)</span><br><span class="line">    fmt.Print(r3.Intn(<span class="number">100</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SHA1-散列"><a href="#SHA1-散列" class="headerlink" title="SHA1 散列"></a>SHA1 散列</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := <span class="string">"sha1"</span></span><br><span class="line">    <span class="comment">// 产生一个散列值得方式是 sha1.New()，sha1.Write(bytes)，然后 sha1.Sum([]byte&#123;&#125;)。这里我们从一个新的散列开始。</span></span><br><span class="line">    h := sha1.New()</span><br><span class="line">    <span class="comment">// 写入要处理的字节。如果是一个字符串，需要使用[]byte(s) 来强制转换成字节数组。</span></span><br><span class="line">    h.Write([]<span class="keyword">byte</span>(s))</span><br><span class="line">    <span class="comment">// 这个用来得到最终的散列值的字符切片。Sum 的参数可以用来都现有的字符切片追加额外的字节切片：一般不需要要。</span></span><br><span class="line">    bs := h.Sum(<span class="literal">nil</span>)</span><br><span class="line">    <span class="comment">// SHA1 值经常以 16 进制输出，例如在 git commit 中。使用%x 来将散列结果格式化为 16 进制字符串。</span></span><br><span class="line">    fmt.Println(s)</span><br><span class="line">    fmt.Printf(<span class="string">"%x\n"</span>, bs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BASE64-编码"><a href="#BASE64-编码" class="headerlink" title="BASE64 编码"></a>BASE64 编码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 这是将要编解码的字符串。</span></span><br><span class="line">    data := <span class="string">"abc123!?$*&amp;()'-=@~"</span></span><br><span class="line">    <span class="comment">// Go 同时支持标准的和 URL 兼容的 base64 格式。编码需要使用 []byte 类型的参数，所以要将字符串转成此类型。</span></span><br><span class="line">    <span class="comment">// 标准 base64 编码和 URL 兼容 base64 编码的编码字符串存在稍许不同（后缀为 + 和 -），但是两者都可以正确解码为原始字符串。</span></span><br><span class="line">    sEnc := base64.StdEncoding.EncodeToString([]<span class="keyword">byte</span>(data))</span><br><span class="line">    fmt.Println(sEnc)</span><br><span class="line">    <span class="comment">// 解码可能会返回错误，如果不确定输入信息格式是否正确，那么，你就需要进行错误检查了。</span></span><br><span class="line">    sDec, _ := base64.StdEncoding.DecodeString(sEnc)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(sDec))</span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="comment">// 使用 URL 兼容的 base64 格式进行编解码。</span></span><br><span class="line">    uEnc := base64.URLEncoding.EncodeToString([]<span class="keyword">byte</span>(data))</span><br><span class="line">    fmt.Println(uEnc)</span><br><span class="line">    uDec, _ := base64.URLEncoding.DecodeString(uEnc)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(uDec))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(from <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Println(from, <span class="string">":"</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 假设我们有一个函数叫做 f(s)。我们使用一般的方式调并同时运行。</span></span><br><span class="line">    f(<span class="string">"direct"</span>)</span><br><span class="line">    <span class="comment">// 使用 go f(s) 在一个 Go 协程中调用这个函数。这个新的 Go 协程将会并行的执行这个函数调用。</span></span><br><span class="line">    <span class="keyword">go</span> f(<span class="string">"goroutine"</span>)</span><br><span class="line">    <span class="comment">// 你也可以为匿名函数启动一个 Go 协程。</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(msg)</span><br><span class="line">    &#125;(<span class="string">"going"</span>)</span><br><span class="line">    <span class="comment">// 现在这两个 Go 协程在独立的 Go 协程中异步的运行，所以我们需要等它们执行结束。这里的 Scanln 代码需要我们在程序退出前按下任意键结束。</span></span><br><span class="line">    <span class="keyword">var</span> input <span class="keyword">string</span></span><br><span class="line">    fmt.Scanln(&amp;input)</span><br><span class="line">    fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">    <span class="comment">// 当我们运行这个程序时，将首先看到阻塞式调用的输出，然后是两个 Go 协程的交替输出。这种交替的情况表示 Go 运行时是以异步的方式运行协程的。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通道 是连接多个 Go 协程的管道。你可以从一个 Go 协程将值发送到通道，然后在别的 Go 协程中接收。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 make(chan val-type) 创建一个新的通道。通道类型就是他们需要传递值的类型。</span></span><br><span class="line">    messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    <span class="comment">// 使用 channel &lt;- 语法 发送 一个新的值到通道中。这里我们在一个新的 Go 协程中发送 "ping" 到上面创建的messages 通道中。</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; messages &lt;- <span class="string">"ping"</span> &#125;()</span><br><span class="line">    <span class="comment">// 使用 &lt;-channel 语法从通道中 接收 一个值。这里将接收我们在上面发送的 "ping" 消息并打印出来。</span></span><br><span class="line">    msg := &lt;-messages</span><br><span class="line">    fmt.Println(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们运行程序时，通过通道，消息 "ping" 成功的从一个 Go 协程传到另一个中。</span></span><br><span class="line"><span class="comment">// 默认发送和接收操作是阻塞的，直到发送方和接收方都准备完毕。这个特性允许我们，不使用任何其它的同步操作，来在程序结尾等待消息 "ping"。</span></span><br></pre></td></tr></table></figure><h3 id="通道缓冲"><a href="#通道缓冲" class="headerlink" title="通道缓冲"></a>通道缓冲</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认通道是 无缓冲 的，这意味着只有在对应的接收（&lt;- chan）通道准备好接收时，才允许进行发送（chan &lt;-）。可缓存通道允许在没有对应接收方的情况下，缓存限定数量的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 这里我们 make 了一个通道，最多允许缓存 2 个值。</span></span><br><span class="line">    messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// 因为这个通道是有缓冲区的，即使没有一个对应的并发接收方，我们仍然可以发送这些值。</span></span><br><span class="line">    messages &lt;- <span class="string">"buffered"</span></span><br><span class="line">    messages &lt;- <span class="string">"channel"</span></span><br><span class="line">    <span class="comment">// 然后我们可以像前面一样接收这两个值。</span></span><br><span class="line">    fmt.Println(&lt;-messages)</span><br><span class="line">    fmt.Println(&lt;-messages)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道同步"><a href="#通道同步" class="headerlink" title="通道同步"></a>通道同步</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们可以使用通道来同步 Go 协程间的执行状态。这里是一个使用阻塞的接受方式来等待一个 Go 协程的运行结束。</span></span><br><span class="line"><span class="comment">// 这是一个我们将要在 Go 协程中运行的函数。done 通道将被用于通知其他 Go 协程这个函数已经工作完毕。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    fmt.Print(<span class="string">"working..."</span>)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"done"</span>)</span><br><span class="line">    <span class="comment">// 发送一个值来通知我们已经完工啦。</span></span><br><span class="line">    done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 运行一个 worker Go协程，并给予用于通知的通道。</span></span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> worker(done)</span><br><span class="line">    <span class="comment">// 程序将在接收到通道中 worker 发出的通知前一直阻塞。</span></span><br><span class="line">    &lt;-done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你把 &lt;- done 这行代码从程序中移除，程序甚至会在 worker还没开始运行时就结束了</span></span><br></pre></td></tr></table></figure><h3 id="通道方向"><a href="#通道方向" class="headerlink" title="通道方向"></a>通道方向</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ping 函数定义了一个只允许发送数据的通道。尝试使用这个通道来接收数据将会得到一个编译时错误。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ping</span><span class="params">(pings <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    pings &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pong 函数允许通道（pings）来接收数据，另一通道（pongs）来发送数据。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pong</span><span class="params">(pings &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>, pongs <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    msg := &lt;-pings</span><br><span class="line">    pongs &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pings := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">    pongs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">    ping(pings, <span class="string">"passed message"</span>)</span><br><span class="line">    pong(pings, pongs)</span><br><span class="line">    fmt.Println(&lt;-pongs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道选择器"><a href="#通道选择器" class="headerlink" title="通道选择器"></a>通道选择器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在我们的例子中，我们将从两个通道中选择。</span></span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    <span class="comment">// 各个通道将在若干时间后接收一个值，这个用来模拟例如并行的 Go 协程中阻塞的 RPC 操作</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        c1 &lt;- <span class="string">"one"</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        c2 &lt;- <span class="string">"two"</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 我们使用 select 关键字来同时等待这两个值，并打印各自接收到的值。</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;-c1:</span><br><span class="line">            fmt.Println(<span class="string">"received"</span>, msg1)</span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;-c2:</span><br><span class="line">            fmt.Println(<span class="string">"received"</span>, msg2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在我们的例子中，假如我们执行一个外部调用，并在 2 秒后通过通道 c1 返回它的执行结果。</span></span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        c1 &lt;- <span class="string">"result 1"</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 这里是使用 select 实现一个超时操作。res := &lt;- c1 等待结果，&lt;-Time.After 等待超时时间 1 秒后发送的值。由于 select 默认处理第一个已准备好的接收操作，如果这个操作超过了允许的 1 秒的话，将会执行超时 case。</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> res := &lt;-c1:</span><br><span class="line">        fmt.Println(res)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line">        fmt.Println(<span class="string">"timeout 1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果我允许一个长一点的超时时间 3 秒，将会成功的从 c2接收到值，并且打印出结果。</span></span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        c2 &lt;- <span class="string">"result 2"</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> res := &lt;-c2:</span><br><span class="line">        fmt.Println(res)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">3</span>):</span><br><span class="line">        fmt.Println(<span class="string">"timeout 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非阻塞通道"><a href="#非阻塞通道" class="headerlink" title="非阻塞通道"></a>非阻塞通道</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规的通过通道发送和接收数据是阻塞的。然而，我们可以使用带一个 default 子句的 select 来实现非阻塞 的发送、接收，甚至是非阻塞的多路 select。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    signals := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    <span class="comment">// 这里是一个非阻塞接收的例子。如果在 messages 中存在，然后 select 将这个值带入 &lt;-messages case中。如果不是，就直接到 default 分支中。</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> msg := &lt;-messages:</span><br><span class="line">        fmt.Println(<span class="string">"received message"</span>, msg)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">"no message received"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一个非阻塞发送的实现方法和上面一样。</span></span><br><span class="line">    msg := <span class="string">"hi"</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> messages &lt;- msg:</span><br><span class="line">        fmt.Println(<span class="string">"sent message"</span>, msg)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">"no message sent"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 我们可以在 default 前使用多个 case 子句来实现一个多路的非阻塞的选择器。这里我们试图在 messages和 signals 上同时使用非阻塞的接受操作。</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> msg := &lt;-messages:</span><br><span class="line">        fmt.Println(<span class="string">"received message"</span>, msg)</span><br><span class="line">    <span class="keyword">case</span> sig := &lt;-signals:</span><br><span class="line">        fmt.Println(<span class="string">"received signal"</span>, sig)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">"no activity"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道的关闭"><a href="#通道的关闭" class="headerlink" title="通道的关闭"></a>通道的关闭</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭 一个通道意味着不能再向这个通道发送值了。这个特性可以用来给这个通道的接收方传达工作已经完成的信息。</span></span><br><span class="line"><span class="comment">// 在这个例子中，我们将使用一个 jobs 通道来传递 main() 中 Go协程任务执行的结束信息到一个工作 Go 协程中。当我们没有多余的任务给这个工作 Go 协程时，我们将 close 这个 jobs 通道。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">    <span class="comment">// 这是工作 Go 协程。使用 j, more := &lt;- jobs 循环的从jobs 接收数据。在接收的这个特殊的二值形式的值中，如果 jobs 已经关闭了，并且通道中所有的值都已经接收完毕，那么 more 的值将是 false。当我们完成所有的任务时，将使用这个特性通过 done 通道去进行通知。</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            j, more := &lt;-jobs</span><br><span class="line">            <span class="keyword">if</span> more &#123;</span><br><span class="line">                fmt.Println(<span class="string">"received job"</span>, j)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fmt.Println(<span class="string">"received all jobs"</span>)</span><br><span class="line">                done &lt;- <span class="literal">true</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 这里使用 jobs 发送 3 个任务到工作函数中，然后关闭 jobs。</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++ &#123;</span><br><span class="line">        jobs &lt;- j</span><br><span class="line">        fmt.Println(<span class="string">"sent job"</span>, j)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(jobs)</span><br><span class="line">    fmt.Println(<span class="string">"sent all jobs"</span>)</span><br><span class="line">    <span class="comment">// 我们使用前面学到的通道同步方法等待任务结束。</span></span><br><span class="line">    &lt;-done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道遍历"><a href="#通道遍历" class="headerlink" title="通道遍历"></a>通道遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在前面的例子中，我们讲过 for 和 range为基本的数据结构提供了迭代的功能。我们也可以使用这个语法来遍历从通道中取得的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们将遍历在 queue 通道中的两个值。</span></span><br><span class="line">    queue := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">2</span>)</span><br><span class="line">    queue &lt;- <span class="string">"one"</span></span><br><span class="line">    queue &lt;- <span class="string">"two"</span></span><br><span class="line">    <span class="built_in">close</span>(queue)</span><br><span class="line">    <span class="comment">// 这个 range 迭代从 queue 中得到的每个值。因为我们在前面 close 了这个通道，这个迭代会在接收完 2 个值之后结束。如果我们没有 close 它，我们将在这个循环中继续阻塞执行，等待接收第三个值</span></span><br><span class="line">    <span class="keyword">for</span> elem := <span class="keyword">range</span> queue &#123;</span><br><span class="line">        fmt.Println(elem)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个例子也让我们看到，一个非空的通道也是可以关闭的，但是通道中剩下的值仍然可以被接收到。</span></span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 定时器表示在未来某一时刻的独立事件。你告诉定时器需要等待的时间，然后它将提供一个用于通知的通道。这里的定时器将等待 2 秒。</span></span><br><span class="line">    timer1 := time.NewTimer(time.Second * <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// &lt;-timer1.C 直到这个定时器的通道 C 明确的发送了定时器失效的值之前，将一直阻塞。</span></span><br><span class="line">    &lt;-timer1.C</span><br><span class="line">    fmt.Println(<span class="string">"Timer 1 expired"</span>)</span><br><span class="line">    <span class="comment">// 如果你需要的仅仅是单纯的等待，你需要使用 time.Sleep。定时器是有用原因之一就是你可以在定时器失效之前，取消这个定时器。这是一个例子</span></span><br><span class="line">    timer2 := time.NewTimer(time.Second)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        &lt;-timer2.C</span><br><span class="line">        fmt.Println(<span class="string">"Timer 2 expired"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    stop2 := timer2.Stop()</span><br><span class="line">    <span class="keyword">if</span> stop2 &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Timer 2 stopped"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打点器"><a href="#打点器" class="headerlink" title="打点器"></a>打点器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 打点器和定时器的机制有点相似：一个通道用来发送数据。这里我们在这个通道上使用内置的 range 来迭代值每隔500ms 发送一次的值。</span></span><br><span class="line">    ticker := time.NewTicker(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> t := <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Tick at"</span>, t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 打点器可以和定时器一样被停止。一旦一个打点停止了，将不能再从它的通道中接收到值。我们将在运行后 1600ms停止这个打点器。</span></span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">1600</span>)</span><br><span class="line">    ticker.Stop()</span><br><span class="line">    fmt.Println(<span class="string">"Ticker stopped"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工作池"><a href="#工作池" class="headerlink" title="工作池"></a>工作池</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是我们将要在多个并发实例中支持的任务了。这些执行者将从 jobs 通道接收任务，并且通过 results 发送对应的结果。我们将让每个任务间隔 1s 来模仿一个耗时的任务。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="keyword">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, results <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">        fmt.Println(<span class="string">"worker"</span>, id, <span class="string">"processing job"</span>, j)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        results &lt;- j * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 为了使用 worker 工作池并且收集他们的结果，我们需要2 个通道。</span></span><br><span class="line">    jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">    results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="comment">// 这里启动了 3 个 worker，初始是阻塞的，因为还没有传递任务。</span></span><br><span class="line">    <span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= <span class="number">3</span>; w++ &#123;</span><br><span class="line">        <span class="keyword">go</span> worker(w, jobs, results)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里我们发送 9 个 jobs，然后 close 这些通道来表示这些就是所有的任务了。</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++ &#123;</span><br><span class="line">        jobs &lt;- j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(jobs)</span><br><span class="line">    <span class="comment">// 最后，我们收集所有这些任务的返回值。</span></span><br><span class="line">    <span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= <span class="number">9</span>; a++ &#123;</span><br><span class="line">        &lt;-results</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行这个程序，显示 9 个任务被多个 worker 执行。整个程序处理所有的任务仅执行了 3s 而不是 9s，是因为 3 个 worker是并行的。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="速率限制-未懂"><a href="#速率限制-未懂" class="headerlink" title="速率限制(未懂)"></a>速率限制(未懂)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 首先我们将看一下基本的速率限制。假设我们想限制我们接收请求的处理，我们将这些请求发送给一个相同的通道。</span></span><br><span class="line">    requests := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        requests &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(requests)</span><br><span class="line">    <span class="comment">// 这个 limiter 通道将每 200ms 接收一个值。这个是速率限制任务中的管理器。</span></span><br><span class="line">    limiter := time.Tick(time.Millisecond * <span class="number">200</span>)</span><br><span class="line">    <span class="comment">// 通过在每次请求前阻塞 limiter 通道的一个接收，我们限制自己每 200ms 执行一次请求。</span></span><br><span class="line">    <span class="keyword">for</span> req := <span class="keyword">range</span> requests &#123;</span><br><span class="line">        &lt;-limiter</span><br><span class="line">        fmt.Println(<span class="string">"request"</span>, req, time.Now())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有时候我们想临时进行速率限制，并且不影响整体的速率控制我们可以通过通道缓冲来实现。这个 burstyLimiter 通道用来进行 3 次临时的脉冲型速率限制。</span></span><br><span class="line">    burstyLimiter := <span class="built_in">make</span>(<span class="keyword">chan</span> time.Time, <span class="number">3</span>)</span><br><span class="line">    <span class="comment">// 想将通道填充需要临时改变3次的值，做好准备。</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        burstyLimiter &lt;- time.Now()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每 200 ms 我们将添加一个新的值到 burstyLimiter中，直到达到 3 个的限制。</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> t := <span class="keyword">range</span> time.Tick(time.Millisecond * <span class="number">200</span>) &#123;</span><br><span class="line">            burstyLimiter &lt;- t</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 现在模拟超过 5 个的接入请求。它们中刚开始的 3 个将由于受 burstyLimiter 的“脉冲”影响。</span></span><br><span class="line">    burstyRequests := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        burstyRequests &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(burstyRequests)</span><br><span class="line">    <span class="keyword">for</span> req := <span class="keyword">range</span> burstyRequests &#123;</span><br><span class="line">        &lt;-burstyLimiter</span><br><span class="line">        fmt.Println(<span class="string">"request"</span>, req, time.Now())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行程序，我们看到第一批请求意料之中的大约每 200ms 处理一次。</span></span><br><span class="line">    <span class="comment">// 第二批请求，我们直接连续处理了 3 次，这是由于这个“脉冲”速率控制，然后大约每 200ms 处理其余的 2 个。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原子计数器"><a href="#原子计数器" class="headerlink" title="原子计数器"></a>原子计数器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们将使用一个无符号整型数来表示（永远是正整数）这个计数器。</span></span><br><span class="line">    <span class="keyword">var</span> ops <span class="keyword">uint64</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 为了模拟并发更新，我们启动 50 个 Go 协程，对计数器每隔 1ms （译者注：应为非准确时间）进行一次加一操作。</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                <span class="comment">// 使用 AddUint64 来让计数器自动增加，使用&amp; 语法来给出 ops 的内存地址。</span></span><br><span class="line">                atomic.AddUint64(&amp;ops, <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 允许其它 Go 协程的执行</span></span><br><span class="line">                runtime.Gosched()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等待一秒，让 ops 的自加操作执行一会。</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    <span class="comment">// 为了在计数器还在被其它 Go 协程更新时，安全的使用它，我们通过 LoadUint64 将当前值的拷贝提取到 opsFinal中。和上面一样，我们需要给这个函数所取值的内存地址 &amp;ops</span></span><br><span class="line">    opsFinal := atomic.LoadUint64(&amp;ops)</span><br><span class="line">    fmt.Println(<span class="string">"ops:"</span>, opsFinal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="互斥锁-未懂"><a href="#互斥锁-未懂" class="headerlink" title="互斥锁(未懂)"></a>互斥锁(未懂)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 在我们的例子中，state 是一个 map。</span></span><br><span class="line">    <span class="keyword">var</span> state = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="comment">// 这里的 mutex 将同步对 state 的访问。</span></span><br><span class="line">    <span class="keyword">var</span> mutex = &amp;sync.Mutex&#123;&#125;</span><br><span class="line">    <span class="comment">// we'll see later, ops will count how manyoperations we perform against the state.为了比较基于互斥锁的处理方式和我们后面将要看到的其他方式，ops 将记录我们对 state 的操作次数。</span></span><br><span class="line">    <span class="keyword">var</span> ops <span class="keyword">int64</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 这里我们运行 100 个 Go 协程来重复读取 state。</span></span><br><span class="line">    <span class="keyword">for</span> r := <span class="number">0</span>; r &lt; <span class="number">100</span>; r++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            total := <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                <span class="comment">// 每次循环读取，我们使用一个键来进行访问，Lock() 这个 mutex 来确保对 state 的独占访问，读取选定的键的值，Unlock() 这个mutex，并且 ops 值加 1。</span></span><br><span class="line">                key := rand.Intn(<span class="number">5</span>)</span><br><span class="line">                mutex.Lock()</span><br><span class="line">                total += state[key]</span><br><span class="line">                mutex.Unlock()</span><br><span class="line">                atomic.AddInt64(&amp;ops, <span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 为了确保这个 Go 协程不会在调度中饿死，我们在每次操作后明确的使用 runtime.Gosched()进行释放。这个释放一般是自动处理的，像例如每个通道操作后或者 time.Sleep 的阻塞调用后相似，但是在这个例子中我们需要手动的处理。</span></span><br><span class="line">                runtime.Gosched()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 同样的，我们运行 10 个 Go 协程来模拟写入操作，使用和读取相同的模式。</span></span><br><span class="line">    <span class="keyword">for</span> w := <span class="number">0</span>; w &lt; <span class="number">10</span>; w++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                key := rand.Intn(<span class="number">5</span>)</span><br><span class="line">                val := rand.Intn(<span class="number">100</span>)</span><br><span class="line">                mutex.Lock()</span><br><span class="line">                state[key] = val</span><br><span class="line">                mutex.Unlock()</span><br><span class="line">                atomic.AddInt64(&amp;ops, <span class="number">1</span>)</span><br><span class="line">                runtime.Gosched()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让这 10 个 Go 协程对 state 和 mutex 的操作运行 1 s。</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    <span class="comment">// 获取并输出最终的操作计数。</span></span><br><span class="line">    opsFinal := atomic.LoadInt64(&amp;ops)</span><br><span class="line">    fmt.Println(<span class="string">"ops:"</span>, opsFinal)</span><br><span class="line">    <span class="comment">// 对 state 使用一个最终的锁，显示它是如何结束的。</span></span><br><span class="line">    mutex.Lock()</span><br><span class="line">    fmt.Println(<span class="string">"state:"</span>, state)</span><br><span class="line">    mutex.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go状态协程-未读"><a href="#go状态协程-未读" class="headerlink" title="go状态协程(未读)"></a><code>go</code>状态协程(未读)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这个例子中，state 将被一个单独的 Go 协程拥有。这就能够保证数据在并行读取时不会混乱。为了对 state 进行读取或者写入，其他的 Go 协程将发送一条数据到拥有的 Go协程中，然后接收对应的回复。结构体 readOp 和 writeOp封装这些请求，并且是拥有 Go 协程响应的一个方式。</span></span><br><span class="line"><span class="keyword">type</span> readOp <span class="keyword">struct</span> &#123;</span><br><span class="line">    key  <span class="keyword">int</span></span><br><span class="line">    resp <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> writeOp <span class="keyword">struct</span> &#123;</span><br><span class="line">    key  <span class="keyword">int</span></span><br><span class="line">    val  <span class="keyword">int</span></span><br><span class="line">    resp <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 和前面一样，我们将计算我们执行操作的次数。</span></span><br><span class="line">    <span class="keyword">var</span> ops <span class="keyword">int64</span></span><br><span class="line">    <span class="comment">// reads 和 writes 通道分别将被其他 Go 协程用来发布读和写请求。</span></span><br><span class="line">    reads := <span class="built_in">make</span>(<span class="keyword">chan</span> *readOp)</span><br><span class="line">    writes := <span class="built_in">make</span>(<span class="keyword">chan</span> *writeOp)</span><br><span class="line">    <span class="comment">// 这个就是拥有 state 的那个 Go 协程，和前面例子中的map一样，不过这里是被这个状态协程私有的。这个 Go 协程反复响应到达的请求。先响应到达的请求，然后返回一个值到响应通道 resp 来表示操作成功（或者是 reads 中请求的值）</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> state = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> read := &lt;-reads:</span><br><span class="line">                read.resp &lt;- state[read.key]</span><br><span class="line">            <span class="keyword">case</span> write := &lt;-writes:</span><br><span class="line">                state[write.key] = write.val</span><br><span class="line">                write.resp &lt;- <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 启动 100 个 Go 协程通过 reads 通道发起对 state 所有者Go 协程的读取请求。每个读取请求需要构造一个 readOp，发送它到 reads 通道中，并通过给定的 resp 通道接收结果。</span></span><br><span class="line">    <span class="keyword">for</span> r := <span class="number">0</span>; r &lt; <span class="number">100</span>; r++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                read := &amp;readOp&#123;</span><br><span class="line">                    key:  rand.Intn(<span class="number">5</span>),</span><br><span class="line">                    resp: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)&#125;</span><br><span class="line">                reads &lt;- read</span><br><span class="line">                &lt;-read.resp</span><br><span class="line">                atomic.AddInt64(&amp;ops, <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用相同的方法启动 10 个写操作。</span></span><br><span class="line">    <span class="keyword">for</span> w := <span class="number">0</span>; w &lt; <span class="number">10</span>; w++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                write := &amp;writeOp&#123;</span><br><span class="line">                    key:  rand.Intn(<span class="number">5</span>),</span><br><span class="line">                    val:  rand.Intn(<span class="number">100</span>),</span><br><span class="line">                    resp: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)&#125;</span><br><span class="line">                writes &lt;- write</span><br><span class="line">                &lt;-write.resp</span><br><span class="line">                atomic.AddInt64(&amp;ops, <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 让 Go 协程们跑 1s。</span></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">    <span class="comment">// 最后，获取并报告 ops 值。</span></span><br><span class="line">    opsFinal := atomic.LoadInt64(&amp;ops)</span><br><span class="line">    fmt.Println(<span class="string">"ops:"</span>, opsFinal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件需要经常进行错误检查，这个帮助方法可以精简下面的错误检查过程。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(e error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 也许大部分基本的文件读取任务是将文件内容读取到内存中。</span></span><br><span class="line">    dat, err := ioutil.ReadFile(<span class="string">"/tmp/dat"</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    fmt.Print(<span class="keyword">string</span>(dat))</span><br><span class="line">    <span class="comment">// 你经常会想对于一个文件是怎么读并且读取到哪一部分进行更多的控制。对于这个任务，从使用 os.Open打开一个文件获取一个 os.File 值开始。</span></span><br><span class="line">    f, err := os.Open(<span class="string">"/tmp/dat"</span>)</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    check(err)</span><br><span class="line">    <span class="comment">// 从文件开始位置读取一些字节。这里最多读取 5 个字节，并且这也是我们实际读取的字节数。</span></span><br><span class="line">    b1 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</span><br><span class="line">    n1, err := f.Read(b1)</span><br><span class="line">    check(err)</span><br><span class="line">    fmt.Printf(<span class="string">"%d bytes: %s\n"</span>, n1, <span class="keyword">string</span>(b1))</span><br><span class="line">    <span class="comment">// 你也可以 Seek 到一个文件中已知的位置并从这个位置开始进行读取。</span></span><br><span class="line">    o2, err := f.Seek(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    b2 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line">    n2, err := f.Read(b2)</span><br><span class="line">    check(err)</span><br><span class="line">    fmt.Printf(<span class="string">"%d bytes @ %d: %s\n"</span>, n2, o2, <span class="keyword">string</span>(b2))</span><br><span class="line">    <span class="comment">// io 包提供了一些可以帮助我们进行文件读取的函数。例如，上面的读取可以使用 ReadAtLeast 得到一个更健壮的实现。</span></span><br><span class="line">    o3, err := f.Seek(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    b3 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line">    n3, err := io.ReadAtLeast(f, b3, <span class="number">2</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    fmt.Printf(<span class="string">"%d bytes @ %d: %s\n"</span>, n3, o3, <span class="keyword">string</span>(b3))</span><br><span class="line">    <span class="comment">// 没有内置的回转支持，但是使用 Seek(0, 0) 实现。</span></span><br><span class="line">    _, err = f.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    <span class="comment">// bufio 包实现了带缓冲的读取，这不仅对有很多小的读取操作的能提升性能，也提供了很多附加的读取函数。</span></span><br><span class="line">    r4 := bufio.NewReader(f)</span><br><span class="line">    b4, err := r4.Peek(<span class="number">5</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    fmt.Printf(<span class="string">"5 bytes: %s\n"</span>, <span class="keyword">string</span>(b4))</span><br><span class="line">    <span class="comment">// 任务结束后要关闭这个文件（通常这个操作应该在 Open操作后立即使用 defer 来完成）。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 开始，这里是展示如写入一个字符串（或者只是一些字节）到一个文件。</span></span><br><span class="line">    d1 := []<span class="keyword">byte</span>(<span class="string">"hello\ngo\n"</span>)</span><br><span class="line">    err := ioutil.WriteFile(<span class="string">"/tmp/dat1"</span>, d1, <span class="number">0644</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    <span class="comment">// 对于更细粒度的写入，先打开一个文件。</span></span><br><span class="line">    f, err := os.Create(<span class="string">"/tmp/dat2"</span>)</span><br><span class="line">    check(err)</span><br><span class="line">    <span class="comment">// 打开文件后，习惯立即使用 defer 调用文件的 Close操作。</span></span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line">    <span class="comment">// 你可以写入你想写入的字节切片</span></span><br><span class="line">    d2 := []<span class="keyword">byte</span>&#123;<span class="number">115</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">10</span>&#125;</span><br><span class="line">    n2, err := f.Write(d2)</span><br><span class="line">    check(err)</span><br><span class="line">    fmt.Printf(<span class="string">"wrote %d bytes\n"</span>, n2)</span><br><span class="line">    <span class="comment">// WriteString 也是可用的。</span></span><br><span class="line">    n3, err := f.WriteString(<span class="string">"writes\n"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"wrote %d bytes\n"</span>, n3)</span><br><span class="line">    <span class="comment">// 调用 Sync 来将缓冲区的信息写入磁盘。</span></span><br><span class="line">    f.Sync()</span><br><span class="line">    <span class="comment">// bufio 提供了和我们前面看到的带缓冲的读取器一样的带缓冲的写入器。</span></span><br><span class="line">    w := bufio.NewWriter(f)</span><br><span class="line">    n4, err := w.WriteString(<span class="string">"buffered\n"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"wrote %d bytes\n"</span>, n4)</span><br><span class="line">    <span class="comment">// 使用 Flush 来确保所有缓存的操作已写入底层写入器。</span></span><br><span class="line">    w.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行过滤器"><a href="#行过滤器" class="headerlink" title="行过滤器"></a>行过滤器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在读取标准输入流的输入，处理该输入，然后将得到一些的结果输出到标准输出的程序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 对 os.Stdin 使用一个带缓冲的 scanner，让我们可以直接使用方便的 Scan 方法来直接读取一行，每次调用该方法可以让 scanner 读取下一行。</span></span><br><span class="line">    scanner := bufio.NewScanner(os.Stdin)</span><br><span class="line">    <span class="comment">// Text 返回当前的 token，现在是输入的下一行。</span></span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        ucl := strings.ToUpper(scanner.Text())</span><br><span class="line">        <span class="comment">// 写出大写的行。</span></span><br><span class="line">        fmt.Println(ucl)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查 Scan 的错误。文件结束符是可以接受的，并且不会被 Scan 当作一个错误。</span></span><br><span class="line">    <span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintln(os.Stderr, <span class="string">"error:"</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令行参数是指定程序运行参数的一个常见方式。例如，go run hello.go，程序 go 使用了 run 和 hello.go 两个参数。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// os.Args 提供原始命令行参数访问功能。注意，切片中的第一个参数是该程序的路径，并且 os.Args[1:]保存所有程序的的参数。</span></span><br><span class="line">    argsWithProg := os.Args</span><br><span class="line">    argsWithoutProg := os.Args[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment">// 你可以使用标准的索引位置方式取得单个参数的值。</span></span><br><span class="line">    arg := os.Args[<span class="number">3</span>]</span><br><span class="line">    fmt.Println(argsWithProg)    <span class="comment">// [./command-line-arguments a b c d]</span></span><br><span class="line">    fmt.Println(argsWithoutProg) <span class="comment">// [a b c d]</span></span><br><span class="line">    fmt.Println(arg)             <span class="comment">// c</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要实验命令行参数，最好先使用 go build 编译一个可执行二进制文件</span></span><br><span class="line"><span class="comment">// $ go build command-line-arguments.go</span></span><br><span class="line"><span class="comment">// $ ./command-line-arguments a b c d</span></span><br></pre></td></tr></table></figure><h3 id="命令行标志-未懂"><a href="#命令行标志-未懂" class="headerlink" title="命令行标志(未懂)"></a>命令行标志(未懂)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 基本的标记声明仅支持字符串、整数和布尔值选项。这里我们声明一个默认值为 "foo" 的字符串标志 word并带有一个简短的描述。</span></span><br><span class="line">    <span class="comment">// 这里的 flag.String 函数返回一个字符串指针（不是一个字符串值），在下面我们会看到是如何使用这个指针的。</span></span><br><span class="line">    wordPtr := flag.String(<span class="string">"word"</span>, <span class="string">"foo"</span>, <span class="string">"a string"</span>)</span><br><span class="line">    <span class="comment">// 使用和声明 word 标志相同的方法来声明 numb 和 fork 标志。</span></span><br><span class="line">    numbPtr := flag.Int(<span class="string">"numb"</span>, <span class="number">42</span>, <span class="string">"an int"</span>)</span><br><span class="line">    boolPtr := flag.Bool(<span class="string">"fork"</span>, <span class="literal">false</span>, <span class="string">"a bool"</span>)</span><br><span class="line">    <span class="comment">// 用程序中已有的参数来声明一个标志也是可以的。注意在标志声明函数中需要使用该参数的指针。</span></span><br><span class="line">    <span class="keyword">var</span> svar <span class="keyword">string</span></span><br><span class="line">    flag.StringVar(&amp;svar, <span class="string">"svar"</span>, <span class="string">"bar"</span>, <span class="string">"a string var"</span>)</span><br><span class="line">    <span class="comment">// 所有标志都声明完成以后，调用 flag.Parse() 来执行命令行解析。</span></span><br><span class="line">    flag.Parse()</span><br><span class="line">    <span class="comment">// 这里我们将仅输出解析的选项以及后面的位置参数。注意，我们需要使用类似 *wordPtr 这样的语法来对指针解引用，从而得到选项的实际值。</span></span><br><span class="line">    fmt.Println(<span class="string">"word:"</span>, *wordPtr)</span><br><span class="line">    fmt.Println(<span class="string">"numb:"</span>, *numbPtr)</span><br><span class="line">    fmt.Println(<span class="string">"fork:"</span>, *boolPtr)</span><br><span class="line">    fmt.Println(<span class="string">"svar:"</span>, svar)</span><br><span class="line">    fmt.Println(<span class="string">"tail:"</span>, flag.Args())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试这个程序前，最好将这个程序编译成二进制文件，然后再运行这个程序。</span></span><br><span class="line"><span class="comment">// $ go build command-line-flags.go</span></span><br><span class="line"><span class="comment">// word: opt</span></span><br><span class="line"><span class="comment">// numb: 7</span></span><br><span class="line"><span class="comment">// fork: true</span></span><br><span class="line"><span class="comment">// svar: flag</span></span><br><span class="line"><span class="comment">// tail: []</span></span><br><span class="line"><span class="comment">// 注意到，如果你省略一个标志，那么这个标志的值自动的设定为他的默认值。</span></span><br><span class="line"><span class="comment">// $ ./command-line-flags -word=opt</span></span><br><span class="line"><span class="comment">// word: opt</span></span><br><span class="line"><span class="comment">// numb: 42</span></span><br><span class="line"><span class="comment">// fork: false</span></span><br><span class="line"><span class="comment">// svar: bar</span></span><br><span class="line"><span class="comment">// tail: []</span></span><br><span class="line"><span class="comment">// 位置参数可以出现在任何标志后面。</span></span><br><span class="line"><span class="comment">// $ ./command-line-flags -word=opt a1 a2 a3</span></span><br><span class="line"><span class="comment">// word: opt</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// tail: [a1 a2 a3]</span></span><br><span class="line"><span class="comment">// 注意，flag 包需要所有的标志出现位置参数之前（否则，这个标志将会被解析为位置参数）。</span></span><br><span class="line"><span class="comment">// $ ./command-line-flags -word=opt a1 a2 a3 -numb=7</span></span><br><span class="line"><span class="comment">// word: opt</span></span><br><span class="line"><span class="comment">// numb: 42</span></span><br><span class="line"><span class="comment">// fork: false</span></span><br><span class="line"><span class="comment">// svar: bar</span></span><br><span class="line"><span class="comment">// trailing: [a1 a2 a3 -numb=7]</span></span><br><span class="line"><span class="comment">// 使用 -h 或者 --help 标志来得到自动生成的这个命令行程序的帮助文本。</span></span><br><span class="line"><span class="comment">// $ ./command-line-flags -h</span></span><br><span class="line"><span class="comment">// Usage of ./command-line-flags:</span></span><br><span class="line"><span class="comment">//   -fork=false: a bool</span></span><br><span class="line"><span class="comment">//   -numb=42: an int</span></span><br><span class="line"><span class="comment">//   -svar="bar": a string var</span></span><br><span class="line"><span class="comment">//   -word="foo": a string</span></span><br><span class="line"><span class="comment">// 如果你提供一个没有使用 flag 包指定的标志，程序会输出一个错误信息，并再次显示帮助文本。</span></span><br><span class="line"><span class="comment">// $ ./command-line-flags -wat</span></span><br><span class="line"><span class="comment">// flag provided but not defined: -wat</span></span><br><span class="line"><span class="comment">// Usage of ./command-line-flags:</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="环境变量-未懂"><a href="#环境变量-未懂" class="headerlink" title="环境变量(未懂)"></a>环境变量(未懂)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用 os.Setenv 来设置一个键值队。使用 os.Getenv获取一个键对应的值。如果键不存在，将会返回一个空字符串。</span></span><br><span class="line">    os.Setenv(<span class="string">"FOO"</span>, <span class="string">"1"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"FOO:"</span>, os.Getenv(<span class="string">"FOO"</span>))</span><br><span class="line">    fmt.Println(<span class="string">"BAR:"</span>, os.Getenv(<span class="string">"BAR"</span>))</span><br><span class="line">    <span class="comment">// 使用 os.Environ 来列出所有环境变量键值队。这个函数会返回一个 KEY=value 形式的字符串切片。你可以使用strings.Split 来得到键和值。这里我们打印所有的键。</span></span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="keyword">for</span> _, e := <span class="keyword">range</span> os.Environ() &#123;</span><br><span class="line">        pair := strings.Split(e, <span class="string">"="</span>)</span><br><span class="line">        fmt.Println(pair[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行这个程序，显示我们在程序中设置的 FOO 的值，然而没有设置的 BAR 是空的。</span></span><br><span class="line"><span class="comment">// $ go run environment-variables.go</span></span><br><span class="line"><span class="comment">// FOO: 1</span></span><br><span class="line"><span class="comment">// BAR:</span></span><br><span class="line"><span class="comment">// 键的列表是由你的电脑情况而定的。</span></span><br><span class="line"><span class="comment">// TERM_PROGRAM</span></span><br><span class="line"><span class="comment">// PATH</span></span><br><span class="line"><span class="comment">// SHELL</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 如果我们在运行前设置了 BAR 的值，那么运行程序将会获取到这个值。</span></span><br><span class="line"><span class="comment">// $ BAR=2 go run environment-variables.go</span></span><br><span class="line"><span class="comment">// FOO: 1</span></span><br><span class="line"><span class="comment">// BAR: 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="执行外部进程"><a href="#执行外部进程" class="headerlink" title="执行外部进程"></a>执行外部进程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们将从一个简单的命令开始，没有参数或者输入，仅打印一些信息到标准输出流。exec.Command 函数帮助我们创建一个表示这个外部进程的对象。</span></span><br><span class="line">    dateCmd := exec.Command(<span class="string">"date"</span>)</span><br><span class="line">    <span class="comment">// .Output 是另一个帮助我们处理运行一个命令的常见情况的函数，它等待命令运行完成，并收集命令的输出。如果没有出错，dateOut 将获取到日期信息的字节。</span></span><br><span class="line">    dateOut, err := dateCmd.Output()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"&gt; date"</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(dateOut))</span><br><span class="line">    <span class="comment">// 下面我们将看看一个稍复杂的例子，我们将从外部进程的stdin 输入数据并从 stdout 收集结果。</span></span><br><span class="line">    grepCmd := exec.Command(<span class="string">"grep"</span>, <span class="string">"hello"</span>)</span><br><span class="line">    <span class="comment">// 这里我们明确的获取输入/输出管道，运行这个进程，写入一些输入信息，读取输出的结果，最后等待程序运行结束。</span></span><br><span class="line">    grepIn, _ := grepCmd.StdinPipe()</span><br><span class="line">    grepOut, _ := grepCmd.StdoutPipe()</span><br><span class="line">    grepCmd.Start()</span><br><span class="line">    grepIn.Write([]<span class="keyword">byte</span>(<span class="string">"hello grep\ngoodbye grep"</span>))</span><br><span class="line">    grepIn.Close()</span><br><span class="line">    grepBytes, _ := ioutil.ReadAll(grepOut)</span><br><span class="line">    grepCmd.Wait()</span><br><span class="line">    <span class="comment">// 上面的例子中，我们忽略了错误检测，但是你可以使用if err != nil 的方式来进行错误检查，我们也只收集StdoutPipe 的结果，但是你可以使用相同的方法收集StderrPipe 的结果。</span></span><br><span class="line">    fmt.Println(<span class="string">"&gt; grep hello"</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(grepBytes))</span><br><span class="line">    <span class="comment">// 注意，当我们需要提供一个明确的命令和参数数组来生成命令，和能够只需要提供一行命令行字符串相比，你想使用通过一个字符串生成一个完整的命令，那么你可以使用 bash命令的 -c 选项：</span></span><br><span class="line">    lsCmd := exec.Command(<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"ls -a -l -h"</span>)</span><br><span class="line">    lsOut, err := lsCmd.Output()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">"&gt; ls -a -l -h"</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(lsOut))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="替换执行进程"><a href="#替换执行进程" class="headerlink" title="替换执行进程"></a>替换执行进程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 有时候只想 用其他的（也许是非 Go 程序）来完全替代当前的 Go 进程</span></span><br><span class="line">    <span class="comment">// 在我们的例子中，我们将执行 ls 命令。Go 需要提供我 们需要执行的可执行文件的绝对路径，所以我们将使用 exec.LookPath 来得到它（大概是 /bin/ls）。</span></span><br><span class="line">    binary, lookErr := exec.LookPath(<span class="string">"ls"</span>)</span><br><span class="line">    <span class="keyword">if</span> lookErr != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(lookErr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Exec 需要的参数是切片的形式的（不是放在一起的一个大字 符串）。我们给 ls 一些基本的参数。注意，第一个参数需要 是程序名。</span></span><br><span class="line">    args := []<span class="keyword">string</span>&#123;<span class="string">"ls"</span>, <span class="string">"-a"</span>, <span class="string">"-l"</span>, <span class="string">"-h"</span>&#125;</span><br><span class="line">    <span class="comment">// Exec 同样需要使用环境变量。 这里我们仅提供当前的环境变量。</span></span><br><span class="line">    env := os.Environ()</span><br><span class="line">    <span class="comment">// 这里是 os.Exec 调用。如果这个调用成功，那么我们的 进程将在这里被替换成 /bin/ls -a -l -h 进程。如果存 在错误，那么我们将会得到一个返回值。</span></span><br><span class="line">    execErr := syscall.Exec(binary, args, env)</span><br><span class="line">    <span class="keyword">if</span> execErr != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(execErr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行程序时，它会替换为 ls</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Go 通过向一个通道发送 os.Signal 值来进行信号通知。我们 将创建一个通道来接收这些通知（同时还创建一个用于在程序可 以结束时进行通知的通道）。</span></span><br><span class="line">    sigs := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// signal.Notify 注册这个给定的通道用于接收特定信号。</span></span><br><span class="line">    signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)</span><br><span class="line">    <span class="comment">// 这个 Go 协程执行一个阻塞的信号接收操作。当它得到一个 值时，它将打印这个值，然后通知程序可以退出。</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sig := &lt;-sigs</span><br><span class="line">        fmt.Println()</span><br><span class="line">        fmt.Println(sig)</span><br><span class="line">        done &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 程序将在这里进行等待，直到它得到了期望的信号（也就 是上面的 Go 协程发送的 done 值）然后退出。</span></span><br><span class="line">    fmt.Println(<span class="string">"awaiting signal"</span>)</span><br><span class="line">    &lt;-done</span><br><span class="line">    fmt.Println(<span class="string">"exiting"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们运行这个程序时，它将一直等待一个信号。使用 ctrl-C （终端显示为 ^C），我们可以发送一个 SIGINT 信号，这会 使程序打印 interrupt 然后退出。</span></span><br><span class="line"><span class="comment">// $ go run signals.go</span></span><br><span class="line"><span class="comment">// awaiting signal</span></span><br><span class="line"><span class="comment">// ^C</span></span><br><span class="line"><span class="comment">// interrupt</span></span><br><span class="line"><span class="comment">// exiting</span></span><br></pre></td></tr></table></figure><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 当使用 os.Exit 时 defer 将不会 执行，所以这里的 fmt.Println 将永远不会被调用。</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"!"</span>)</span><br><span class="line">    <span class="comment">// 退出并且退出状态为 3。</span></span><br><span class="line">    os.Exit(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;go&lt;/code&gt;的学习,感谢&lt;a href=&quot;https://gobyexample.xgwang.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go By Example&lt;/a&gt;、&lt;a href=&quot;https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;go 网络编程&lt;/a&gt;与&lt;a href=&quot;http://books.studygolang.com/The-Golang-Standard-Library-by-Example/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;go 语言标准库&lt;/a&gt;,随着学习的深入,此文章持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhaohang.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="go" scheme="http://zhaohang.site/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>前端测试初探</title>
    <link href="http://zhaohang.site/2017/11/22/%E5%89%8D%E7%AB%AF%E6%B5%8B%E8%AF%95%E5%88%9D%E6%8E%A2/"/>
    <id>http://zhaohang.site/2017/11/22/前端测试初探/</id>
    <published>2017-11-22T15:10:12.000Z</published>
    <updated>2018-01-05T13:34:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直知道前端也是有测试的,但理解很肤浅,今天下定决心摸索一遍到底什么是前端自动化测试…</p><a id="more"></a><blockquote><p>本例子通过<code>vue-cli</code>生成的<code>unit</code>与<code>e2e</code>来探讨…</p></blockquote><h3 id="基础名词"><a href="#基础名词" class="headerlink" title="基础名词"></a>基础名词</h3><p>一些前端测试的名词解释:</p><ul><li><p><a href="http://karma-runner.github.io/0.13/index.html" target="_blank" rel="noopener">karma</a>是一个基于<code>Node.js</code>的<code>JavaScript</code>测试执行过程管理工具，其在测试中的作用相当于开发构建中使用的<code>webpack</code></p></li><li><p><a href="https://github.com/webpack/karma-webpack" target="_blank" rel="noopener">karma-webpack</a>连接<code>karma</code>和<code>webpack</code>的桥梁。不经过<code>webpack</code>编译命令是文件是无法独立运行的，<code>karma</code>需要了解你的<code>webpack</code>配置，决定如何处理你的测试文件。</p></li><li><p><a href="https://github.com/karma-runner/karma-phantomjs-launcher" target="_blank" rel="noopener">karma-phantomjs-launcher</a>是<code>phantomjs</code>在<code>karma</code>中的启动器，由此引出了<a href="https://github.com/ariya/phantomjs" target="_blank" rel="noopener">PhantomJS</a>,一个基于 webkit 内核的无头浏览器，即没有 UI 界面，即它就是一个浏览器，只是其内的点击、翻页等人为相关操作需要程序设计实现。在查找相关资料时，也发现了其他的常规浏览器<code>launcher</code>，比如：<code>Chrome、Firefox、Safari、IE</code> 等，以应对不同浏览器或多浏览器的测试需求。见<a href="http://karma-runner.github.io/0.13/config/browsers.html" target="_blank" rel="noopener">Browsers</a></p></li><li><p><a href="https://github.com/demerzel3/karma-sourcemap-loader" target="_blank" rel="noopener">karma-sourcemap-loader</a>一个<code>Karma</code>插件，生成文件的<code>sourcemap</code></p></li><li><p><a href="https://github.com/karma-runner/karma-mocha" target="_blank" rel="noopener">karma-mocha</a>让你在<code>karma</code>中使用<a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a>一款功能丰富的<code>javascript</code>单元测试框架，它既可以运行在<code>nodejs</code>环境中，也可以运行在浏览器环境中</p></li><li><p><a href="https://github.com/domenic/sinon-chai" target="_blank" rel="noopener">karma-sinon-chai</a>让你在<code>karma</code>中使用<code>sinon-chai</code>断言库的插件, 提供丰富的断言方法,前置依赖有<code>sinon-chai</code>、<code>sinon</code>、<code>chai</code>…</p></li><li><p><a href="https://github.com/mlex/karma-spec-reporter" target="_blank" rel="noopener">karma-spec-reporter</a>用于将测试结果显示到控制台。</p></li><li><p><a href="https://github.com/karma-runner/karma-coverage" target="_blank" rel="noopener">karma-coverage</a>用来生成代码覆盖率。</p></li><li><p><a href="http://seleniumhq.github.io/selenium/docs/api/javascript/index.html" target="_blank" rel="noopener">Nightwatch</a>是一套基于 Node.js 的测试框架，使用 Selenium WebDriver API 以将 Web 应用测试自动化。它提供了简单的语法，支持使用 JavaScript 和 CSS 选择器，来编写运行在 Selenium 服务器上的端到端测试。</p></li></ul><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p><code>unit</code>目录结构,主要测试单元是一个个函数、方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">└── unit</span><br><span class="line">    ├── coverage  代码覆盖率报告，src下面的index.html可以直接用浏览器打开</span><br><span class="line">    │   ├── lcov-report</span><br><span class="line">    │   │   ├── base.css</span><br><span class="line">    │   │   ├── index.html</span><br><span class="line">    │   │   ├── prettify.css</span><br><span class="line">    │   │   ├── prettify.js</span><br><span class="line">    │   │   ├── sort-arrow-sprite.png</span><br><span class="line">    │   │   ├── sorter.js</span><br><span class="line">    │   │   └── src</span><br><span class="line">    │   │       ├── App<span class="selector-class">.vue</span><span class="selector-class">.html</span></span><br><span class="line">    │   │       ├── components</span><br><span class="line">    │   │       │   ├── Hello<span class="selector-class">.vue</span><span class="selector-class">.html</span></span><br><span class="line">    │   │       │   └── index.html</span><br><span class="line">    │   │       └── index.html</span><br><span class="line">    │   └── lcov.info</span><br><span class="line">    ├── index<span class="selector-class">.js</span> 运行测试用例前先加载的文件，方便统计代码覆盖率</span><br><span class="line">    ├── karma<span class="selector-class">.conf</span><span class="selector-class">.js</span> karma的配置文件</span><br><span class="line">    └── specs 所有的测试用例都放在这里</span><br><span class="line">        └── Hello<span class="selector-class">.spec</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure><p><code>karma.conf.js</code>内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    config.set(&#123;</span><br><span class="line">        <span class="comment">// 要启动的测试浏览器</span></span><br><span class="line">        browsers: [ <span class="string">'Chrome'</span>],</span><br><span class="line">        <span class="comment">// 测试框架</span></span><br><span class="line">        frameworks: [<span class="string">'mocha'</span>, <span class="string">'sinon-chai'</span>],</span><br><span class="line">        <span class="comment">// 测试报告处理</span></span><br><span class="line">        reporters: [<span class="string">'spec'</span>, <span class="string">'coverage'</span>],</span><br><span class="line">        <span class="comment">// 要测试的目标文件</span></span><br><span class="line">        files: [<span class="string">'./index.js'</span>],</span><br><span class="line">        <span class="comment">// 忽略的文件</span></span><br><span class="line">        exclude: [],</span><br><span class="line">        <span class="comment">// 预处理文件</span></span><br><span class="line">        preprocessors: &#123;</span><br><span class="line">            <span class="string">'./index.js'</span>: [<span class="string">'webpack'</span>, <span class="string">'sourcemap'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// webpack</span></span><br><span class="line">        webpack: webpackConfig,</span><br><span class="line">        webpackMiddleware: &#123;</span><br><span class="line">            noInfo: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Coverage options</span></span><br><span class="line">        coverageReporter: &#123;</span><br><span class="line">            dir: <span class="string">'./coverage'</span>,</span><br><span class="line">            reporters: [</span><br><span class="line">                &#123; <span class="attr">type</span>: <span class="string">'lcov'</span>, <span class="attr">subdir</span>: <span class="string">'.'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">type</span>: <span class="string">'text-summary'</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// true: 自动运行测试并退出</span></span><br><span class="line">        <span class="comment">// false: 监控文件持续测试</span></span><br><span class="line">        singleRun: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 以下是 vue-cli 没有生成的一些配置</span></span><br><span class="line">        <span class="comment">// 文件匹配的起始路径</span></span><br><span class="line">        <span class="comment">// basePath: '',</span></span><br><span class="line">        <span class="comment">// 服务器端口</span></span><br><span class="line">        <span class="comment">// port: 9876,</span></span><br><span class="line">        <span class="comment">// 输出着色</span></span><br><span class="line">        <span class="comment">// colors: true,</span></span><br><span class="line">        <span class="comment">// 日志级别</span></span><br><span class="line">        <span class="comment">// LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG</span></span><br><span class="line">        <span class="comment">// logLevel: config.LOG_INFO,</span></span><br><span class="line">        <span class="comment">// 监控文件更改</span></span><br><span class="line">        <span class="comment">// autoWatch: true,</span></span><br><span class="line">        <span class="comment">// 超时处理，6s内没有捕获浏览器将终止进程</span></span><br><span class="line">        <span class="comment">// captureTimeout: 6000</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.js</code>入口文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载所有的测试用例、 testsContext.keys().forEach(testsContext)这种写法是webpack中的加载目录下所有文件的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配的是specs目录，里面是存放的是测试用例</span></span><br><span class="line"><span class="keyword">const</span> testsContext = <span class="keyword">require</span>.context(<span class="string">'./specs'</span>, <span class="keyword">true</span>, /\.spec$/)</span><br><span class="line">testsContext.keys().<span class="keyword">forEach</span>(testsContext)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载所有代码文件，方便统计代码覆盖率</span></span><br><span class="line"><span class="comment">// 匹配的是src目录，除了main.js以外的所有文件。</span></span><br><span class="line"><span class="keyword">const</span> srcContext = <span class="keyword">require</span>.context(<span class="string">'../../src'</span>, <span class="keyword">true</span>, /^\.\/(?!main(\.js)?$)/)</span><br><span class="line">srcContext.keys().<span class="keyword">forEach</span>(srcContext)</span><br></pre></td></tr></table></figure><p><code>e2e</code>目录结构,测试的单元是一个个预期的行为表现,打开游览器,模拟测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="selector-tag">e2e</span></span><br><span class="line">│   ├── <span class="selector-tag">custom-assertions</span></span><br><span class="line">│   │   └── <span class="selector-tag">elementCount</span><span class="selector-class">.js</span> 自定义的断言方法</span><br><span class="line">│   ├── <span class="selector-tag">nightwatch</span><span class="selector-class">.conf</span><span class="selector-class">.js</span> <span class="selector-tag">nightwatch</span>的配置文件</span><br><span class="line">│   ├── <span class="selector-tag">reports</span></span><br><span class="line">│   │   ├── <span class="selector-tag">CHROME_60</span><span class="selector-class">.0</span><span class="selector-class">.3112</span><span class="selector-class">.101_Mac</span>\ <span class="selector-tag">OS</span>\ <span class="selector-tag">X_test</span><span class="selector-class">.xml</span></span><br><span class="line">│   │   └── <span class="selector-tag">CHROME_60</span><span class="selector-class">.0</span><span class="selector-class">.3112</span><span class="selector-class">.113_Mac</span>\ <span class="selector-tag">OS</span>\ <span class="selector-tag">X_test</span><span class="selector-class">.xml</span></span><br><span class="line">│   ├── <span class="selector-tag">runner</span><span class="selector-class">.js</span>  <span class="selector-tag">bootstrap</span>文件，起我们的页面<span class="selector-tag">server</span>和<span class="selector-tag">nightwatch</span>文件</span><br><span class="line">│   └── <span class="selector-tag">specs</span></span><br><span class="line">│       └── <span class="selector-tag">test</span><span class="selector-class">.js</span> 测试用例</span><br></pre></td></tr></table></figure><p><code>nightwatch.conf.js</code>内容</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">src_folders</span>: [<span class="string">'test/e2e/specs'</span>],</span><br><span class="line"><span class="attribute">output_folder</span>: <span class="string">'test/e2e/reports'</span>,</span><br><span class="line"><span class="attribute">custom_assertions_path</span>: [<span class="string">'test/e2e/custom-assertions'</span>],</span><br><span class="line">  <span class="comment">// 对selenium的配置</span></span><br><span class="line"><span class="attribute">selenium</span>: &#123;</span><br><span class="line">  <span class="attribute">start_process</span>: true,</span><br><span class="line">  <span class="attribute">server_path</span>: require(<span class="string">'selenium-server'</span>).path,</span><br><span class="line">  <span class="attribute">host</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  <span class="attribute">port</span>: <span class="number">4444</span>,</span><br><span class="line">  <span class="attribute">cli_args</span>: &#123;</span><br><span class="line">    <span class="string">'webdriver.chrome.driver'</span>: require(<span class="string">'chromedriver'</span>).path</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="comment">// 测试环境的配置</span></span><br><span class="line"><span class="attribute">test_settings</span>: &#123;</span><br><span class="line">  <span class="attribute">default</span>: &#123;</span><br><span class="line">    <span class="attribute">selenium_port</span>: <span class="number">4444</span>,</span><br><span class="line">    <span class="attribute">selenium_host</span>: <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="attribute">silent</span>: true,</span><br><span class="line">    <span class="attribute">globals</span>: &#123;</span><br><span class="line">      <span class="attribute">devServerURL</span>: <span class="string">'http://localhost:'</span> + (process.env.PORT || config.dev.port)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">chrome</span>: &#123;</span><br><span class="line">    <span class="attribute">desiredCapabilities</span>: &#123;</span><br><span class="line">      <span class="attribute">browserName</span>: <span class="string">'chrome'</span>,</span><br><span class="line">      <span class="attribute">javascriptEnabled</span>: true,</span><br><span class="line">      <span class="attribute">acceptSslCerts</span>: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attribute">firefox</span>: &#123;</span><br><span class="line">    <span class="attribute">desiredCapabilities</span>: &#123;</span><br><span class="line">      <span class="attribute">browserName</span>: <span class="string">'firefox'</span>,</span><br><span class="line">      <span class="attribute">javascriptEnabled</span>: true,</span><br><span class="line">      <span class="attribute">acceptSslCerts</span>: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runner.js</code>入口文件内容,先起一个我们的网页服务然后再起 nightWatch 服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'../../build/dev-server.js'</span>)</span><br><span class="line"></span><br><span class="line">server.ready.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2. run the nightwatch test suite against it</span></span><br><span class="line">  <span class="comment">// to run in additional browsers:</span></span><br><span class="line">  <span class="comment">//    1. add an entry in test/e2e/nightwatch.conf.json under "test_settings"</span></span><br><span class="line">  <span class="comment">//    2. add it to the --env flag below</span></span><br><span class="line">  <span class="comment">// or override the environment flag, for example: `npm run e2e -- --env chrome,firefox`</span></span><br><span class="line">  <span class="comment">// For more information on Nightwatch's config file, see</span></span><br><span class="line">  <span class="comment">// http://nightwatchjs.org/guide#settings-file</span></span><br><span class="line">  <span class="keyword">var</span> opts = process.argv.slice(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(opts);</span><br><span class="line">  <span class="keyword">if</span> (opts.indexOf(<span class="string">'--config'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">    opts = opts.concat([<span class="string">'--config'</span>, <span class="string">'test/e2e/nightwatch.conf.js'</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.indexOf(<span class="string">'--env'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">    opts = opts.concat([<span class="string">'--env'</span>, <span class="string">'chrome,firefox'</span>])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'cross-spawn'</span>)</span><br><span class="line">  <span class="keyword">var</span> runner = spawn(<span class="string">'./node_modules/.bin/nightwatch'</span>, opts, &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;)</span><br><span class="line"></span><br><span class="line">  runner.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">    server.close()</span><br><span class="line">    process.exit(code)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  runner.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    server.close()</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="工具详解"><a href="#工具详解" class="headerlink" title="工具详解"></a>工具详解</h3><h4 id="chai"><a href="#chai" class="headerlink" title="chai"></a>chai</h4><p>定义几个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const math = &#123;</span><br><span class="line">    add: (...args) =&gt; args.reduce((num, value) =&gt; num + value),</span><br><span class="line">    mul: (...args) =&gt; args.reduce((num, value) =&gt; num * value),</span><br><span class="line">    cover: (a, b) =&gt; &#123;</span><br><span class="line">        if (a &gt; b) &#123;</span><br><span class="line">            return a - b</span><br><span class="line">        &#125; else if (a == b) &#123;</span><br><span class="line">            return a + b</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return -1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>node</code>自带的断言测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const assert = require(&apos;assert&apos;)</span><br><span class="line">const &#123;add, mul&#125; = require(&apos;./math&apos;)</span><br><span class="line">assert.equal(add(2, 3), 5)</span><br></pre></td></tr></table></figure><p>引入<code>chai</code>库测试,3 个方法作用一样,断言分格不同而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const chai = require(&apos;chai&apos;)</span><br><span class="line">// should</span><br><span class="line">chai.should()</span><br><span class="line">add(2, 3).should.equal(5)</span><br><span class="line">// expect</span><br><span class="line">consr expect = chai.expect</span><br><span class="line">expect(add(2, 3).to.be(5)</span><br><span class="line">// assert</span><br><span class="line">consr assert = chai.assert</span><br><span class="line">assert.equal(add(2, 3), 5)</span><br></pre></td></tr></table></figure><p><code>expect</code>断言的优点是很接近自然语言，下面是一些例子</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相等或不相等</span></span><br><span class="line"><span class="selector-tag">expect</span>(<span class="number">4</span> + <span class="number">5</span>)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.equal</span>(<span class="number">9</span>);</span><br><span class="line"><span class="selector-tag">expect</span>(<span class="number">4</span> + <span class="number">5</span>)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.not</span><span class="selector-class">.equal</span>(<span class="number">10</span>);</span><br><span class="line"><span class="selector-tag">expect</span>(foo)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.deep</span><span class="selector-class">.equal</span>(&#123; <span class="attribute">bar</span>: <span class="string">'baz'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔值为true</span></span><br><span class="line"><span class="selector-tag">expect</span>(<span class="string">'everthing'</span>)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.ok</span>;</span><br><span class="line"><span class="selector-tag">expect</span>(false)<span class="selector-class">.to</span><span class="selector-class">.not</span><span class="selector-class">.be</span><span class="selector-class">.ok</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof</span></span><br><span class="line"><span class="selector-tag">expect</span>(<span class="string">'test'</span>)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.a</span>(<span class="string">'string'</span>);</span><br><span class="line"><span class="selector-tag">expect</span>(&#123; <span class="attribute">foo</span>: <span class="string">'bar'</span> &#125;)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.an</span>(<span class="string">'object'</span>);</span><br><span class="line"><span class="selector-tag">expect</span>(foo)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.an</span><span class="selector-class">.instanceof</span>(Foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// include</span></span><br><span class="line"><span class="selector-tag">expect</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="selector-class">.to</span><span class="selector-class">.include</span>(<span class="number">2</span>);</span><br><span class="line"><span class="selector-tag">expect</span>(<span class="string">'foobar'</span>)<span class="selector-class">.to</span><span class="selector-class">.contain</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="selector-tag">expect</span>(&#123; <span class="attribute">foo</span>: <span class="string">'bar'</span>, <span class="attribute">hello</span>: <span class="string">'universe'</span> &#125;)<span class="selector-class">.to</span><span class="selector-class">.include</span><span class="selector-class">.keys</span>(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// empty</span></span><br><span class="line"><span class="selector-tag">expect</span>([])<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.empty</span>;</span><br><span class="line"><span class="selector-tag">expect</span>(<span class="string">''</span>)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.empty</span>;</span><br><span class="line"><span class="selector-tag">expect</span>(&#123;&#125;)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.empty</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// match</span></span><br><span class="line"><span class="selector-tag">expect</span>(<span class="string">'foobar'</span>)<span class="selector-class">.to</span><span class="selector-class">.match</span>(/^foo/);</span><br></pre></td></tr></table></figure><p>基本上，<code>expect</code>断言的写法都是一样的。头部是<code>expect</code>方法，尾部是断言方法，比如<code>equal、a/an、ok、match</code>等。两者之间使用 to 或 to.be 连接</p><p>如果<code>expect</code>断言不成立，就会抛出一个错误。只要不抛出错误，测试用例就算通过</p><h3 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h3><p><code>Mocha</code>的作用是运行测试脚本，首先必须学会写测试脚本。所谓”测试脚本”，就是用来测试源码的脚本<br><code>Mocha</code>默认运行<code>test</code>子目录里面的测试脚本 添加<code>--recursive</code>参数可以运行<code>test</code>目录下所有层数用例基本用法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'#math'</span>, () =&gt; &#123;</span><br><span class="line">    describe(<span class="string">'add'</span>, () =&gt; &#123;</span><br><span class="line">        it(<span class="string">'should return 5 when 2 + 3'</span>, () =&gt; &#123;</span><br><span class="line">            assert(add(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    describe(<span class="string">'mul'</span>, () =&gt; &#123;</span><br><span class="line">        it(<span class="string">'should return 6 when 2 * 3'</span>, () =&gt; &#123;</span><br><span class="line">            assert(mul(<span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 只执行此条</span></span><br><span class="line">       it.only(<span class="string">'should return 6 when 2 * 3'</span>, () =&gt; &#123;</span><br><span class="line">            assert(mul(<span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">       <span class="comment">// 忽略此条</span></span><br><span class="line">       it.skip(<span class="string">'should return 6 when 2 * 3'</span>, () =&gt; &#123;</span><br><span class="line">            assert(mul(<span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    describe(<span class="string">'mul'</span>, () =&gt; &#123;</span><br><span class="line">        it(<span class="string">'should return -1 when 2 &lt; 3'</span>, () =&gt; &#123;</span><br><span class="line">            assert(cover(<span class="number">2</span>, <span class="number">3</span>), <span class="number">-1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        it(<span class="string">'should return 1 when 3 &gt; 2'</span>, () =&gt; &#123;</span><br><span class="line">            assert(cover(<span class="number">3</span>, <span class="number">2</span>), <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        it(<span class="string">'should return 4 when 2 = 2'</span>, () =&gt; &#123;</span><br><span class="line">            assert(cover(<span class="number">2</span>, <span class="number">2</span>), <span class="number">4</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>异步例子:<br><code>it</code>块执行的时候，传入一个<code>done</code>参数，当测试结束的时候，必须显式调用这个函数，告诉<code>Mocha</code>测试结束了需要用<code>-t</code>或<code>--timeout</code>参数，改变默认的<code>(2000)</code>超时设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $ mocha -t 5000 timeout.test.js</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'测试应该5000毫秒后结束'</span>, done =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    x = <span class="literal">false</span>;</span><br><span class="line">    expect(x).to.be.not.ok;</span><br><span class="line">    done(); <span class="comment">// 通知Mocha测试结束</span></span><br><span class="line">  &#125;;</span><br><span class="line">  setTimeout(f, <span class="number">4000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>测试用例的钩子:<br><code>Mocha</code>在<code>describe</code>块之中，提供测试用例的四个钩子：<code>before()、after()、beforeEach()和afterEach()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'hooks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h4><p><code>benchmark</code>是一个测试函数性能的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var suite = new Benchmark.Suite;</span><br><span class="line">// add tests</span><br><span class="line">suite.add(&apos;RegExp#test&apos;, function() &#123;</span><br><span class="line">  /o/.test(&apos;Hello World!&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">.add(&apos;String#indexOf&apos;, function() &#123;</span><br><span class="line">  &apos;Hello World!&apos;.indexOf(&apos;o&apos;) &gt; -1;</span><br><span class="line">&#125;)</span><br><span class="line">.add(&apos;String#match&apos;, function() &#123;</span><br><span class="line">  !!&apos;Hello World!&apos;.match(/o/);</span><br><span class="line">&#125;)</span><br><span class="line">// add listeners</span><br><span class="line">.on(&apos;cycle&apos;, function(event) &#123;</span><br><span class="line">  console.log(String(event.target));</span><br><span class="line">&#125;)</span><br><span class="line">.on(&apos;complete&apos;, function() &#123;</span><br><span class="line">  console.log(&apos;Fastest is &apos; + this.filter(&apos;fastest&apos;).map(&apos;name&apos;));</span><br><span class="line">&#125;)</span><br><span class="line">// run async</span><br><span class="line">.run(&#123; &apos;async&apos;: true &#125;);</span><br></pre></td></tr></table></figure><h4 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h4><p><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">Puppeteer</a>是类似于<code>Nightwatch</code>的一个<code>Chrome</code>专用版,有更友好的 api,是用来测试游览器环境的一个工具也可用于爬虫,比如这个<a href="https://github.com/blossom91/demoNode/blob/master/reptile/puppeteer.js" target="_blank" rel="noopener">demo</a>演示了爬取百度图片,相较于<code>cheerio</code>,它的爬虫更模拟真实环境,不易反爬虫</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://example.com'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;path: <span class="string">'example.png'</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h3><p>哦,是不是这一大堆东西看晕了,用个<code>karma</code>还要集成一大堆各种插件配置,这一点上真是跟<code>webpack</code>一样了就像有人受不了<code>webpack</code>这一大堆配置所以有了前端构建集成工具<a href="http://www.parceljs.io/" target="_blank" rel="noopener">Parcel</a><br>而<a href="http://facebook.github.io/jest/" target="_blank" rel="noopener">Jest</a>就是这样一个前端测试集成工具<br><a href="http://facebook.github.io/jest/" target="_blank" rel="noopener">Jest</a>的官方文档支持中文,这里就不详细说明了,有兴趣可以去官网查看相比于<code>karma</code>最大特点就是快和方便,缺点就是没有<code>karma</code>测试环境真实和自由具体抉择,仁者见仁智者见智啦~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直知道前端也是有测试的,但理解很肤浅,今天下定决心摸索一遍到底什么是前端自动化测试…&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhaohang.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="karma" scheme="http://zhaohang.site/tags/karma/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习</title>
    <link href="http://zhaohang.site/2017/11/12/mysql%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhaohang.site/2017/11/12/mysql学习/</id>
    <published>2017-11-12T12:40:12.000Z</published>
    <updated>2018-06-13T01:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>mysql</code> 的学习,感谢<a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>与<a href="https://ninghao.net/package/mysql" target="_blank" rel="noopener">宁皓网</a>提供的优秀资料随着学习的深入,此文章持续更新…</p><a id="more"></a><p><br><br>MySQL 是一个关系型数据库管理系统,下面是一些术语解释:</p><ul><li>数据库: 数据库是一些关联表的集合。.</li><li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li><li>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>mysql.server start</code></td><td style="text-align:center">开启</td></tr><tr><td style="text-align:center"><code>mysql.server stop</code></td><td style="text-align:center">关闭</td></tr><tr><td style="text-align:center"><code>mysql.server restart</code></td><td style="text-align:center">重启</td></tr><tr><td style="text-align:center"><code>mysql.server reload</code></td><td style="text-align:center">重加载</td></tr><tr><td style="text-align:center"><code>mysql.server force-reload</code></td><td style="text-align:center">强制重载</td></tr><tr><td style="text-align:center"><code>mysql.server status</code></td><td style="text-align:center">状态</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 命令行导入数据库</span><br><span class="line">$ mysql -u root -p 数据库 &lt; 数据库文件.sql;</span><br></pre></td></tr></table></figure><hr><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 用户登录 默认本地  显示警告信息</span><br><span class="line">$ mysql [-h hostname] -u uesr [-p ] [--show-warnings]</span><br><span class="line"></span><br><span class="line"># 创建新用户  localhost: 本地</span><br><span class="line">$ CREATE USER <span class="string">'name'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line"></span><br><span class="line"># 权限: ALL PRIVILEGES 表示所有  数据库.数据表: .表示所有   数据库.* 表示某个库的所有表 主机名:localhost</span><br><span class="line">$ GRANT 权限 ON 数据库.数据表 TO <span class="string">'用户'</span>@<span class="string">'主机名'</span> [IDENTIFIED BY <span class="string">'密码'</span>];</span><br><span class="line"></span><br><span class="line"># 修改立即生效</span><br><span class="line">$ flush privileges;</span><br><span class="line"></span><br><span class="line"># 查看数据库系统里面的所有的用户</span><br><span class="line">$ <span class="keyword">select</span> user from mysql.user;</span><br><span class="line"></span><br><span class="line"># 查看表里的所有的字段</span><br><span class="line">$ desc mysql.user;</span><br><span class="line"></span><br><span class="line"># 查看 mysql 全局系统里面的用户的select_priv权限</span><br><span class="line">$ <span class="keyword">select</span> user, select_priv from mysql.user;</span><br><span class="line"></span><br><span class="line"># 查看特定的数据库上的权限</span><br><span class="line">$ <span class="keyword">select</span> user, db, select_priv from mysql.db;</span><br><span class="line"></span><br><span class="line"># 查看一下用户拥有的权限</span><br><span class="line">$ show grants <span class="keyword">for</span> blssom@localhost</span><br><span class="line"></span><br><span class="line"># 删除更新 删除权限 在某个数据库的所有表上</span><br><span class="line">$ revoke update, <span class="built_in">delete</span> on 数据库.* from blssom@localhost</span><br><span class="line"></span><br><span class="line"># 为用户设置密码<span class="string">"hello"</span></span><br><span class="line">$ set password <span class="keyword">for</span> blssom@localhost = password(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line"># 删除用户</span><br><span class="line">$ drop user blssom@localhost</span><br></pre></td></tr></table></figure><hr><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>varchar(255)</code></td><td style="text-align:center">最大 255 字节的 string</td></tr><tr><td style="text-align:center"><code>date</code></td><td style="text-align:center">时间</td></tr><tr><td style="text-align:center"><code>TEXT</code></td><td style="text-align:center">长文本</td></tr><tr><td style="text-align:center"><code>INT(10)</code></td><td style="text-align:center">最大 10 位数字</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库 (如果不存在再创建)</span><br><span class="line">$ CREATE DATABASE [IF NOT EXISTS] blssomHome [charset=utf8]</span><br><span class="line"></span><br><span class="line"># 显示所有数据库</span><br><span class="line">$ show databases;</span><br><span class="line"></span><br><span class="line"># 切换 数据库</span><br><span class="line">$ USE blssomHome;</span><br><span class="line"></span><br><span class="line"># 删除 数据库</span><br><span class="line">$ DROP DATABASE blssomHome;</span><br><span class="line"></span><br><span class="line"># 显示数据库的所有表</span><br><span class="line">$ SHOW TABLES;</span><br><span class="line"></span><br><span class="line"># 创建数据表 film定义<span class="number">3</span>个字段unsigned:不能为负</span><br><span class="line">$ CREATE TABLE film(</span><br><span class="line">id INT(<span class="number">10</span>) unsigned not null auto_increment,</span><br><span class="line">name varchar(<span class="number">255</span>)  DEFAULT <span class="number">0</span> COMMENT <span class="string">'这里是注释'</span>,</span><br><span class="line">date date,</span><br><span class="line">PRIMARY KEY(id)</span><br><span class="line">) <span class="keyword">default</span> charset=utf8</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"># 查看数据表详细信息</span><br><span class="line">$ DESCRIBE film;</span><br><span class="line"></span><br><span class="line"># ALTER TABLE 语句 添加字段在开头(默认末尾)</span><br><span class="line">$ ALTER TABLE film ADD fid INT(<span class="number">10</span>) FIRST;</span><br><span class="line"></span><br><span class="line"># ALTER TABLE 语句 添加字段在name之后</span><br><span class="line">$ ALTER TABLE film ADD fid INT(<span class="number">10</span>) AFTER name;</span><br><span class="line"></span><br><span class="line"># PRIMARY KEY 添加主键</span><br><span class="line">$ ALTER TABLE film ADD PRIMARY KEY (fid);</span><br><span class="line"></span><br><span class="line"># 改变数据栏名字</span><br><span class="line">$ ALTER TABLE film CHANGE fid film_id INT(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"># 重命名数据表</span><br><span class="line">$ ALTER TABLE film RENAME TO movie;</span><br><span class="line"></span><br><span class="line"># 删除数据栏</span><br><span class="line">$ ALTER TABLE movie DROP film_content;</span><br><span class="line"></span><br><span class="line"># 删除数据表</span><br><span class="line">$ DROP TABLE movie;</span><br></pre></td></tr></table></figure><hr><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 添加数据 按顺序添加 按栏添加</span><br><span class="line">$ INSERT INTO 数据表 (栏<span class="number">1</span>, 栏<span class="number">2</span>, 栏<span class="number">3</span>) VALUES (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>);</span><br><span class="line">$ INSERT INTO people VALUES (NULL, <span class="string">'华盛顿'</span>, <span class="string">'1954-12-28'</span>, <span class="string">'美国'</span>);</span><br><span class="line">$ INSERT INTO people (name, location) VALUES (<span class="string">'安吉莉娜'</span>, <span class="string">'美国'</span>);</span><br><span class="line"></span><br><span class="line"># 删除数据</span><br><span class="line">$ DELETE FROM 表名称 WHERE 字段 = 值;</span><br><span class="line">$ DELETE FROM people WHERE pid = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"># 更新数据</span><br><span class="line">$ UPDATE 表名称 SET 字段 = <span class="string">'值'</span> WHERE 字段 = 值;</span><br><span class="line">$ UPDATE people SET birth = <span class="string">'1975-06-04'</span> WHERE pid = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"># 查询数据  分栏查询 (*)所有</span><br><span class="line">$ SELECT 栏<span class="number">1</span>,栏<span class="number">2</span>,栏<span class="number">3.</span>.. FROM 数据表;</span><br><span class="line">$ SELECT * FROM people;  </span><br><span class="line"></span><br><span class="line"># where 限制条件</span><br><span class="line">$ SELECT * FROM people WHERE location = <span class="string">'美国'</span>;</span><br><span class="line"></span><br><span class="line"># ORDER BY 排序 默认ASC升序(DESC降序)</span><br><span class="line">$ SELECT * FROM people ORDER BY people_birth DESC;</span><br><span class="line"></span><br><span class="line"># LIMIT 限制查询数量  OFFSET 查询开始的偏移量</span><br><span class="line">$ SELECT * FROM people WHERE location = <span class="string">'美国'</span> LIMIT <span class="number">3</span>;</span><br><span class="line">$ SELECT * FROM people LIMIT <span class="number">3</span> OFFSET <span class="number">1</span>;</span><br><span class="line">$ SELECT * FROM people LIMIT <span class="number">1</span>, <span class="number">3</span>;(等价于上一条)</span><br><span class="line"></span><br><span class="line"># 比较(大于，小于，大于等于，小于等于，或者不等于)</span><br><span class="line">$ SELECT * FROM people WHERE birth &gt; <span class="string">'1960-01-01'</span>;</span><br><span class="line"></span><br><span class="line"># 逻辑(AND:并且 OR:或者)</span><br><span class="line">$ SELECT * FROM people WHERE birth &gt; <span class="string">'1960-01-01'</span> AND birth &lt; <span class="string">'1970-01-01'</span>;</span><br><span class="line">$ SELECT * FROM people WHERE birth &gt; <span class="string">'1970-01-01'</span> OR birth &lt; <span class="string">'1960-01-01'</span>;</span><br><span class="line"></span><br><span class="line"># IN:一个值在一个集合里面  NOT IN:不在</span><br><span class="line">$ SELECT * FROM people WHERE location IN (<span class="string">'美国'</span>, <span class="string">'英国'</span>);</span><br><span class="line">$ SELECT * FROM people WHERE location NOT IN (<span class="string">'美国'</span>, <span class="string">'英国'</span>);</span><br><span class="line"></span><br><span class="line"># LIKE(% 表示一个或者多个字符，_ 表示一个字符)</span><br><span class="line">$ SELECT * FROM people WHERE name LIKE (<span class="string">'李%'</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 栏的名称有冲突的话，写成 数据表.数据栏</span><br><span class="line"># SELECT 栏<span class="number">1</span>,栏<span class="number">2</span> FROM 数据表<span class="number">1</span>, 数据表<span class="number">2</span> WHERE 组织条件</span><br><span class="line">$ SELECT user_name, review_content FROM user, review WHERE review.user_id = user.user_id;</span><br><span class="line"></span><br><span class="line"># 表与表之间, 表示CROSS JOIN:交叉关联  INNER JOIN:内部关联</span><br><span class="line">$ SELECT user_name, review_content FROM user INNER JOIN review ON review.user_id = user.user_id;</span><br><span class="line"></span><br><span class="line"># INNER JOIN(交集) 后继续设置条件</span><br><span class="line">$ SELECT user_name, review_content FROM user INNER JOIN review ON review.user_id = user.user_id WHERE user.user_id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># LEFT JOIN:左关联 RIGHT JOIN:右关联</span><br><span class="line"># 以哪个为主显示所有内容 次表有就关联显示 没有就null</span><br><span class="line">$ SELECT user_name, review_content FROM user LEFT JOIN review ON review.user_id = user.user_id;</span><br><span class="line"></span><br><span class="line"># COUNT()函数统计此栏的 数量</span><br><span class="line">$ SELECT COUNT(review_id) FROM review;</span><br><span class="line"></span><br><span class="line"># GROUP BY: 通过某个栏分组</span><br><span class="line">$ SELECT film_id, COUNT((review_id) FROM review GROUP BY film_id;</span><br><span class="line"></span><br><span class="line"># AVG()函数计算平均分</span><br><span class="line">$ SELECT film_id, AVG(review_rate) FROM review GROUP BY film_id;</span><br><span class="line"></span><br><span class="line"># SUM()函数求和</span><br></pre></td></tr></table></figure><hr><h3 id="一些查询例子"><a href="#一些查询例子" class="headerlink" title="一些查询例子"></a>一些查询例子</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查询电影平均分</span><br><span class="line">$ SELECT review.film_id, film.film_name, AVG(review_rate) FROM review, film WHERE review.film_id = film.film_id GROUP BY review.film_id;</span><br><span class="line"></span><br><span class="line"># 查询电影名与参与电影人和工作</span><br><span class="line">$ SELECT film_name, people_name, job FROM film, people, film_people WHERE film_people.film_id = film.film_id AND film_people.people_id = people.people_id;</span><br><span class="line"></span><br><span class="line"># 查询电影名为x的参与电影人和工作 on duplicate key 当被约束时更新xxxxx</span><br><span class="line">$ SELECT film_name, people_name, job FROM film, people, film_people WHERE film_people.film_id = film.film_id AND film_people.people_id = people.people_id AND film_name = <span class="string">'x'</span> on duplicate key update xxxxxx;</span><br><span class="line"></span><br><span class="line"># 查询电影票房按导演名分组 按票房降序排序</span><br><span class="line"># AS 可以给数据栏和数据表起别名</span><br><span class="line">$ SELECT SUM(film_box) AS total_box, people_name FROM film, people, crew WHERE crew.film_id = film.film_id AND crew.people_id = people.people_id AND crew_job = <span class="string">'导演'</span> GROUP BY people_name ORDER BY total_box DESC;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;mysql&lt;/code&gt; 的学习,感谢&lt;a href=&quot;http://www.runoob.com/mysql/mysql-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程&lt;/a&gt;与&lt;a href=&quot;https://ninghao.net/package/mysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宁皓网&lt;/a&gt;提供的优秀资料随着学习的深入,此文章持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://zhaohang.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://zhaohang.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>node.js学习</title>
    <link href="http://zhaohang.site/2017/11/01/node-js%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhaohang.site/2017/11/01/node-js学习/</id>
    <published>2017-10-31T23:40:12.000Z</published>
    <updated>2018-06-13T01:40:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于 <code>node.js</code> 的学习,感谢<a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>与<a href="http://www.imooc.com/course/list?c=nodejs" target="_blank" rel="noopener">慕课网</a>提供的优秀资料随着学习的深入,此文章持续更新…</p><a id="more"></a><hr><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><ul><li>支持<code>js json node</code>扩展名,不写依次尝试</li><li>不写路径则认为是<code>build-in</code>模块或各级<code>node_modules</code>内的第三方模块</li><li><code>module</code>被加载的时候执行,加载后缓存</li><li>一旦出现某个模块被循环加载,就只输出已经执行的部分,还未执行的部分不会输出</li><li><code>const exports = module.exports</code></li></ul><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>node 里面没有<code>window</code>全局变量,取代的是<code>global</code>全局变量,例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">global.a = <span class="number">200</span></span><br><span class="line"><span class="comment">// 暴露到全局中</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><h4 id="global-process"><a href="#global-process" class="headerlink" title="global.process"></a>global.process</h4><ul><li>挂载在全局<code>global</code>下的方法,可以读取 node 命令参数</li></ul><p>输出到控制台</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.stdout</span><br></pre></td></tr></table></figure><p>argv = [node 命令, main.js 路径, –test, a=1, b=2]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> argv = process</span><br><span class="line">node main.js --test a=<span class="number">1</span> b=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>当前进程执行路径(执行 node 脚本的路径)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.cwd())</span><br></pre></td></tr></table></figure><p>插入当前事件队列的最后一个 发生顺序 <code>nextTick</code> &gt; <code>setTimeout</code> &gt; `setImmediate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h4><ul><li>Buffer 类似于数组,挂载在全局<code>global</code>下的方法,操作二进制数据流</li></ul><p>创建一个长度 10 且不可改变长度的 Buffer,默认用 0 填充</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.alloc(<span class="number">10</span>)</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">4</span></span><br><span class="line">Buffer.alloc(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 用1填充</span></span><br></pre></td></tr></table></figure><p>定义一个长度为 10 的 Buffer,内容随机.因为没有清空值,所以创建速度更快</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Buffer.allocUnsafe(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>创建指定内容的 Buffer,默认使用 utf-8 编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Buffer.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">Buffer.from(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure><p>Buffer 长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Buffer.byteLength(<span class="string">'test'</span>) <span class="comment">// 4</span></span><br><span class="line">Buffer.byteLength(<span class="string">'测试'</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>判断 Buffer 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Buffer.isBuffer(&#123;&#125;) <span class="comment">// false</span></span><br><span class="line">Buffer.isBuffer(Buffer.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>拼接 Buffer 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.concat([Buffer.from(<span class="string">'hello'</span>), Buffer.from(<span class="string">' world'</span>)])</span><br></pre></td></tr></table></figure><ul><li>Buffer 类型的一些实例方法:</li></ul><p>转换字符串类型,默认 utf-8 编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'base64'</span>))</span><br></pre></td></tr></table></figure><p>Buffer 类型初始定义长度,与内容无关</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(buf.length) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>填充 Buffer 类型内容,第一个参数为填充内容,第二三个参数为填充位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(buf.fill(<span class="number">10</span>, <span class="number">2</span>, <span class="number">6</span>)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>判断 Buffer 类型的内容是否一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Buffer.from(<span class="string">'test'</span>).equals(Buffer.from(<span class="string">'test'</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>判断 Buffer 类型包含的内容位置,类似于数组的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Buffer.from(<span class="string">'test'</span>).indexOf(<span class="string">'es'</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Buffer.from(<span class="string">'test'</span>).indexOf(<span class="string">'es!'</span>) <span class="comment">//  -1</span></span><br></pre></td></tr></table></figure><p>拷贝 Buffer 类型,参数<code>buf2</code>开始拷贝位置,<code>buf</code>拷贝区间汉字长度为 3,有时候会导致<code>copy</code>乱码,可以用内置包<code>string_decode</code>解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.alloc(<span class="number">3</span>)</span><br><span class="line">buf.copy(buf2, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> StringDecoder = <span class="built_in">require</span>(<span class="string">'string_decode'</span>).StringDecoder</span><br><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> StringDecoder(<span class="string">'utf8'</span>)</span><br><span class="line">decoder.write(buf2)</span><br></pre></td></tr></table></figure><h3 id="常用-api"><a href="#常用-api" class="headerlink" title="常用 api"></a>常用 api</h3><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><p>合并出文件路径<code>/usr/local/bin/</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line">path.join(<span class="string">'/usr'</span>, <span class="string">'local'</span>, <span class="string">'bin/'</span>)</span><br></pre></td></tr></table></figure><p>解析出绝对路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.resolve(<span class="string">'./'</span>)</span><br></pre></td></tr></table></figure><p>文件名 文件夹名 扩展名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(path.basename)</span><br><span class="line"><span class="built_in">console</span>.log(path.dirname)</span><br><span class="line"><span class="built_in">console</span>.log(path.extname)</span><br></pre></td></tr></table></figure><p>(总是)解析出文件绝对路径 文件夹绝对路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__dirname)</span><br><span class="line"><span class="built_in">console</span>.log(__filename)</span><br></pre></td></tr></table></figure><p><code>./</code>有两种情况:</p><ol><li>当在<code>require</code>里面使用时,等同于<code>__dirname</code>(总是文件绝对路径)</li><li>当在其他地方使用时,等同于<code>process.cwd()</code>(相对于进程绝对路径)</li></ol><h4 id="events"><a href="#events" class="headerlink" title="events"></a>events</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomEvent</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> ce = <span class="keyword">new</span> CustomEvent()</span><br></pre></td></tr></table></figure><p><code>on</code> 绑定事件与触发函数,一个事件可以绑定多个函数<br><code>emit</code> 触发事件,填入参数<br><code>removeListener</code>移除单个事件函数<br><code>removeAllListener</code>移除所有事件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'remove'</span>)</span><br><span class="line">&#125;</span><br><span class="line">ce.on(<span class="string">'error'</span>, (err, time) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">console</span>.log(time)</span><br><span class="line">&#125;)</span><br><span class="line">ce.on(<span class="string">'error'</span>, fn1)</span><br><span class="line">ce.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops!'</span>), <span class="built_in">Date</span>.now())</span><br><span class="line">ce.removeListener(<span class="string">'error'</span>, fn1)</span><br></pre></td></tr></table></figure><p><code>once</code> 绑定的事件只会触发一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ce.once(<span class="string">'test'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test event once'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fs-文件操作"><a href="#fs-文件操作" class="headerlink" title="fs 文件操作"></a>fs 文件操作</h4><p>读取文件,分同步与异步方法,可设置读取格式参数<code>utf8</code> 默认为<code>Buffer</code>类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.readFile(<span class="string">'./main.js'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(<span class="string">'./main.js'</span>, <span class="string">'utf8'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br></pre></td></tr></table></figure><p>创建写入文件,默认类型<code>utf8</code> 也可以传入<code>Buffer</code>类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(<span class="string">'./text'</span>, <span class="string">'hello world'</span>, <span class="string">'uft8'</span>, err =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> content = Buffer.from(<span class="string">'this is a test!'</span>)</span><br><span class="line">fs.writeFile(<span class="string">'./text'</span>, content, err =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文件内容</span></span><br><span class="line">fs.appendFile(<span class="string">'file'</span>, <span class="string">'你好 python'</span>, err =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>读取文件状态 监视文件状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(<span class="string">'./main.js'</span>, (err, stats) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件不存在'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(stats.isFile())</span><br><span class="line">    <span class="built_in">console</span>.log(stats)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.watch(</span><br><span class="line">    <span class="string">'./'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        recursive: <span class="literal">true</span>, <span class="comment">// 递归监视</span></span><br><span class="line">    &#125;,</span><br><span class="line">    (eventType, filename) =&gt; &#123;</span><br><span class="line">        <span class="comment">//事件类型   文件名</span></span><br><span class="line">        <span class="built_in">console</span>.log(eventType, filename)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>文件流相关 读与写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rs = fs.createReadStream(<span class="string">'./main.js'</span>)</span><br><span class="line"><span class="comment">// 打印到控制台,pipe可以链式使用</span></span><br><span class="line">rs.pipe(process.stdout).pipe(...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = fs.createWriteStream(<span class="string">'./text.txt'</span>)</span><br><span class="line"><span class="keyword">const</span> tid = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        ws.write(num + <span class="string">''</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clearInterval(tid)</span><br><span class="line">        <span class="comment">// 结束写入流</span></span><br><span class="line">        ws.end()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// 结束时触发 finish 事件</span></span><br><span class="line">ws.on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'done!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>压缩文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createGzip, createDeflate &#125; = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> inp = fs.createReadStream(<span class="string">'input.txt'</span>)</span><br><span class="line"><span class="keyword">const</span> out = fs.createWriteStream(<span class="string">'input.txt.gz'</span>)</span><br><span class="line">inp.pipe(createGzip()).pipe(out)</span><br></pre></td></tr></table></figure><p>改名 删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(<span class="string">'./main.js'</span>, <span class="string">'index.js'</span>, err =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">fs.unlink(<span class="string">'./main.js'</span>, err =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>读取文件列表 创建文件夹 删除文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(<span class="string">'./'</span>, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(files)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">'test'</span>, err =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">fs.rmdir(<span class="string">'test'</span>, err =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h4><p>目前解决异步的方法<code>promise</code> 与 <code>async await</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise化工具</span></span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">'util'</span>).promisify</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> read = promisify(fs.readFile)</span><br><span class="line">read(<span class="string">'./main.js'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// async await</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> content = <span class="keyword">await</span> read(<span class="string">'./main.js'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(content.toString())</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于 &lt;code&gt;node.js&lt;/code&gt; 的学习,感谢&lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程&lt;/a&gt;与&lt;a href=&quot;http://www.imooc.com/course/list?c=nodejs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;慕课网&lt;/a&gt;提供的优秀资料随着学习的深入,此文章持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhaohang.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="node" scheme="http://zhaohang.site/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>go依赖管理工具govendor</title>
    <link href="http://zhaohang.site/2017/10/24/go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7govendor/"/>
    <id>http://zhaohang.site/2017/10/24/go依赖管理工具govendor/</id>
    <published>2017-10-24T11:16:12.000Z</published>
    <updated>2018-06-13T01:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">govendor</a>是类似于<code>npm</code>的一个包管理工具…</p><a id="more"></a><p>该工具将项目依赖的外部包拷贝到项目下的 <code>vendor</code> 目录下，并通过 <code>vendor.json</code> 文件来记录依赖包的版本，方便用户使用相对稳定的依赖。</p><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">缩写状态</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">+local</td><td style="text-align:center">l</td><td style="text-align:center">本地包，即项目自身的包组织</td></tr><tr><td style="text-align:center">+external</td><td style="text-align:center">e</td><td style="text-align:center">外部包，即被 <code>$GOPATH</code> 管理，但不在 <code>vendor</code> 目录下</td></tr><tr><td style="text-align:center">+vendor</td><td style="text-align:center">v</td><td style="text-align:center">已被 <code>govendor</code> 管理，即在 <code>vendor</code> 目录下</td></tr><tr><td style="text-align:center">+std</td><td style="text-align:center">s</td><td style="text-align:center">标准库中的包</td></tr><tr><td style="text-align:center">+unused</td><td style="text-align:center">u</td><td style="text-align:center">未使用的包，即包在 vendor 目录下，但项目并没有用到</td></tr><tr><td style="text-align:center">+missing</td><td style="text-align:center">m</td><td style="text-align:center">代码引用了依赖包，但该包并没有找到</td></tr><tr><td style="text-align:center">+program</td><td style="text-align:center">p</td><td style="text-align:center">主程序包，意味着可以编译为执行文件</td></tr><tr><td style="text-align:center">+outside</td><td style="text-align:center"></td><td style="text-align:center">外部包和缺失的包</td></tr><tr><td style="text-align:center">+all</td><td style="text-align:center"></td><td style="text-align:center">所有的包</td></tr></tbody></table><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">init</td><td style="text-align:center">创建 <code>vendor</code> 文件夹和 <code>vendor.json</code> 文件</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">列出已经存在的依赖包</td></tr><tr><td style="text-align:center">add</td><td style="text-align:center">从 <code>$GOPATH</code> 中添加依赖包，会加到 vendor.json</td></tr><tr><td style="text-align:center">update</td><td style="text-align:center">从 <code>$GOPATH</code> 升级依赖包</td></tr><tr><td style="text-align:center">remove</td><td style="text-align:center">从 <code>vendor</code> 文件夹删除依赖</td></tr><tr><td style="text-align:center">status</td><td style="text-align:center">列出本地丢失的、过期的和修改的<code>package</code></td></tr><tr><td style="text-align:center">fetch</td><td style="text-align:center">从远端库添加或者更新 <code>vendor</code> 文件中的依赖包</td></tr><tr><td style="text-align:center">sync</td><td style="text-align:center">本地存在<code>vendor.json</code> 时候拉取依赖包，匹配所记录的版本</td></tr><tr><td style="text-align:center">get</td><td style="text-align:center">等同于<code>go get</code></td></tr></tbody></table><h3 id="常用指令说明"><a href="#常用指令说明" class="headerlink" title="常用指令说明"></a>常用指令说明</h3><p>安装<code>govendor</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/kardianos/govendor</span><br></pre></td></tr></table></figure><p>从<code>$GOPATH</code> 中添加所有依赖包</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">govendor <span class="keyword">add</span><span class="bash"> +external</span></span><br></pre></td></tr></table></figure><p>查看使用的包列表</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">govendor <span class="built_in">list</span> -v fmt</span><br></pre></td></tr></table></figure><p>从线上远端库添加或更新最新的依赖包</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">govendor fetch golang<span class="meta">.org</span>/<span class="built_in">x</span>/net/context</span><br></pre></td></tr></table></figure><p>从线上远端库添加或更新标签或分支等于<code>v1</code>的依赖包</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">govendor fetch golang<span class="meta">.org</span>/<span class="built_in">x</span>/net/context@=v1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/kardianos/govendor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;govendor&lt;/a&gt;是类似于&lt;code&gt;npm&lt;/code&gt;的一个包管理工具…&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhaohang.site/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="go" scheme="http://zhaohang.site/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>服务器响应状态码大全</title>
    <link href="http://zhaohang.site/2017/10/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81%E5%A4%A7%E5%85%A8/"/>
    <id>http://zhaohang.site/2017/10/17/服务器响应状态码大全/</id>
    <published>2017-10-17T01:10:12.000Z</published>
    <updated>2018-01-05T13:21:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>状态码天天遇到,这东西就是个约定,知道就行,下面先来看一些常用的:</p><a id="more"></a><ul><li>200：服务器响应正常(ok)。</li><li>304：该资源在上次请求之后没有任何修改（这通常用于浏览器的缓存机制，使用 GET 请求时尤其需要注意）。</li><li>400：无法找到请求的资源(服务器得到响应但没有可以返回的数据)。</li><li>401：访问资源的权限不够。</li><li>403：没有权限访问资源。</li><li>404：需要访问的资源不存在(大名鼎鼎的 404)。</li><li>405：需要访问的资源被禁止。</li><li>500：服务器内部错误(5 开头一般都是服务器错误了)。</li></ul><hr><blockquote><p>下面列出状态码大全备用:</p></blockquote><ul><li><p>100——客户必须继续发出请求</p></li><li><p>101——客户要求服务器根据请求转换 HTTP 协议版本</p></li><li><p>200——交易成功</p></li><li><p>201——提示知道新文件的 URL</p></li><li><p>202——接受和处理、但处理未完成</p></li><li><p>203——返回信息不确定或不完整</p></li><li><p>204——请求收到，但返回信息为空</p></li><li><p>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</p></li><li><p>206——服务器已经完成了部分用户的 GET 请求</p></li><li><p>300——请求的资源可在多处得到</p></li><li><p>301——删除请求数据</p></li><li><p>302——在其他地址发现了请求数据</p></li><li><p>303——建议客户访问其他 URL 或访问方式</p></li><li><p>304——客户端已经执行了 GET，但文件未变化</p></li><li><p>305——请求的资源必须从服务器指定的地址得到</p></li><li><p>306——前一版本 HTTP 中使用的代码，现行版本中不再使用</p></li><li><p>307——申明请求的资源临时性删除</p></li><li><p>400——错误请求，如语法错误</p></li><li><p>401——请求授权失败</p></li><li><p>402——保留有效 ChargeTo 头响应</p></li><li><p>403——请求不允许</p></li><li><p>404——没有发现文件、查询或 URl</p></li><li><p>405——用户在 Request-Line 字段定义的方法不允许</p></li><li><p>406——根据用户发送的 Accept 拖，请求资源不可访问</p></li><li><p>407——类似 401，用户必须首先在代理服务器上得到授权</p></li><li><p>408——客户端没有在用户指定的时间内完成请求</p></li><li><p>409——对当前资源状态，请求不能完成</p></li><li><p>410——服务器上不再有此资源且无进一步的参考地址</p></li><li><p>411——服务器拒绝用户定义的 Content-Length 属性请求</p></li><li><p>412——一个或多个请求头字段在当前请求中错误</p></li><li><p>413——请求的资源大于服务器允许的大小</p></li><li><p>414——请求的资源 URL 长于服务器允许的长度</p></li><li><p>415——请求资源不支持请求项目格式</p></li><li><p>416——请求中包含 Range 请求头字段，在当前请求资源范围内没有 range 指示值，请求也不包含 If-Range 请求头字段</p></li><li><p>417——服务器不满足请求 Expect 头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</p></li><li><p>500——服务器产生内部错误</p></li><li><p>501——服务器不支持请求的函数</p></li><li><p>502——服务器暂时不可用，有时是为了防止发生系统过载</p></li><li><p>503——服务器过载或暂停维修</p></li><li><p>504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</p></li><li><p>505——服务器不支持或拒绝支请求头中指定的 HTTP 版本</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;状态码天天遇到,这东西就是个约定,知道就行,下面先来看一些常用的:&lt;/p&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://zhaohang.site/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="variety" scheme="http://zhaohang.site/tags/variety/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习</title>
    <link href="http://zhaohang.site/2017/10/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhaohang.site/2017/10/05/正则表达式学习/</id>
    <published>2017-10-05T06:15:18.000Z</published>
    <updated>2018-06-13T02:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于这个东西,我并不想多说,不求掌握,只求别人写的能看懂,本文参考了<a href="http://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>与<a href="http://www.imooc.com/learn/706" target="_blank" rel="noopener">慕课网</a>,感谢分享</p><a id="more"></a><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>下面来简单了解一下相关解释</p><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>元字符就是特殊字符，就是正则里面有特殊含义的字符如果要查找这些符号原义,需要进行转义,即加上反斜杠<code>\</code></p><blockquote><p>由于框架不完善,不能正确识别转义,以下表格<code>\</code>代表<code>|</code></p></blockquote><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">g</td><td style="text-align:left">全局匹配</td></tr><tr><td style="text-align:center">i</td><td style="text-align:left">忽略大小写,默认大小写敏感</td></tr><tr><td style="text-align:center">m</td><td style="text-align:left">多行搜索</td></tr><tr><td style="text-align:center">(assert)</td><td style="text-align:left">分组功能,匹配 <code>assert</code> 并获取这一匹配。所获取的匹配可以从产生的 <code>Matches</code> 集合得到</td></tr><tr><td style="text-align:center">[xyz]</td><td style="text-align:left">字符集合,匹配所包含的任意一个字符<code>[abc]</code>可以匹配<code>plain</code>中的 <code>a</code></td></tr><tr><td style="text-align:center">[^xyz]</td><td style="text-align:left">负值字符集合,匹配未包含的任意字符</td></tr><tr><td style="text-align:center">[a-z]</td><td style="text-align:left">字符范围。匹配指定范围内的任意字符 表示小写字母集合</td></tr><tr><td style="text-align:center">[^a-z]</td><td style="text-align:left">负值字符范围,匹配任何不在指定范围内的任意字符 表示非小写字母集合</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:left">匹配字母,数字,下划线.等价于<code>[A-Za-z0-9_]</code></td></tr><tr><td style="text-align:center">\W</td><td style="text-align:left">匹配非字母,数字,下划线.等价于<code>[^A-Za-z0-9_]</code></td></tr><tr><td style="text-align:center">\d</td><td style="text-align:left">匹配一个数字字符,等价于 <code>[0-9]</code></td></tr><tr><td style="text-align:center">\D</td><td style="text-align:left">匹配一个非数字字符,等价于 <code>[^0-9]</code></td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配任何空白字符,包括空格,制表符,换页符等.等价于<code>[ \f\n\r\t\v]</code></td></tr><tr><td style="text-align:center">\S</td><td style="text-align:left">匹配任何非空白字符,等价于<code>[^ \f\n\r\t\v]</code></td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除换行符 <code>\n</code> 之外的任何单字符</td></tr><tr><td style="text-align:center"><code>x\y</code></td><td style="text-align:left">匹配 x 或 y <code>(z\f)ood</code> 则匹配 <code>zood&quot; 或 &quot;food</code></td></tr><tr><td style="text-align:center">exp(?:assert)</td><td style="text-align:left">断言匹配 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用</td></tr><tr><td style="text-align:center">exp(?=assert)</td><td style="text-align:left">非获取匹配,正向匹配<code>Windows(?=95\\98\\NT\\2000)</code>能匹配<code>Windows2000</code>中的<code>Windows</code></td></tr><tr><td style="text-align:center">exp(?!assert)</td><td style="text-align:left">非获取匹配,反向匹配<code>Windows(?!95\\98\\NT\\2000)</code>能匹配<code>Windows3.1</code>中的<code>Windows</code></td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">匹配前面的子表达式零次或多次 <code>*</code> 等价于<code>{0,}</code></td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">匹配前面的子表达式一次或多次 <code>+</code> 等价于<code>{1,}</code></td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">匹配前面的子表达式零次或一次 <code>?</code> 等价于<code>{0,1}</code></td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:left"><code>n</code> 是一个非负整数。匹配确定的 <code>n</code>次</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:left"><code>n</code> 是一个非负整数。至少匹配<code>n</code> 次 <code>o{1,}</code> 等价于 <code>o+</code> <code>o{0,}</code> 等价于 <code>o*</code></td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:left">均为非负整数,其中<code>n &lt;= m</code>最少匹配 n 次且最多匹配 m 次 <code>o{0,1}&#39;</code>等价于 <code>o?</code></td></tr></tbody></table><hr><p><strong><code>*、+</code>限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个<code>?</code>就可以实现非贪婪或最小匹配</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">H1</span>&gt;</span>Chapter 1 - 介绍正则表达式<span class="tag">&lt;/<span class="name">H1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 贪婪: 匹配整句</span></span><br><span class="line">/&lt;.*&gt;/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 非贪婪: 只配置开始结束标签</span></span><br><span class="line">/&lt;.*?&gt;/</span><br></pre></td></tr></table></figure><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><p>定位符使您能够将正则表达式固定到行首或行尾或固定到一个单词的开头或者结尾</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">匹配输入字符串开始的位置</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配输入字符串结尾的位置</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配一个字边界，即字开头结尾</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">非字边界匹配</td></tr></tbody></table><h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 <code>1</code> 开始，最多可存储 <code>99</code> 个捕获的子表达式。每个缓冲区都可以使用<code>\n</code> 访问，其中 <code>n</code> 为一个标识特定缓冲区的一位或两位十进制数</p><p>可以使用非捕获元字符 <code>?:、?= 或 ?!</code> 来重写捕获，忽略对相关匹配的保存</p><h3 id="JavaScript-中的正则"><a href="#JavaScript-中的正则" class="headerlink" title="JavaScript 中的正则"></a>JavaScript 中的正则</h3><p>对于<code>JavaScript</code>来说,捕获访问符合是<code>$1,$2...</code></p><p>一些常用方法</p><p>split: 把字符串按照规则分成数组 平时的使用,也是把输入的字符串转换成正则来生效的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a1b4c-f.'</span>.split(<span class="regexp">/[\d-\.]/</span>)    <span class="regexp">//</span>[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"f"</span>, <span class="string">""</span>]</span><br></pre></td></tr></table></figure><p>replace: 替换符合匹配规定的字符串 可通过<code>$n</code>获取子匹配 平时的使用,也是把输入的字符串转换成正则来生效的</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'2015-12-25'</span>.replace(/(\d&#123;<span class="number">4</span>&#125;)-(\d&#123;<span class="number">2</span>&#125;)-(\d&#123;<span class="number">2</span>&#125;)/,<span class="string">'$2-$3-$1'</span>)   // <span class="number">12</span>-<span class="number">25</span>-<span class="number">2015</span></span><br><span class="line"></span><br><span class="line">// match: 匹配的字符串  <span class="built_in">a1</span>, <span class="built_in">a2</span>, <span class="built_in">a3</span>: 匹配的字表达式值,没有字表达式就没有这个参数 index: match位置 origin: 被检查的字符串</span><br><span class="line"><span class="string">'a1b2c3d4e5'</span>.replace(/(\d)(\w)(\d)/g, <span class="meta">function</span>(match, <span class="built_in">a1</span>, <span class="built_in">a2</span>, <span class="built_in">a3</span>, index, origin) &#123;</span><br><span class="line">    return <span class="built_in">a1</span> + <span class="built_in">a3</span></span><br><span class="line">&#125;)</span><br><span class="line">// 虽然匹配到的是数字,但<span class="built_in">a1</span> <span class="built_in">a3</span> 都是字符串 所以 返回  <span class="string">"a13c34e5"</span></span><br></pre></td></tr></table></figure><p>test: 检查是否存在匹配 返回<code>bool</code> 当全局匹配的时候 <code>reg.lastIndex</code>会因为变动而存在一些问题,需要注意</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\d(\w)/.test('asdsad<span class="number">2132</span>1')   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>exec: 检查匹配 无匹配返回<code>null</code> 有匹配返回一个数组 <code>index</code>匹配文本的第一个位置<code>input</code>被检查的字符串 全局匹配同样存在问题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/\d(\w)/</span>.exec(<span class="string">'asdsad21321'</span>)   <span class="regexp">//</span>  [<span class="string">"21"</span>, <span class="string">"1"</span>, index: <span class="number">6</span>, input: <span class="string">"asdsad21321"</span>]</span><br></pre></td></tr></table></figure><p>search : 忽略全局符合<code>g</code> 返回符合查询的<code>index</code></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aasf134'</span>.search<span class="comment">(s)</span>               <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>match: 非全局模式下与<code>exec</code>返回的内容一样 全局模式下,返回所有匹配的字符串数组 没有<code>input,index</code> <code>match</code>无视<code>lastIndex</code>属性</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'$1az2bb3cy4dd5ee'</span>.match(<span class="regexp">/\d(\w)(\w)\d/g</span>)      <span class="regexp">//</span>[<span class="string">'1az2'</span>,<span class="string">'3cy4'</span>]</span><br></pre></td></tr></table></figure><h3 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h3><h4 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h4><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n 位的数字：<strong>^\d{n}$</strong></li><li>至少 n 位的数字：<strong>^\d{n,}$</strong></li><li>m-n 位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带 1-2 位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有 1~3 位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</strong></li><li>负浮点数：<strong>^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</strong></li></ul><h4 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h4><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为 3-20 的所有字符：<strong>^.{3,20}$</strong></li><li>由 26 个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由 26 个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由 26 个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和 26 个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26 个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有\^%&amp;’,;=?$\”等字符：<strong>[^%&amp;’,;=?$\x22]+</strong></li><li>禁止输入含有~的字符：<strong>[^~\x22]+</strong></li></ul><h4 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h4><ul><li>Email 地址：<strong>^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*$</strong></li><li>域名：<strong>[a-zA-Z0-9][-a-za-z0-9]{0,62}(/.[a-zA-Z0-9][-a-za-z0-9]{0,62})+/.?</strong></li><li>InternetURL：<strong>[a-zA-z]+://[^\s]<em> 或 ^<a href="http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=" target="_blank" rel="noopener">http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=</a>]</em>)?$</strong></li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4 位区号，7-8 位直播号码，1－4 位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15 位、18 位数字)，最后一位是校验位，可能为数字或字符 X：<strong>(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</strong></li><li>帐号是否合法(字母开头，允许 5-16 字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-za-z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的 12 个月(01 ～ 09 和 1 ～ 12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的 31 天(01 ～ 09 和 1 ～ 31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以 0 开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个 0 或者一个不以 0 开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个 0 或者一个可能为负的开头不为 0 的数字.让用户以 0 开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有 1 位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1 到 3 个数字,后面跟着任意个 逗号+3 个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了<code>+</code>可以用<code>*</code>替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml 文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|m][l|L]$</strong></li><li>中文字符的正则表达式：<strong>[\u4e00-\u9fa5]</strong></li><li>双字节字符：<strong>[^\x00-\xff]</strong> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计 2，ASCII 字符计 1))</li><li>空白行的正则表达式：<strong>\n\s*\r</strong> (可以用来删除空白行)</li><li>HTML 标记的正则表达式：<strong>&lt;(\S<em>?)[^&gt;]</em>&gt;.<em>?|&lt;.</em>? /&gt;</strong>( 首尾空白字符的正则表达式：<strong>^\s<em>|\s</em>$</strong>或<strong>(^\s<em>)|(\s</em>$)</strong> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯 QQ 号：<strong>[1-9][0-9]{4,}</strong> (腾讯 QQ 号从 10000 开始)</li><li>中国邮政编码：<strong>[1-9]\d{5}(?!\d)</strong> (中国邮政编码为 6 位数字)</li><li>IP 地址：<strong>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于这个东西,我并不想多说,不求掌握,只求别人写的能看懂,本文参考了&lt;a href=&quot;http://www.runoob.com/regexp/regexp-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程&lt;/a&gt;与&lt;a href=&quot;http://www.imooc.com/learn/706&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;慕课网&lt;/a&gt;,感谢分享&lt;/p&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://zhaohang.site/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="variety" scheme="http://zhaohang.site/tags/variety/"/>
    
  </entry>
  
  <entry>
    <title>photoshop简单学习</title>
    <link href="http://zhaohang.site/2017/09/26/photoshop%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zhaohang.site/2017/09/26/photoshop简单学习/</id>
    <published>2017-09-26T06:12:18.000Z</published>
    <updated>2018-06-13T02:19:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>photoshop</code>一直觉得是一门十分实用的技能,了解一下很有必要随着深入学习,此篇文章持续更新…</p><a id="more"></a><h3 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h3><ul><li>web 常用格式一般是<code>高度不固定,宽度1920</code>等按需设置,背景为<code>透明</code></li><li>首选项-<code>单位与标尺</code>-全部改为<code>像素</code></li><li>视图里面 显示-<code>智能参考线</code> 打钩 <code>标尺</code> 打钩</li><li>右边界面 4 大功能 上面<code>字符信息</code> 下面<code>图层历史记录</code></li><li>信息界面面板选项改为<code>rpg</code>颜色模式 标尺为<code>像素</code> <code>文档尺寸</code>勾选</li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>Windows 系统：Ctrl + Shift + Alt + E</li><li>Mac OS 系统：Cmd + Shift + Opt + E</li></ul><table><thead><tr><th style="text-align:left">功能介绍</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">新建文件</td><td style="text-align:left">Ctrl + N</td></tr><tr><td style="text-align:left">新建图层</td><td style="text-align:left">Ctrl + Shift + N（按住 Alt 可避免对话框)</td></tr><tr><td style="text-align:left">复制图层</td><td style="text-align:left">Ctrl + J</td></tr><tr><td style="text-align:left">选中多个图层</td><td style="text-align:left">Shift + 单击鼠标左键</td></tr><tr><td style="text-align:left">合并选中图层</td><td style="text-align:left">Ctrl + E</td></tr><tr><td style="text-align:left">合并所有可见图层</td><td style="text-align:left">Ctrl + Shift + Alt + E</td></tr><tr><td style="text-align:left">对选中图层编组</td><td style="text-align:left">Ctrl + G/双击可改名字</td></tr><tr><td style="text-align:left">载入选区</td><td style="text-align:left">Ctrl + 左键点击(元素或图层缩略图)</td></tr><tr><td style="text-align:left">取消选区</td><td style="text-align:left">Ctrl + D</td></tr><tr><td style="text-align:left">选择全部</td><td style="text-align:left">Ctrl + A</td></tr><tr><td style="text-align:left">重做最后一项选择</td><td style="text-align:left">Ctrl + Shift + D</td></tr><tr><td style="text-align:left">加选取框,减选取框</td><td style="text-align:left"><code>M</code>,Shift,Alt</td></tr><tr><td style="text-align:left">正选取框,同心选取框</td><td style="text-align:left"><code>M</code>选取后 Shift(正)Alt(同)</td></tr><tr><td style="text-align:left">选择反选</td><td style="text-align:left">Ctrl + Shift + I</td></tr><tr><td style="text-align:left">删除所选元素</td><td style="text-align:left"><code>delete</code></td></tr><tr><td style="text-align:left">自由变换（缩放、斜切）</td><td style="text-align:left">Ctrl + T</td></tr><tr><td style="text-align:left">约束比例或从中心变换</td><td style="text-align:left"><code>Shift</code>=约束 或 <code>Alt</code>=中心</td></tr><tr><td style="text-align:left">添加到选区或从选区减去</td><td style="text-align:left">拖动时按住 Shift 或者 Alt</td></tr><tr><td style="text-align:left">填充图层/选区颜色</td><td style="text-align:left">Alt + Delete</td></tr><tr><td style="text-align:left">设置画笔颜色</td><td style="text-align:left">Alt + 单击左键选取示例色</td></tr><tr><td style="text-align:left">扩大/减小选框大小</td><td style="text-align:left"><code>[</code> = 缩小大小 <code>]</code> = 扩大大小</td></tr><tr><td style="text-align:left">撤销上一步/后退一步</td><td style="text-align:left">Ctrl + Z，Ctrl + Alt + Z</td></tr><tr><td style="text-align:left">放大/缩小</td><td style="text-align:left">Ctrl + “+” 或 Ctrl + “-“</td></tr><tr><td style="text-align:left">按屏幕大小缩放</td><td style="text-align:left">Ctrl + 0</td></tr><tr><td style="text-align:left">默认前景/背景色</td><td style="text-align:left">D</td></tr><tr><td style="text-align:left">对调前景/背景色</td><td style="text-align:left">X</td></tr><tr><td style="text-align:left">显示/隐藏 网格、参考线</td><td style="text-align:left">Ctrl + <code>&#39;</code>,Ctrl + <code>;</code></td></tr><tr><td style="text-align:left">复制该选区为新图层</td><td style="text-align:left">按住 Alt 同时拖动选区</td></tr><tr><td style="text-align:left">文件输出为 web 格式</td><td style="text-align:left">Ctrl + Shift + Alt + S</td></tr><tr><td style="text-align:left">文件存储为</td><td style="text-align:left">Ctrl + Shift + S</td></tr><tr><td style="text-align:left">关闭当前文档</td><td style="text-align:left">Ctrl + W</td></tr></tbody></table><h3 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h3><ul><li>一般方法:<br>可通过把整张图裁剪成一张张模块化小图,然后设置参考线,基于参考线自动切图,导出后可选择导出单张切图和所有切图</li></ul><ul><li>脚本方法:<br>文件-导出-将图层导出到文件选择 PNG-24(8)勾选全部 自动切图导出</li></ul><ul><li>简化方法:<br>首选项-增效工具-启用生成器文件-生成-图像资源(勾选)<br>设置之后会多一个同名文件夹,将想要使用的图层图像命名为相应格式(jpg,png)以后,可以在这个文件夹中看到保存的相应格式文件。通过命名可以更改保存文件的样式,例如命名 200%-像素大小扩大一倍<br>jpg8 就保存品质 80%(只有 jpg 有品质选项)<br>png8 就保存 png-8</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;photoshop&lt;/code&gt;一直觉得是一门十分实用的技能,了解一下很有必要随着深入学习,此篇文章持续更新…&lt;/p&gt;
    
    </summary>
    
      <category term="杂货铺" scheme="http://zhaohang.site/categories/%E6%9D%82%E8%B4%A7%E9%93%BA/"/>
    
    
      <category term="variety" scheme="http://zhaohang.site/tags/variety/"/>
    
  </entry>
  
</feed>
